
sx1276_lora_range_test_g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005524  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080055e0  080055e0  000065e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080057bc  080057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c4  080057c4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000067c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080057cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  08005828  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005828  000072fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2ff  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d5  00000000  00000000  00015383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00017858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c8  00000000  00000000  000183c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c79  00000000  00000000  00018c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed16  00000000  00000000  0002f909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b659  00000000  00000000  0003e61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9c78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d40  00000000  00000000  000c9cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000cc9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080055c8 	.word	0x080055c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080055c8 	.word	0x080055c8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 fc5a 	bl	8000d2c <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 fc55 	bl	8000d2c <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__aeabi_ddiv>:
 80005ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ee:	46de      	mov	lr, fp
 80005f0:	4645      	mov	r5, r8
 80005f2:	4657      	mov	r7, sl
 80005f4:	464e      	mov	r6, r9
 80005f6:	b5e0      	push	{r5, r6, r7, lr}
 80005f8:	b087      	sub	sp, #28
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	030b      	lsls	r3, r1, #12
 8000600:	0b1b      	lsrs	r3, r3, #12
 8000602:	469b      	mov	fp, r3
 8000604:	0fca      	lsrs	r2, r1, #31
 8000606:	004b      	lsls	r3, r1, #1
 8000608:	0004      	movs	r4, r0
 800060a:	4680      	mov	r8, r0
 800060c:	0d5b      	lsrs	r3, r3, #21
 800060e:	9202      	str	r2, [sp, #8]
 8000610:	d100      	bne.n	8000614 <__aeabi_ddiv+0x28>
 8000612:	e098      	b.n	8000746 <__aeabi_ddiv+0x15a>
 8000614:	4a7c      	ldr	r2, [pc, #496]	@ (8000808 <__aeabi_ddiv+0x21c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d037      	beq.n	800068a <__aeabi_ddiv+0x9e>
 800061a:	4659      	mov	r1, fp
 800061c:	0f42      	lsrs	r2, r0, #29
 800061e:	00c9      	lsls	r1, r1, #3
 8000620:	430a      	orrs	r2, r1
 8000622:	2180      	movs	r1, #128	@ 0x80
 8000624:	0409      	lsls	r1, r1, #16
 8000626:	4311      	orrs	r1, r2
 8000628:	00c2      	lsls	r2, r0, #3
 800062a:	4690      	mov	r8, r2
 800062c:	4a77      	ldr	r2, [pc, #476]	@ (800080c <__aeabi_ddiv+0x220>)
 800062e:	4689      	mov	r9, r1
 8000630:	4692      	mov	sl, r2
 8000632:	449a      	add	sl, r3
 8000634:	2300      	movs	r3, #0
 8000636:	2400      	movs	r4, #0
 8000638:	9303      	str	r3, [sp, #12]
 800063a:	9e00      	ldr	r6, [sp, #0]
 800063c:	9f01      	ldr	r7, [sp, #4]
 800063e:	033b      	lsls	r3, r7, #12
 8000640:	0b1b      	lsrs	r3, r3, #12
 8000642:	469b      	mov	fp, r3
 8000644:	007b      	lsls	r3, r7, #1
 8000646:	0030      	movs	r0, r6
 8000648:	0d5b      	lsrs	r3, r3, #21
 800064a:	0ffd      	lsrs	r5, r7, #31
 800064c:	2b00      	cmp	r3, #0
 800064e:	d059      	beq.n	8000704 <__aeabi_ddiv+0x118>
 8000650:	4a6d      	ldr	r2, [pc, #436]	@ (8000808 <__aeabi_ddiv+0x21c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d048      	beq.n	80006e8 <__aeabi_ddiv+0xfc>
 8000656:	4659      	mov	r1, fp
 8000658:	0f72      	lsrs	r2, r6, #29
 800065a:	00c9      	lsls	r1, r1, #3
 800065c:	430a      	orrs	r2, r1
 800065e:	2180      	movs	r1, #128	@ 0x80
 8000660:	0409      	lsls	r1, r1, #16
 8000662:	4311      	orrs	r1, r2
 8000664:	468b      	mov	fp, r1
 8000666:	4969      	ldr	r1, [pc, #420]	@ (800080c <__aeabi_ddiv+0x220>)
 8000668:	00f2      	lsls	r2, r6, #3
 800066a:	468c      	mov	ip, r1
 800066c:	4651      	mov	r1, sl
 800066e:	4463      	add	r3, ip
 8000670:	1acb      	subs	r3, r1, r3
 8000672:	469a      	mov	sl, r3
 8000674:	2100      	movs	r1, #0
 8000676:	9e02      	ldr	r6, [sp, #8]
 8000678:	406e      	eors	r6, r5
 800067a:	b2f6      	uxtb	r6, r6
 800067c:	2c0f      	cmp	r4, #15
 800067e:	d900      	bls.n	8000682 <__aeabi_ddiv+0x96>
 8000680:	e0ce      	b.n	8000820 <__aeabi_ddiv+0x234>
 8000682:	4b63      	ldr	r3, [pc, #396]	@ (8000810 <__aeabi_ddiv+0x224>)
 8000684:	00a4      	lsls	r4, r4, #2
 8000686:	591b      	ldr	r3, [r3, r4]
 8000688:	469f      	mov	pc, r3
 800068a:	465a      	mov	r2, fp
 800068c:	4302      	orrs	r2, r0
 800068e:	4691      	mov	r9, r2
 8000690:	d000      	beq.n	8000694 <__aeabi_ddiv+0xa8>
 8000692:	e090      	b.n	80007b6 <__aeabi_ddiv+0x1ca>
 8000694:	469a      	mov	sl, r3
 8000696:	2302      	movs	r3, #2
 8000698:	4690      	mov	r8, r2
 800069a:	2408      	movs	r4, #8
 800069c:	9303      	str	r3, [sp, #12]
 800069e:	e7cc      	b.n	800063a <__aeabi_ddiv+0x4e>
 80006a0:	46cb      	mov	fp, r9
 80006a2:	4642      	mov	r2, r8
 80006a4:	9d02      	ldr	r5, [sp, #8]
 80006a6:	9903      	ldr	r1, [sp, #12]
 80006a8:	2902      	cmp	r1, #2
 80006aa:	d100      	bne.n	80006ae <__aeabi_ddiv+0xc2>
 80006ac:	e1de      	b.n	8000a6c <__aeabi_ddiv+0x480>
 80006ae:	2903      	cmp	r1, #3
 80006b0:	d100      	bne.n	80006b4 <__aeabi_ddiv+0xc8>
 80006b2:	e08d      	b.n	80007d0 <__aeabi_ddiv+0x1e4>
 80006b4:	2901      	cmp	r1, #1
 80006b6:	d000      	beq.n	80006ba <__aeabi_ddiv+0xce>
 80006b8:	e179      	b.n	80009ae <__aeabi_ddiv+0x3c2>
 80006ba:	002e      	movs	r6, r5
 80006bc:	2200      	movs	r2, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	2400      	movs	r4, #0
 80006c2:	4690      	mov	r8, r2
 80006c4:	051b      	lsls	r3, r3, #20
 80006c6:	4323      	orrs	r3, r4
 80006c8:	07f6      	lsls	r6, r6, #31
 80006ca:	4333      	orrs	r3, r6
 80006cc:	4640      	mov	r0, r8
 80006ce:	0019      	movs	r1, r3
 80006d0:	b007      	add	sp, #28
 80006d2:	bcf0      	pop	{r4, r5, r6, r7}
 80006d4:	46bb      	mov	fp, r7
 80006d6:	46b2      	mov	sl, r6
 80006d8:	46a9      	mov	r9, r5
 80006da:	46a0      	mov	r8, r4
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	2200      	movs	r2, #0
 80006e0:	2400      	movs	r4, #0
 80006e2:	4690      	mov	r8, r2
 80006e4:	4b48      	ldr	r3, [pc, #288]	@ (8000808 <__aeabi_ddiv+0x21c>)
 80006e6:	e7ed      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 80006e8:	465a      	mov	r2, fp
 80006ea:	9b00      	ldr	r3, [sp, #0]
 80006ec:	431a      	orrs	r2, r3
 80006ee:	4b49      	ldr	r3, [pc, #292]	@ (8000814 <__aeabi_ddiv+0x228>)
 80006f0:	469c      	mov	ip, r3
 80006f2:	44e2      	add	sl, ip
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d159      	bne.n	80007ac <__aeabi_ddiv+0x1c0>
 80006f8:	2302      	movs	r3, #2
 80006fa:	431c      	orrs	r4, r3
 80006fc:	2300      	movs	r3, #0
 80006fe:	2102      	movs	r1, #2
 8000700:	469b      	mov	fp, r3
 8000702:	e7b8      	b.n	8000676 <__aeabi_ddiv+0x8a>
 8000704:	465a      	mov	r2, fp
 8000706:	9b00      	ldr	r3, [sp, #0]
 8000708:	431a      	orrs	r2, r3
 800070a:	d049      	beq.n	80007a0 <__aeabi_ddiv+0x1b4>
 800070c:	465b      	mov	r3, fp
 800070e:	2b00      	cmp	r3, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_ddiv+0x128>
 8000712:	e19c      	b.n	8000a4e <__aeabi_ddiv+0x462>
 8000714:	4658      	mov	r0, fp
 8000716:	f000 faeb 	bl	8000cf0 <__clzsi2>
 800071a:	0002      	movs	r2, r0
 800071c:	0003      	movs	r3, r0
 800071e:	3a0b      	subs	r2, #11
 8000720:	271d      	movs	r7, #29
 8000722:	9e00      	ldr	r6, [sp, #0]
 8000724:	1aba      	subs	r2, r7, r2
 8000726:	0019      	movs	r1, r3
 8000728:	4658      	mov	r0, fp
 800072a:	40d6      	lsrs	r6, r2
 800072c:	3908      	subs	r1, #8
 800072e:	4088      	lsls	r0, r1
 8000730:	0032      	movs	r2, r6
 8000732:	4302      	orrs	r2, r0
 8000734:	4693      	mov	fp, r2
 8000736:	9a00      	ldr	r2, [sp, #0]
 8000738:	408a      	lsls	r2, r1
 800073a:	4937      	ldr	r1, [pc, #220]	@ (8000818 <__aeabi_ddiv+0x22c>)
 800073c:	4453      	add	r3, sl
 800073e:	468a      	mov	sl, r1
 8000740:	2100      	movs	r1, #0
 8000742:	449a      	add	sl, r3
 8000744:	e797      	b.n	8000676 <__aeabi_ddiv+0x8a>
 8000746:	465b      	mov	r3, fp
 8000748:	4303      	orrs	r3, r0
 800074a:	4699      	mov	r9, r3
 800074c:	d021      	beq.n	8000792 <__aeabi_ddiv+0x1a6>
 800074e:	465b      	mov	r3, fp
 8000750:	2b00      	cmp	r3, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_ddiv+0x16a>
 8000754:	e169      	b.n	8000a2a <__aeabi_ddiv+0x43e>
 8000756:	4658      	mov	r0, fp
 8000758:	f000 faca 	bl	8000cf0 <__clzsi2>
 800075c:	230b      	movs	r3, #11
 800075e:	425b      	negs	r3, r3
 8000760:	469c      	mov	ip, r3
 8000762:	0002      	movs	r2, r0
 8000764:	4484      	add	ip, r0
 8000766:	4666      	mov	r6, ip
 8000768:	231d      	movs	r3, #29
 800076a:	1b9b      	subs	r3, r3, r6
 800076c:	0026      	movs	r6, r4
 800076e:	0011      	movs	r1, r2
 8000770:	4658      	mov	r0, fp
 8000772:	40de      	lsrs	r6, r3
 8000774:	3908      	subs	r1, #8
 8000776:	4088      	lsls	r0, r1
 8000778:	0033      	movs	r3, r6
 800077a:	4303      	orrs	r3, r0
 800077c:	4699      	mov	r9, r3
 800077e:	0023      	movs	r3, r4
 8000780:	408b      	lsls	r3, r1
 8000782:	4698      	mov	r8, r3
 8000784:	4b25      	ldr	r3, [pc, #148]	@ (800081c <__aeabi_ddiv+0x230>)
 8000786:	2400      	movs	r4, #0
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	469a      	mov	sl, r3
 800078c:	2300      	movs	r3, #0
 800078e:	9303      	str	r3, [sp, #12]
 8000790:	e753      	b.n	800063a <__aeabi_ddiv+0x4e>
 8000792:	2300      	movs	r3, #0
 8000794:	4698      	mov	r8, r3
 8000796:	469a      	mov	sl, r3
 8000798:	3301      	adds	r3, #1
 800079a:	2404      	movs	r4, #4
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	e74c      	b.n	800063a <__aeabi_ddiv+0x4e>
 80007a0:	2301      	movs	r3, #1
 80007a2:	431c      	orrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	2101      	movs	r1, #1
 80007a8:	469b      	mov	fp, r3
 80007aa:	e764      	b.n	8000676 <__aeabi_ddiv+0x8a>
 80007ac:	2303      	movs	r3, #3
 80007ae:	0032      	movs	r2, r6
 80007b0:	2103      	movs	r1, #3
 80007b2:	431c      	orrs	r4, r3
 80007b4:	e75f      	b.n	8000676 <__aeabi_ddiv+0x8a>
 80007b6:	469a      	mov	sl, r3
 80007b8:	2303      	movs	r3, #3
 80007ba:	46d9      	mov	r9, fp
 80007bc:	240c      	movs	r4, #12
 80007be:	9303      	str	r3, [sp, #12]
 80007c0:	e73b      	b.n	800063a <__aeabi_ddiv+0x4e>
 80007c2:	2300      	movs	r3, #0
 80007c4:	2480      	movs	r4, #128	@ 0x80
 80007c6:	4698      	mov	r8, r3
 80007c8:	2600      	movs	r6, #0
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <__aeabi_ddiv+0x21c>)
 80007cc:	0324      	lsls	r4, r4, #12
 80007ce:	e779      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 80007d0:	2480      	movs	r4, #128	@ 0x80
 80007d2:	465b      	mov	r3, fp
 80007d4:	0324      	lsls	r4, r4, #12
 80007d6:	431c      	orrs	r4, r3
 80007d8:	0324      	lsls	r4, r4, #12
 80007da:	002e      	movs	r6, r5
 80007dc:	4690      	mov	r8, r2
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <__aeabi_ddiv+0x21c>)
 80007e0:	0b24      	lsrs	r4, r4, #12
 80007e2:	e76f      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 80007e4:	2480      	movs	r4, #128	@ 0x80
 80007e6:	464b      	mov	r3, r9
 80007e8:	0324      	lsls	r4, r4, #12
 80007ea:	4223      	tst	r3, r4
 80007ec:	d002      	beq.n	80007f4 <__aeabi_ddiv+0x208>
 80007ee:	465b      	mov	r3, fp
 80007f0:	4223      	tst	r3, r4
 80007f2:	d0f0      	beq.n	80007d6 <__aeabi_ddiv+0x1ea>
 80007f4:	2480      	movs	r4, #128	@ 0x80
 80007f6:	464b      	mov	r3, r9
 80007f8:	0324      	lsls	r4, r4, #12
 80007fa:	431c      	orrs	r4, r3
 80007fc:	0324      	lsls	r4, r4, #12
 80007fe:	9e02      	ldr	r6, [sp, #8]
 8000800:	4b01      	ldr	r3, [pc, #4]	@ (8000808 <__aeabi_ddiv+0x21c>)
 8000802:	0b24      	lsrs	r4, r4, #12
 8000804:	e75e      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	000007ff 	.word	0x000007ff
 800080c:	fffffc01 	.word	0xfffffc01
 8000810:	080056d0 	.word	0x080056d0
 8000814:	fffff801 	.word	0xfffff801
 8000818:	000003f3 	.word	0x000003f3
 800081c:	fffffc0d 	.word	0xfffffc0d
 8000820:	45cb      	cmp	fp, r9
 8000822:	d200      	bcs.n	8000826 <__aeabi_ddiv+0x23a>
 8000824:	e0f8      	b.n	8000a18 <__aeabi_ddiv+0x42c>
 8000826:	d100      	bne.n	800082a <__aeabi_ddiv+0x23e>
 8000828:	e0f3      	b.n	8000a12 <__aeabi_ddiv+0x426>
 800082a:	2301      	movs	r3, #1
 800082c:	425b      	negs	r3, r3
 800082e:	469c      	mov	ip, r3
 8000830:	4644      	mov	r4, r8
 8000832:	4648      	mov	r0, r9
 8000834:	2500      	movs	r5, #0
 8000836:	44e2      	add	sl, ip
 8000838:	465b      	mov	r3, fp
 800083a:	0e17      	lsrs	r7, r2, #24
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	431f      	orrs	r7, r3
 8000840:	0c19      	lsrs	r1, r3, #16
 8000842:	043b      	lsls	r3, r7, #16
 8000844:	0212      	lsls	r2, r2, #8
 8000846:	9700      	str	r7, [sp, #0]
 8000848:	0c1f      	lsrs	r7, r3, #16
 800084a:	4691      	mov	r9, r2
 800084c:	9102      	str	r1, [sp, #8]
 800084e:	9703      	str	r7, [sp, #12]
 8000850:	f7ff fcf0 	bl	8000234 <__aeabi_uidivmod>
 8000854:	0002      	movs	r2, r0
 8000856:	437a      	muls	r2, r7
 8000858:	040b      	lsls	r3, r1, #16
 800085a:	0c21      	lsrs	r1, r4, #16
 800085c:	4680      	mov	r8, r0
 800085e:	4319      	orrs	r1, r3
 8000860:	428a      	cmp	r2, r1
 8000862:	d909      	bls.n	8000878 <__aeabi_ddiv+0x28c>
 8000864:	9f00      	ldr	r7, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	46bc      	mov	ip, r7
 800086a:	425b      	negs	r3, r3
 800086c:	4461      	add	r1, ip
 800086e:	469c      	mov	ip, r3
 8000870:	44e0      	add	r8, ip
 8000872:	428f      	cmp	r7, r1
 8000874:	d800      	bhi.n	8000878 <__aeabi_ddiv+0x28c>
 8000876:	e15c      	b.n	8000b32 <__aeabi_ddiv+0x546>
 8000878:	1a88      	subs	r0, r1, r2
 800087a:	9902      	ldr	r1, [sp, #8]
 800087c:	f7ff fcda 	bl	8000234 <__aeabi_uidivmod>
 8000880:	9a03      	ldr	r2, [sp, #12]
 8000882:	0424      	lsls	r4, r4, #16
 8000884:	4342      	muls	r2, r0
 8000886:	0409      	lsls	r1, r1, #16
 8000888:	0c24      	lsrs	r4, r4, #16
 800088a:	0003      	movs	r3, r0
 800088c:	430c      	orrs	r4, r1
 800088e:	42a2      	cmp	r2, r4
 8000890:	d906      	bls.n	80008a0 <__aeabi_ddiv+0x2b4>
 8000892:	9900      	ldr	r1, [sp, #0]
 8000894:	3b01      	subs	r3, #1
 8000896:	468c      	mov	ip, r1
 8000898:	4464      	add	r4, ip
 800089a:	42a1      	cmp	r1, r4
 800089c:	d800      	bhi.n	80008a0 <__aeabi_ddiv+0x2b4>
 800089e:	e142      	b.n	8000b26 <__aeabi_ddiv+0x53a>
 80008a0:	1aa0      	subs	r0, r4, r2
 80008a2:	4642      	mov	r2, r8
 80008a4:	0412      	lsls	r2, r2, #16
 80008a6:	431a      	orrs	r2, r3
 80008a8:	4693      	mov	fp, r2
 80008aa:	464b      	mov	r3, r9
 80008ac:	4659      	mov	r1, fp
 80008ae:	0c1b      	lsrs	r3, r3, #16
 80008b0:	001f      	movs	r7, r3
 80008b2:	9304      	str	r3, [sp, #16]
 80008b4:	040b      	lsls	r3, r1, #16
 80008b6:	4649      	mov	r1, r9
 80008b8:	0409      	lsls	r1, r1, #16
 80008ba:	0c09      	lsrs	r1, r1, #16
 80008bc:	000c      	movs	r4, r1
 80008be:	0c1b      	lsrs	r3, r3, #16
 80008c0:	435c      	muls	r4, r3
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	437b      	muls	r3, r7
 80008c6:	4688      	mov	r8, r1
 80008c8:	4351      	muls	r1, r2
 80008ca:	437a      	muls	r2, r7
 80008cc:	0c27      	lsrs	r7, r4, #16
 80008ce:	46bc      	mov	ip, r7
 80008d0:	185b      	adds	r3, r3, r1
 80008d2:	4463      	add	r3, ip
 80008d4:	4299      	cmp	r1, r3
 80008d6:	d903      	bls.n	80008e0 <__aeabi_ddiv+0x2f4>
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	0249      	lsls	r1, r1, #9
 80008dc:	468c      	mov	ip, r1
 80008de:	4462      	add	r2, ip
 80008e0:	0c19      	lsrs	r1, r3, #16
 80008e2:	0424      	lsls	r4, r4, #16
 80008e4:	041b      	lsls	r3, r3, #16
 80008e6:	0c24      	lsrs	r4, r4, #16
 80008e8:	188a      	adds	r2, r1, r2
 80008ea:	191c      	adds	r4, r3, r4
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d302      	bcc.n	80008f6 <__aeabi_ddiv+0x30a>
 80008f0:	d116      	bne.n	8000920 <__aeabi_ddiv+0x334>
 80008f2:	42a5      	cmp	r5, r4
 80008f4:	d214      	bcs.n	8000920 <__aeabi_ddiv+0x334>
 80008f6:	465b      	mov	r3, fp
 80008f8:	9f00      	ldr	r7, [sp, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	444d      	add	r5, r9
 80008fe:	9305      	str	r3, [sp, #20]
 8000900:	454d      	cmp	r5, r9
 8000902:	419b      	sbcs	r3, r3
 8000904:	46bc      	mov	ip, r7
 8000906:	425b      	negs	r3, r3
 8000908:	4463      	add	r3, ip
 800090a:	18c0      	adds	r0, r0, r3
 800090c:	4287      	cmp	r7, r0
 800090e:	d300      	bcc.n	8000912 <__aeabi_ddiv+0x326>
 8000910:	e102      	b.n	8000b18 <__aeabi_ddiv+0x52c>
 8000912:	4282      	cmp	r2, r0
 8000914:	d900      	bls.n	8000918 <__aeabi_ddiv+0x32c>
 8000916:	e129      	b.n	8000b6c <__aeabi_ddiv+0x580>
 8000918:	d100      	bne.n	800091c <__aeabi_ddiv+0x330>
 800091a:	e124      	b.n	8000b66 <__aeabi_ddiv+0x57a>
 800091c:	9b05      	ldr	r3, [sp, #20]
 800091e:	469b      	mov	fp, r3
 8000920:	1b2c      	subs	r4, r5, r4
 8000922:	42a5      	cmp	r5, r4
 8000924:	41ad      	sbcs	r5, r5
 8000926:	9b00      	ldr	r3, [sp, #0]
 8000928:	1a80      	subs	r0, r0, r2
 800092a:	426d      	negs	r5, r5
 800092c:	1b40      	subs	r0, r0, r5
 800092e:	4283      	cmp	r3, r0
 8000930:	d100      	bne.n	8000934 <__aeabi_ddiv+0x348>
 8000932:	e10f      	b.n	8000b54 <__aeabi_ddiv+0x568>
 8000934:	9902      	ldr	r1, [sp, #8]
 8000936:	f7ff fc7d 	bl	8000234 <__aeabi_uidivmod>
 800093a:	9a03      	ldr	r2, [sp, #12]
 800093c:	040b      	lsls	r3, r1, #16
 800093e:	4342      	muls	r2, r0
 8000940:	0c21      	lsrs	r1, r4, #16
 8000942:	0005      	movs	r5, r0
 8000944:	4319      	orrs	r1, r3
 8000946:	428a      	cmp	r2, r1
 8000948:	d900      	bls.n	800094c <__aeabi_ddiv+0x360>
 800094a:	e0cb      	b.n	8000ae4 <__aeabi_ddiv+0x4f8>
 800094c:	1a88      	subs	r0, r1, r2
 800094e:	9902      	ldr	r1, [sp, #8]
 8000950:	f7ff fc70 	bl	8000234 <__aeabi_uidivmod>
 8000954:	9a03      	ldr	r2, [sp, #12]
 8000956:	0424      	lsls	r4, r4, #16
 8000958:	4342      	muls	r2, r0
 800095a:	0409      	lsls	r1, r1, #16
 800095c:	0c24      	lsrs	r4, r4, #16
 800095e:	0003      	movs	r3, r0
 8000960:	430c      	orrs	r4, r1
 8000962:	42a2      	cmp	r2, r4
 8000964:	d900      	bls.n	8000968 <__aeabi_ddiv+0x37c>
 8000966:	e0ca      	b.n	8000afe <__aeabi_ddiv+0x512>
 8000968:	4641      	mov	r1, r8
 800096a:	1aa4      	subs	r4, r4, r2
 800096c:	042a      	lsls	r2, r5, #16
 800096e:	431a      	orrs	r2, r3
 8000970:	9f04      	ldr	r7, [sp, #16]
 8000972:	0413      	lsls	r3, r2, #16
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	4359      	muls	r1, r3
 8000978:	4640      	mov	r0, r8
 800097a:	437b      	muls	r3, r7
 800097c:	469c      	mov	ip, r3
 800097e:	0c15      	lsrs	r5, r2, #16
 8000980:	4368      	muls	r0, r5
 8000982:	0c0b      	lsrs	r3, r1, #16
 8000984:	4484      	add	ip, r0
 8000986:	4463      	add	r3, ip
 8000988:	437d      	muls	r5, r7
 800098a:	4298      	cmp	r0, r3
 800098c:	d903      	bls.n	8000996 <__aeabi_ddiv+0x3aa>
 800098e:	2080      	movs	r0, #128	@ 0x80
 8000990:	0240      	lsls	r0, r0, #9
 8000992:	4684      	mov	ip, r0
 8000994:	4465      	add	r5, ip
 8000996:	0c18      	lsrs	r0, r3, #16
 8000998:	0409      	lsls	r1, r1, #16
 800099a:	041b      	lsls	r3, r3, #16
 800099c:	0c09      	lsrs	r1, r1, #16
 800099e:	1940      	adds	r0, r0, r5
 80009a0:	185b      	adds	r3, r3, r1
 80009a2:	4284      	cmp	r4, r0
 80009a4:	d327      	bcc.n	80009f6 <__aeabi_ddiv+0x40a>
 80009a6:	d023      	beq.n	80009f0 <__aeabi_ddiv+0x404>
 80009a8:	2301      	movs	r3, #1
 80009aa:	0035      	movs	r5, r6
 80009ac:	431a      	orrs	r2, r3
 80009ae:	4b94      	ldr	r3, [pc, #592]	@ (8000c00 <__aeabi_ddiv+0x614>)
 80009b0:	4453      	add	r3, sl
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dd60      	ble.n	8000a78 <__aeabi_ddiv+0x48c>
 80009b6:	0751      	lsls	r1, r2, #29
 80009b8:	d000      	beq.n	80009bc <__aeabi_ddiv+0x3d0>
 80009ba:	e086      	b.n	8000aca <__aeabi_ddiv+0x4de>
 80009bc:	002e      	movs	r6, r5
 80009be:	08d1      	lsrs	r1, r2, #3
 80009c0:	465a      	mov	r2, fp
 80009c2:	01d2      	lsls	r2, r2, #7
 80009c4:	d506      	bpl.n	80009d4 <__aeabi_ddiv+0x3e8>
 80009c6:	465a      	mov	r2, fp
 80009c8:	4b8e      	ldr	r3, [pc, #568]	@ (8000c04 <__aeabi_ddiv+0x618>)
 80009ca:	401a      	ands	r2, r3
 80009cc:	2380      	movs	r3, #128	@ 0x80
 80009ce:	4693      	mov	fp, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	4453      	add	r3, sl
 80009d4:	4a8c      	ldr	r2, [pc, #560]	@ (8000c08 <__aeabi_ddiv+0x61c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	dd00      	ble.n	80009dc <__aeabi_ddiv+0x3f0>
 80009da:	e680      	b.n	80006de <__aeabi_ddiv+0xf2>
 80009dc:	465a      	mov	r2, fp
 80009de:	0752      	lsls	r2, r2, #29
 80009e0:	430a      	orrs	r2, r1
 80009e2:	4690      	mov	r8, r2
 80009e4:	465a      	mov	r2, fp
 80009e6:	055b      	lsls	r3, r3, #21
 80009e8:	0254      	lsls	r4, r2, #9
 80009ea:	0b24      	lsrs	r4, r4, #12
 80009ec:	0d5b      	lsrs	r3, r3, #21
 80009ee:	e669      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 80009f0:	0035      	movs	r5, r6
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0db      	beq.n	80009ae <__aeabi_ddiv+0x3c2>
 80009f6:	9d00      	ldr	r5, [sp, #0]
 80009f8:	1e51      	subs	r1, r2, #1
 80009fa:	46ac      	mov	ip, r5
 80009fc:	4464      	add	r4, ip
 80009fe:	42ac      	cmp	r4, r5
 8000a00:	d200      	bcs.n	8000a04 <__aeabi_ddiv+0x418>
 8000a02:	e09e      	b.n	8000b42 <__aeabi_ddiv+0x556>
 8000a04:	4284      	cmp	r4, r0
 8000a06:	d200      	bcs.n	8000a0a <__aeabi_ddiv+0x41e>
 8000a08:	e0e1      	b.n	8000bce <__aeabi_ddiv+0x5e2>
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_ddiv+0x422>
 8000a0c:	e0ee      	b.n	8000bec <__aeabi_ddiv+0x600>
 8000a0e:	000a      	movs	r2, r1
 8000a10:	e7ca      	b.n	80009a8 <__aeabi_ddiv+0x3bc>
 8000a12:	4542      	cmp	r2, r8
 8000a14:	d900      	bls.n	8000a18 <__aeabi_ddiv+0x42c>
 8000a16:	e708      	b.n	800082a <__aeabi_ddiv+0x23e>
 8000a18:	464b      	mov	r3, r9
 8000a1a:	07dc      	lsls	r4, r3, #31
 8000a1c:	0858      	lsrs	r0, r3, #1
 8000a1e:	4643      	mov	r3, r8
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	431c      	orrs	r4, r3
 8000a24:	4643      	mov	r3, r8
 8000a26:	07dd      	lsls	r5, r3, #31
 8000a28:	e706      	b.n	8000838 <__aeabi_ddiv+0x24c>
 8000a2a:	f000 f961 	bl	8000cf0 <__clzsi2>
 8000a2e:	2315      	movs	r3, #21
 8000a30:	469c      	mov	ip, r3
 8000a32:	4484      	add	ip, r0
 8000a34:	0002      	movs	r2, r0
 8000a36:	4663      	mov	r3, ip
 8000a38:	3220      	adds	r2, #32
 8000a3a:	2b1c      	cmp	r3, #28
 8000a3c:	dc00      	bgt.n	8000a40 <__aeabi_ddiv+0x454>
 8000a3e:	e692      	b.n	8000766 <__aeabi_ddiv+0x17a>
 8000a40:	0023      	movs	r3, r4
 8000a42:	3808      	subs	r0, #8
 8000a44:	4083      	lsls	r3, r0
 8000a46:	4699      	mov	r9, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	4698      	mov	r8, r3
 8000a4c:	e69a      	b.n	8000784 <__aeabi_ddiv+0x198>
 8000a4e:	f000 f94f 	bl	8000cf0 <__clzsi2>
 8000a52:	0002      	movs	r2, r0
 8000a54:	0003      	movs	r3, r0
 8000a56:	3215      	adds	r2, #21
 8000a58:	3320      	adds	r3, #32
 8000a5a:	2a1c      	cmp	r2, #28
 8000a5c:	dc00      	bgt.n	8000a60 <__aeabi_ddiv+0x474>
 8000a5e:	e65f      	b.n	8000720 <__aeabi_ddiv+0x134>
 8000a60:	9900      	ldr	r1, [sp, #0]
 8000a62:	3808      	subs	r0, #8
 8000a64:	4081      	lsls	r1, r0
 8000a66:	2200      	movs	r2, #0
 8000a68:	468b      	mov	fp, r1
 8000a6a:	e666      	b.n	800073a <__aeabi_ddiv+0x14e>
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	002e      	movs	r6, r5
 8000a70:	2400      	movs	r4, #0
 8000a72:	4690      	mov	r8, r2
 8000a74:	4b65      	ldr	r3, [pc, #404]	@ (8000c0c <__aeabi_ddiv+0x620>)
 8000a76:	e625      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 8000a78:	002e      	movs	r6, r5
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	1ac9      	subs	r1, r1, r3
 8000a7e:	2938      	cmp	r1, #56	@ 0x38
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_ddiv+0x498>
 8000a82:	e61b      	b.n	80006bc <__aeabi_ddiv+0xd0>
 8000a84:	291f      	cmp	r1, #31
 8000a86:	dc7e      	bgt.n	8000b86 <__aeabi_ddiv+0x59a>
 8000a88:	4861      	ldr	r0, [pc, #388]	@ (8000c10 <__aeabi_ddiv+0x624>)
 8000a8a:	0014      	movs	r4, r2
 8000a8c:	4450      	add	r0, sl
 8000a8e:	465b      	mov	r3, fp
 8000a90:	4082      	lsls	r2, r0
 8000a92:	4083      	lsls	r3, r0
 8000a94:	40cc      	lsrs	r4, r1
 8000a96:	1e50      	subs	r0, r2, #1
 8000a98:	4182      	sbcs	r2, r0
 8000a9a:	4323      	orrs	r3, r4
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	465b      	mov	r3, fp
 8000aa0:	40cb      	lsrs	r3, r1
 8000aa2:	0751      	lsls	r1, r2, #29
 8000aa4:	d009      	beq.n	8000aba <__aeabi_ddiv+0x4ce>
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	4011      	ands	r1, r2
 8000aaa:	2904      	cmp	r1, #4
 8000aac:	d005      	beq.n	8000aba <__aeabi_ddiv+0x4ce>
 8000aae:	1d11      	adds	r1, r2, #4
 8000ab0:	4291      	cmp	r1, r2
 8000ab2:	4192      	sbcs	r2, r2
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	000a      	movs	r2, r1
 8000aba:	0219      	lsls	r1, r3, #8
 8000abc:	d400      	bmi.n	8000ac0 <__aeabi_ddiv+0x4d4>
 8000abe:	e09b      	b.n	8000bf8 <__aeabi_ddiv+0x60c>
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	e5fc      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 8000aca:	210f      	movs	r1, #15
 8000acc:	4011      	ands	r1, r2
 8000ace:	2904      	cmp	r1, #4
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_ddiv+0x4e8>
 8000ad2:	e773      	b.n	80009bc <__aeabi_ddiv+0x3d0>
 8000ad4:	1d11      	adds	r1, r2, #4
 8000ad6:	4291      	cmp	r1, r2
 8000ad8:	4192      	sbcs	r2, r2
 8000ada:	4252      	negs	r2, r2
 8000adc:	002e      	movs	r6, r5
 8000ade:	08c9      	lsrs	r1, r1, #3
 8000ae0:	4493      	add	fp, r2
 8000ae2:	e76d      	b.n	80009c0 <__aeabi_ddiv+0x3d4>
 8000ae4:	9b00      	ldr	r3, [sp, #0]
 8000ae6:	3d01      	subs	r5, #1
 8000ae8:	469c      	mov	ip, r3
 8000aea:	4461      	add	r1, ip
 8000aec:	428b      	cmp	r3, r1
 8000aee:	d900      	bls.n	8000af2 <__aeabi_ddiv+0x506>
 8000af0:	e72c      	b.n	800094c <__aeabi_ddiv+0x360>
 8000af2:	428a      	cmp	r2, r1
 8000af4:	d800      	bhi.n	8000af8 <__aeabi_ddiv+0x50c>
 8000af6:	e729      	b.n	800094c <__aeabi_ddiv+0x360>
 8000af8:	1e85      	subs	r5, r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	e726      	b.n	800094c <__aeabi_ddiv+0x360>
 8000afe:	9900      	ldr	r1, [sp, #0]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	468c      	mov	ip, r1
 8000b04:	4464      	add	r4, ip
 8000b06:	42a1      	cmp	r1, r4
 8000b08:	d900      	bls.n	8000b0c <__aeabi_ddiv+0x520>
 8000b0a:	e72d      	b.n	8000968 <__aeabi_ddiv+0x37c>
 8000b0c:	42a2      	cmp	r2, r4
 8000b0e:	d800      	bhi.n	8000b12 <__aeabi_ddiv+0x526>
 8000b10:	e72a      	b.n	8000968 <__aeabi_ddiv+0x37c>
 8000b12:	1e83      	subs	r3, r0, #2
 8000b14:	4464      	add	r4, ip
 8000b16:	e727      	b.n	8000968 <__aeabi_ddiv+0x37c>
 8000b18:	4287      	cmp	r7, r0
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_ddiv+0x532>
 8000b1c:	e6fe      	b.n	800091c <__aeabi_ddiv+0x330>
 8000b1e:	45a9      	cmp	r9, r5
 8000b20:	d900      	bls.n	8000b24 <__aeabi_ddiv+0x538>
 8000b22:	e6fb      	b.n	800091c <__aeabi_ddiv+0x330>
 8000b24:	e6f5      	b.n	8000912 <__aeabi_ddiv+0x326>
 8000b26:	42a2      	cmp	r2, r4
 8000b28:	d800      	bhi.n	8000b2c <__aeabi_ddiv+0x540>
 8000b2a:	e6b9      	b.n	80008a0 <__aeabi_ddiv+0x2b4>
 8000b2c:	1e83      	subs	r3, r0, #2
 8000b2e:	4464      	add	r4, ip
 8000b30:	e6b6      	b.n	80008a0 <__aeabi_ddiv+0x2b4>
 8000b32:	428a      	cmp	r2, r1
 8000b34:	d800      	bhi.n	8000b38 <__aeabi_ddiv+0x54c>
 8000b36:	e69f      	b.n	8000878 <__aeabi_ddiv+0x28c>
 8000b38:	46bc      	mov	ip, r7
 8000b3a:	1e83      	subs	r3, r0, #2
 8000b3c:	4698      	mov	r8, r3
 8000b3e:	4461      	add	r1, ip
 8000b40:	e69a      	b.n	8000878 <__aeabi_ddiv+0x28c>
 8000b42:	000a      	movs	r2, r1
 8000b44:	4284      	cmp	r4, r0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_ddiv+0x55e>
 8000b48:	e72e      	b.n	80009a8 <__aeabi_ddiv+0x3bc>
 8000b4a:	454b      	cmp	r3, r9
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_ddiv+0x564>
 8000b4e:	e72b      	b.n	80009a8 <__aeabi_ddiv+0x3bc>
 8000b50:	0035      	movs	r5, r6
 8000b52:	e72c      	b.n	80009ae <__aeabi_ddiv+0x3c2>
 8000b54:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <__aeabi_ddiv+0x614>)
 8000b56:	4a2f      	ldr	r2, [pc, #188]	@ (8000c14 <__aeabi_ddiv+0x628>)
 8000b58:	4453      	add	r3, sl
 8000b5a:	4592      	cmp	sl, r2
 8000b5c:	db43      	blt.n	8000be6 <__aeabi_ddiv+0x5fa>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2100      	movs	r1, #0
 8000b62:	4493      	add	fp, r2
 8000b64:	e72c      	b.n	80009c0 <__aeabi_ddiv+0x3d4>
 8000b66:	42ac      	cmp	r4, r5
 8000b68:	d800      	bhi.n	8000b6c <__aeabi_ddiv+0x580>
 8000b6a:	e6d7      	b.n	800091c <__aeabi_ddiv+0x330>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	425b      	negs	r3, r3
 8000b70:	469c      	mov	ip, r3
 8000b72:	9900      	ldr	r1, [sp, #0]
 8000b74:	444d      	add	r5, r9
 8000b76:	454d      	cmp	r5, r9
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	44e3      	add	fp, ip
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	4463      	add	r3, ip
 8000b82:	18c0      	adds	r0, r0, r3
 8000b84:	e6cc      	b.n	8000920 <__aeabi_ddiv+0x334>
 8000b86:	201f      	movs	r0, #31
 8000b88:	4240      	negs	r0, r0
 8000b8a:	1ac3      	subs	r3, r0, r3
 8000b8c:	4658      	mov	r0, fp
 8000b8e:	40d8      	lsrs	r0, r3
 8000b90:	2920      	cmp	r1, #32
 8000b92:	d004      	beq.n	8000b9e <__aeabi_ddiv+0x5b2>
 8000b94:	4659      	mov	r1, fp
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <__aeabi_ddiv+0x62c>)
 8000b98:	4453      	add	r3, sl
 8000b9a:	4099      	lsls	r1, r3
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	1e53      	subs	r3, r2, #1
 8000ba0:	419a      	sbcs	r2, r3
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	4302      	orrs	r2, r0
 8000ba8:	2400      	movs	r4, #0
 8000baa:	4011      	ands	r1, r2
 8000bac:	4213      	tst	r3, r2
 8000bae:	d009      	beq.n	8000bc4 <__aeabi_ddiv+0x5d8>
 8000bb0:	3308      	adds	r3, #8
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d01d      	beq.n	8000bf4 <__aeabi_ddiv+0x608>
 8000bb8:	1d13      	adds	r3, r2, #4
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	4189      	sbcs	r1, r1
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	4249      	negs	r1, r1
 8000bc2:	0749      	lsls	r1, r1, #29
 8000bc4:	08d2      	lsrs	r2, r2, #3
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	4690      	mov	r8, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e57a      	b.n	80006c4 <__aeabi_ddiv+0xd8>
 8000bce:	4649      	mov	r1, r9
 8000bd0:	9f00      	ldr	r7, [sp, #0]
 8000bd2:	004d      	lsls	r5, r1, #1
 8000bd4:	454d      	cmp	r5, r9
 8000bd6:	4189      	sbcs	r1, r1
 8000bd8:	46bc      	mov	ip, r7
 8000bda:	4249      	negs	r1, r1
 8000bdc:	4461      	add	r1, ip
 8000bde:	46a9      	mov	r9, r5
 8000be0:	3a02      	subs	r2, #2
 8000be2:	1864      	adds	r4, r4, r1
 8000be4:	e7ae      	b.n	8000b44 <__aeabi_ddiv+0x558>
 8000be6:	2201      	movs	r2, #1
 8000be8:	4252      	negs	r2, r2
 8000bea:	e746      	b.n	8000a7a <__aeabi_ddiv+0x48e>
 8000bec:	4599      	cmp	r9, r3
 8000bee:	d3ee      	bcc.n	8000bce <__aeabi_ddiv+0x5e2>
 8000bf0:	000a      	movs	r2, r1
 8000bf2:	e7aa      	b.n	8000b4a <__aeabi_ddiv+0x55e>
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e7e5      	b.n	8000bc4 <__aeabi_ddiv+0x5d8>
 8000bf8:	0759      	lsls	r1, r3, #29
 8000bfa:	025b      	lsls	r3, r3, #9
 8000bfc:	0b1c      	lsrs	r4, r3, #12
 8000bfe:	e7e1      	b.n	8000bc4 <__aeabi_ddiv+0x5d8>
 8000c00:	000003ff 	.word	0x000003ff
 8000c04:	feffffff 	.word	0xfeffffff
 8000c08:	000007fe 	.word	0x000007fe
 8000c0c:	000007ff 	.word	0x000007ff
 8000c10:	0000041e 	.word	0x0000041e
 8000c14:	fffffc02 	.word	0xfffffc02
 8000c18:	0000043e 	.word	0x0000043e

08000c1c <__aeabi_d2iz>:
 8000c1c:	000b      	movs	r3, r1
 8000c1e:	0002      	movs	r2, r0
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4d16      	ldr	r5, [pc, #88]	@ (8000c7c <__aeabi_d2iz+0x60>)
 8000c24:	030c      	lsls	r4, r1, #12
 8000c26:	b082      	sub	sp, #8
 8000c28:	0049      	lsls	r1, r1, #1
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	9200      	str	r2, [sp, #0]
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	0b24      	lsrs	r4, r4, #12
 8000c32:	0d49      	lsrs	r1, r1, #21
 8000c34:	0fde      	lsrs	r6, r3, #31
 8000c36:	42a9      	cmp	r1, r5
 8000c38:	dd04      	ble.n	8000c44 <__aeabi_d2iz+0x28>
 8000c3a:	4811      	ldr	r0, [pc, #68]	@ (8000c80 <__aeabi_d2iz+0x64>)
 8000c3c:	4281      	cmp	r1, r0
 8000c3e:	dd03      	ble.n	8000c48 <__aeabi_d2iz+0x2c>
 8000c40:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <__aeabi_d2iz+0x68>)
 8000c42:	18f0      	adds	r0, r6, r3
 8000c44:	b002      	add	sp, #8
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	2080      	movs	r0, #128	@ 0x80
 8000c4a:	0340      	lsls	r0, r0, #13
 8000c4c:	4320      	orrs	r0, r4
 8000c4e:	4c0e      	ldr	r4, [pc, #56]	@ (8000c88 <__aeabi_d2iz+0x6c>)
 8000c50:	1a64      	subs	r4, r4, r1
 8000c52:	2c1f      	cmp	r4, #31
 8000c54:	dd08      	ble.n	8000c68 <__aeabi_d2iz+0x4c>
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <__aeabi_d2iz+0x70>)
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	4258      	negs	r0, r3
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d1ef      	bne.n	8000c44 <__aeabi_d2iz+0x28>
 8000c64:	0018      	movs	r0, r3
 8000c66:	e7ed      	b.n	8000c44 <__aeabi_d2iz+0x28>
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <__aeabi_d2iz+0x74>)
 8000c6a:	9a00      	ldr	r2, [sp, #0]
 8000c6c:	469c      	mov	ip, r3
 8000c6e:	0003      	movs	r3, r0
 8000c70:	4461      	add	r1, ip
 8000c72:	408b      	lsls	r3, r1
 8000c74:	40e2      	lsrs	r2, r4
 8000c76:	4313      	orrs	r3, r2
 8000c78:	e7f1      	b.n	8000c5e <__aeabi_d2iz+0x42>
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	000003fe 	.word	0x000003fe
 8000c80:	0000041d 	.word	0x0000041d
 8000c84:	7fffffff 	.word	0x7fffffff
 8000c88:	00000433 	.word	0x00000433
 8000c8c:	00000413 	.word	0x00000413
 8000c90:	fffffbed 	.word	0xfffffbed

08000c94 <__aeabi_i2d>:
 8000c94:	b570      	push	{r4, r5, r6, lr}
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d016      	beq.n	8000cc8 <__aeabi_i2d+0x34>
 8000c9a:	17c3      	asrs	r3, r0, #31
 8000c9c:	18c5      	adds	r5, r0, r3
 8000c9e:	405d      	eors	r5, r3
 8000ca0:	0fc4      	lsrs	r4, r0, #31
 8000ca2:	0028      	movs	r0, r5
 8000ca4:	f000 f824 	bl	8000cf0 <__clzsi2>
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <__aeabi_i2d+0x58>)
 8000caa:	1a1b      	subs	r3, r3, r0
 8000cac:	055b      	lsls	r3, r3, #21
 8000cae:	0d5b      	lsrs	r3, r3, #21
 8000cb0:	280a      	cmp	r0, #10
 8000cb2:	dc14      	bgt.n	8000cde <__aeabi_i2d+0x4a>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	002e      	movs	r6, r5
 8000cb8:	3215      	adds	r2, #21
 8000cba:	4096      	lsls	r6, r2
 8000cbc:	220b      	movs	r2, #11
 8000cbe:	1a12      	subs	r2, r2, r0
 8000cc0:	40d5      	lsrs	r5, r2
 8000cc2:	032d      	lsls	r5, r5, #12
 8000cc4:	0b2d      	lsrs	r5, r5, #12
 8000cc6:	e003      	b.n	8000cd0 <__aeabi_i2d+0x3c>
 8000cc8:	2400      	movs	r4, #0
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	2600      	movs	r6, #0
 8000cd0:	051b      	lsls	r3, r3, #20
 8000cd2:	432b      	orrs	r3, r5
 8000cd4:	07e4      	lsls	r4, r4, #31
 8000cd6:	4323      	orrs	r3, r4
 8000cd8:	0030      	movs	r0, r6
 8000cda:	0019      	movs	r1, r3
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	380b      	subs	r0, #11
 8000ce0:	4085      	lsls	r5, r0
 8000ce2:	032d      	lsls	r5, r5, #12
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	0b2d      	lsrs	r5, r5, #12
 8000ce8:	e7f2      	b.n	8000cd0 <__aeabi_i2d+0x3c>
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	0000041e 	.word	0x0000041e

08000cf0 <__clzsi2>:
 8000cf0:	211c      	movs	r1, #28
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	041b      	lsls	r3, r3, #16
 8000cf6:	4298      	cmp	r0, r3
 8000cf8:	d301      	bcc.n	8000cfe <__clzsi2+0xe>
 8000cfa:	0c00      	lsrs	r0, r0, #16
 8000cfc:	3910      	subs	r1, #16
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	4298      	cmp	r0, r3
 8000d02:	d301      	bcc.n	8000d08 <__clzsi2+0x18>
 8000d04:	0a00      	lsrs	r0, r0, #8
 8000d06:	3908      	subs	r1, #8
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d301      	bcc.n	8000d12 <__clzsi2+0x22>
 8000d0e:	0900      	lsrs	r0, r0, #4
 8000d10:	3904      	subs	r1, #4
 8000d12:	a202      	add	r2, pc, #8	@ (adr r2, 8000d1c <__clzsi2+0x2c>)
 8000d14:	5c10      	ldrb	r0, [r2, r0]
 8000d16:	1840      	adds	r0, r0, r1
 8000d18:	4770      	bx	lr
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	02020304 	.word	0x02020304
 8000d20:	01010101 	.word	0x01010101
	...

08000d2c <__clzdi2>:
 8000d2c:	b510      	push	{r4, lr}
 8000d2e:	2900      	cmp	r1, #0
 8000d30:	d103      	bne.n	8000d3a <__clzdi2+0xe>
 8000d32:	f7ff ffdd 	bl	8000cf0 <__clzsi2>
 8000d36:	3020      	adds	r0, #32
 8000d38:	e002      	b.n	8000d40 <__clzdi2+0x14>
 8000d3a:	0008      	movs	r0, r1
 8000d3c:	f7ff ffd8 	bl	8000cf0 <__clzsi2>
 8000d40:	bd10      	pop	{r4, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)

08000d44 <newLoRaLongRange>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRaLongRange() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	@ 0x40
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency              = 915;           // US ISM band
 8000d4c:	200c      	movs	r0, #12
 8000d4e:	183b      	adds	r3, r7, r0
 8000d50:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <newLoRaLongRange+0x58>)
 8000d52:	629a      	str	r2, [r3, #40]	@ 0x28
	new_LoRa.spredingFactor         = SF_12;         // Highest spreading factor
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	222c      	movs	r2, #44	@ 0x2c
 8000d58:	210c      	movs	r1, #12
 8000d5a:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth              = BW_125KHz;   // Narrow BW = better sensitivity
 8000d5c:	183b      	adds	r3, r7, r0
 8000d5e:	222d      	movs	r2, #45	@ 0x2d
 8000d60:	2107      	movs	r1, #7
 8000d62:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate                = CR_4_5;        // Strongest error correction
 8000d64:	183b      	adds	r3, r7, r0
 8000d66:	222e      	movs	r2, #46	@ 0x2e
 8000d68:	2101      	movs	r1, #1
 8000d6a:	5499      	strb	r1, [r3, r2]
	new_LoRa.power                  = POWER_17db;    // Safe for RFO pin
 8000d6c:	183b      	adds	r3, r7, r0
 8000d6e:	2232      	movs	r2, #50	@ 0x32
 8000d70:	21fc      	movs	r1, #252	@ 0xfc
 8000d72:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection  = 130;           // Conservative for RFO
 8000d74:	183b      	adds	r3, r7, r0
 8000d76:	2233      	movs	r2, #51	@ 0x33
 8000d78:	2182      	movs	r1, #130	@ 0x82
 8000d7a:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble               = 8;            // Long preamble for weak signal lock
 8000d7c:	0001      	movs	r1, r0
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2208      	movs	r2, #8
 8000d82:	861a      	strh	r2, [r3, #48]	@ 0x30

	return new_LoRa;
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	0010      	movs	r0, r2
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	2334      	movs	r3, #52	@ 0x34
 8000d8e:	001a      	movs	r2, r3
 8000d90:	f003 ffd2 	bl	8004d38 <memcpy>
}
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b010      	add	sp, #64	@ 0x40
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	00000393 	.word	0x00000393

08000da0 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000daa:	250e      	movs	r5, #14
 8000dac:	197c      	adds	r4, r7, r5
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2101      	movs	r1, #1
 8000db2:	0018      	movs	r0, r3
 8000db4:	f000 fa6e 	bl	8001294 <LoRa_read>
 8000db8:	0003      	movs	r3, r0
 8000dba:	7023      	strb	r3, [r4, #0]
	data = read;
 8000dbc:	200f      	movs	r0, #15
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	0029      	movs	r1, r5
 8000dc2:	187a      	adds	r2, r7, r1
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8000dce:	183b      	adds	r3, r7, r0
 8000dd0:	187a      	adds	r2, r7, r1
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	438a      	bics	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24
 8000de0:	e04e      	b.n	8000e80 <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d110      	bne.n	8000e0a <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000de8:	230e      	movs	r3, #14
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	2207      	movs	r2, #7
 8000df2:	4393      	bics	r3, r2
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	2201      	movs	r2, #1
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e08:	e03a      	b.n	8000e80 <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d110      	bne.n	8000e32 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8000e10:	230e      	movs	r3, #14
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	2207      	movs	r2, #7
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	2203      	movs	r2, #3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e30:	e026      	b.n	8000e80 <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d110      	bne.n	8000e5a <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	2207      	movs	r2, #7
 8000e42:	4393      	bics	r3, r2
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	2205      	movs	r2, #5
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b25a      	sxtb	r2, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2205      	movs	r2, #5
 8000e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e58:	e012      	b.n	8000e80 <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b06      	cmp	r3, #6
 8000e5e:	d10f      	bne.n	8000e80 <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 8000e60:	230e      	movs	r3, #14
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	2207      	movs	r2, #7
 8000e6a:	4393      	bics	r3, r2
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	2206      	movs	r2, #6
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b25a      	sxtb	r2, r3
 8000e74:	230f      	movs	r3, #15
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2206      	movs	r2, #6
 8000e7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fa20 	bl	80012d0 <LoRa_write>
	//HAL_Delay(10);
}
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bdb0      	pop	{r4, r5, r7, pc}

08000e98 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	889b      	ldrh	r3, [r3, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	f001 fb56 	bl	8002564 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6a18      	ldr	r0, [r3, #32]
 8000ebc:	23fa      	movs	r3, #250	@ 0xfa
 8000ebe:	00dc      	lsls	r4, r3, #3
 8000ec0:	1dbb      	adds	r3, r7, #6
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	f002 f980 	bl	80031cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 ff14 	bl	8003d00 <HAL_SPI_GetState>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d1f7      	bne.n	8000ece <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6a18      	ldr	r0, [r3, #32]
 8000ee2:	23fa      	movs	r3, #250	@ 0xfa
 8000ee4:	00dc      	lsls	r4, r3, #3
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	0023      	movs	r3, r4
 8000ef0:	f002 facc 	bl	800348c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	0018      	movs	r0, r3
 8000efc:	f002 ff00 	bl	8003d00 <HAL_SPI_GetState>
 8000f00:	0003      	movs	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d1f7      	bne.n	8000ef6 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	889b      	ldrh	r3, [r3, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	0019      	movs	r1, r3
 8000f12:	f001 fb27 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b005      	add	sp, #20
 8000f1c:	bd90      	pop	{r4, r7, pc}

08000f1e <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f1e:	b590      	push	{r4, r7, lr}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	1dbb      	adds	r3, r7, #6
 8000f2c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	889b      	ldrh	r3, [r3, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	f001 fb13 	bl	8002564 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6a18      	ldr	r0, [r3, #32]
 8000f42:	23fa      	movs	r3, #250	@ 0xfa
 8000f44:	00dc      	lsls	r4, r3, #3
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	0023      	movs	r3, r4
 8000f4e:	f002 f93d 	bl	80031cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f002 fed1 	bl	8003d00 <HAL_SPI_GetState>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d1f7      	bne.n	8000f54 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a18      	ldr	r0, [r3, #32]
 8000f68:	23fa      	movs	r3, #250	@ 0xfa
 8000f6a:	00dc      	lsls	r4, r3, #3
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	881a      	ldrh	r2, [r3, #0]
 8000f72:	6839      	ldr	r1, [r7, #0]
 8000f74:	0023      	movs	r3, r4
 8000f76:	f002 f929 	bl	80031cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f002 febd 	bl	8003d00 <HAL_SPI_GetState>
 8000f86:	0003      	movs	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d1f7      	bne.n	8000f7c <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	889b      	ldrh	r3, [r3, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	0019      	movs	r1, r3
 8000f98:	f001 fae4 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b005      	add	sp, #20
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <LoRa_setLowDataRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDataRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	000a      	movs	r2, r1
 8000fae:	1cfb      	adds	r3, r7, #3
 8000fb0:	701a      	strb	r2, [r3, #0]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000fb2:	250e      	movs	r5, #14
 8000fb4:	197c      	adds	r4, r7, r5
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2126      	movs	r1, #38	@ 0x26
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 f96a 	bl	8001294 <LoRa_read>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	7023      	strb	r3, [r4, #0]

	if(value)
 8000fc4:	1cfb      	adds	r3, r7, #3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <LoRa_setLowDataRateOptimization+0x38>
		data = read | 0x08;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	197a      	adds	r2, r7, r5
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <LoRa_setLowDataRateOptimization+0x48>
	else
		data = read & 0xF7;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	220e      	movs	r2, #14
 8000fe2:	18ba      	adds	r2, r7, r2
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	438a      	bics	r2, r1
 8000fea:	701a      	strb	r2, [r3, #0]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2126      	movs	r1, #38	@ 0x26
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 f96a 	bl	80012d0 <LoRa_write>
	HAL_Delay(10);
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f000 ffe1 	bl	8001fc4 <HAL_Delay>
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800100c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b097      	sub	sp, #92	@ 0x5c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001014:	2408      	movs	r4, #8
 8001016:	193a      	adds	r2, r7, r4
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <LoRa_setAutoLDO+0x70>)
 800101a:	0010      	movs	r0, r2
 800101c:	0019      	movs	r1, r3
 800101e:	2350      	movs	r3, #80	@ 0x50
 8001020:	001a      	movs	r2, r3
 8001022:	f003 fe89 	bl	8004d38 <memcpy>

	LoRa_setLowDataRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	222c      	movs	r2, #44	@ 0x2c
 800102a:	5c9b      	ldrb	r3, [r3, r2]
 800102c:	001a      	movs	r2, r3
 800102e:	2301      	movs	r3, #1
 8001030:	4093      	lsls	r3, r2
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fe2e 	bl	8000c94 <__aeabi_i2d>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	222d      	movs	r2, #45	@ 0x2d
 800103c:	5c9b      	ldrb	r3, [r3, r2]
 800103e:	193a      	adds	r2, r7, r4
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	18d3      	adds	r3, r2, r3
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f7ff fad0 	bl	80005ec <__aeabi_ddiv>
 800104c:	0002      	movs	r2, r0
 800104e:	000b      	movs	r3, r1
 8001050:	0010      	movs	r0, r2
 8001052:	0019      	movs	r1, r3
 8001054:	f7ff fde2 	bl	8000c1c <__aeabi_d2iz>
 8001058:	0003      	movs	r3, r0
 800105a:	2201      	movs	r2, #1
 800105c:	2b10      	cmp	r3, #16
 800105e:	dc01      	bgt.n	8001064 <LoRa_setAutoLDO+0x58>
 8001060:	2300      	movs	r3, #0
 8001062:	1c1a      	adds	r2, r3, #0
 8001064:	b2d3      	uxtb	r3, r2
 8001066:	001a      	movs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff99 	bl	8000fa4 <LoRa_setLowDataRateOptimization>
}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b017      	add	sp, #92	@ 0x5c
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	080055e0 	.word	0x080055e0

08001080 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	04db      	lsls	r3, r3, #19
 800108e:	115b      	asrs	r3, r3, #5
 8001090:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	240b      	movs	r4, #11
 8001098:	193b      	adds	r3, r7, r4
 800109a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 800109c:	193b      	adds	r3, r7, r4
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2106      	movs	r1, #6
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 f913 	bl	80012d0 <LoRa_write>
	HAL_Delay(5);
 80010aa:	2005      	movs	r0, #5
 80010ac:	f000 ff8a 	bl	8001fc4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	0a1a      	lsrs	r2, r3, #8
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2107      	movs	r1, #7
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 f905 	bl	80012d0 <LoRa_write>
	HAL_Delay(5);
 80010c6:	2005      	movs	r0, #5
 80010c8:	f000 ff7c 	bl	8001fc4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2108      	movs	r1, #8
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f8f8 	bl	80012d0 <LoRa_write>
	HAL_Delay(5);
 80010e0:	2005      	movs	r0, #5
 80010e2:	f000 ff6f 	bl	8001fc4 <HAL_Delay>
}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b005      	add	sp, #20
 80010ec:	bd90      	pop	{r4, r7, pc}

080010ee <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010ee:	b5b0      	push	{r4, r5, r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b0c      	cmp	r3, #12
 80010fc:	dd01      	ble.n	8001102 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80010fe:	230c      	movs	r3, #12
 8001100:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b06      	cmp	r3, #6
 8001106:	dc01      	bgt.n	800110c <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001108:	2307      	movs	r3, #7
 800110a:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800110c:	250f      	movs	r5, #15
 800110e:	197c      	adds	r4, r7, r5
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	211e      	movs	r1, #30
 8001114:	0018      	movs	r0, r3
 8001116:	f000 f8bd 	bl	8001294 <LoRa_read>
 800111a:	0003      	movs	r3, r0
 800111c:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f000 ff50 	bl	8001fc4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	b2d9      	uxtb	r1, r3
 800112c:	197b      	adds	r3, r7, r5
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	220f      	movs	r2, #15
 8001132:	4013      	ands	r3, r2
 8001134:	b2da      	uxtb	r2, r3
 8001136:	200e      	movs	r0, #14
 8001138:	183b      	adds	r3, r7, r0
 800113a:	188a      	adds	r2, r1, r2
 800113c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800113e:	183b      	adds	r3, r7, r0
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	211e      	movs	r1, #30
 8001146:	0018      	movs	r0, r3
 8001148:	f000 f8c2 	bl	80012d0 <LoRa_write>
	HAL_Delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f000 ff39 	bl	8001fc4 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff ff59 	bl	800100c <LoRa_setAutoLDO>
}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bdb0      	pop	{r4, r5, r7, pc}

08001162 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	000a      	movs	r2, r1
 800116c:	1cfb      	adds	r3, r7, #3
 800116e:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001170:	1cfb      	adds	r3, r7, #3
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2109      	movs	r1, #9
 8001178:	0018      	movs	r0, r3
 800117a:	f000 f8a9 	bl	80012d0 <LoRa_write>
	HAL_Delay(10);
 800117e:	200a      	movs	r0, #10
 8001180:	f000 ff20 	bl	8001fc4 <HAL_Delay>

	if (power == POWER_20db) {
 8001184:	1cfb      	adds	r3, r7, #3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2bff      	cmp	r3, #255	@ 0xff
 800118a:	d106      	bne.n	800119a <LoRa_setPower+0x38>
		// Enable +20 dBm DAC
		LoRa_write(_LoRa, RegPaDac, 0x87); // RegPaDac
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2287      	movs	r2, #135	@ 0x87
 8001190:	214d      	movs	r1, #77	@ 0x4d
 8001192:	0018      	movs	r0, r3
 8001194:	f000 f89c 	bl	80012d0 <LoRa_write>
 8001198:	e005      	b.n	80011a6 <LoRa_setPower+0x44>
	} else {
		// Use default DAC (up to 17 dBm)
		LoRa_write(_LoRa, RegPaDac, 0x84); // RegPaDac
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2284      	movs	r2, #132	@ 0x84
 800119e:	214d      	movs	r1, #77	@ 0x4d
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 f895 	bl	80012d0 <LoRa_write>
	}
	HAL_Delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f000 ff0c 	bl	8001fc4 <HAL_Delay>
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	000a      	movs	r2, r1
 80011be:	1cfb      	adds	r3, r7, #3
 80011c0:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 80011c2:	230f      	movs	r3, #15
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

	if(current<45)
 80011ca:	1cfb      	adds	r3, r7, #3
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b2c      	cmp	r3, #44	@ 0x2c
 80011d0:	d802      	bhi.n	80011d8 <LoRa_setOCP+0x24>
		current = 45;
 80011d2:	1cfb      	adds	r3, r7, #3
 80011d4:	222d      	movs	r2, #45	@ 0x2d
 80011d6:	701a      	strb	r2, [r3, #0]
	if(current>240)
 80011d8:	1cfb      	adds	r3, r7, #3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2bf0      	cmp	r3, #240	@ 0xf0
 80011de:	d902      	bls.n	80011e6 <LoRa_setOCP+0x32>
		current = 240;
 80011e0:	1cfb      	adds	r3, r7, #3
 80011e2:	22f0      	movs	r2, #240	@ 0xf0
 80011e4:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 80011e6:	1cfb      	adds	r3, r7, #3
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b78      	cmp	r3, #120	@ 0x78
 80011ec:	d80c      	bhi.n	8001208 <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 80011ee:	1cfb      	adds	r3, r7, #3
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3b2d      	subs	r3, #45	@ 0x2d
 80011f4:	2105      	movs	r1, #5
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff f820 	bl	800023c <__divsi3>
 80011fc:	0003      	movs	r3, r0
 80011fe:	001a      	movs	r2, r3
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e00f      	b.n	8001228 <LoRa_setOCP+0x74>
	else if(current <= 240)
 8001208:	1cfb      	adds	r3, r7, #3
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2bf0      	cmp	r3, #240	@ 0xf0
 800120e:	d80b      	bhi.n	8001228 <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8001210:	1cfb      	adds	r3, r7, #3
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	331e      	adds	r3, #30
 8001216:	210a      	movs	r1, #10
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff f80f 	bl	800023c <__divsi3>
 800121e:	0003      	movs	r3, r0
 8001220:	001a      	movs	r2, r3
 8001222:	230f      	movs	r3, #15
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8001228:	210f      	movs	r1, #15
 800122a:	187b      	adds	r3, r7, r1
 800122c:	187a      	adds	r2, r7, r1
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	3220      	adds	r2, #32
 8001232:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	210b      	movs	r1, #11
 800123c:	0018      	movs	r0, r3
 800123e:	f000 f847 	bl	80012d0 <LoRa_write>
	HAL_Delay(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f000 febe 	bl	8001fc4 <HAL_Delay>
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b004      	add	sp, #16
 800124e:	bd80      	pop	{r7, pc}

08001250 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001258:	250f      	movs	r5, #15
 800125a:	197c      	adds	r4, r7, r5
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	211e      	movs	r1, #30
 8001260:	0018      	movs	r0, r3
 8001262:	f000 f817 	bl	8001294 <LoRa_read>
 8001266:	0003      	movs	r3, r0
 8001268:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 800126a:	200e      	movs	r0, #14
 800126c:	183b      	adds	r3, r7, r0
 800126e:	197a      	adds	r2, r7, r5
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	2107      	movs	r1, #7
 8001274:	430a      	orrs	r2, r1
 8001276:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001278:	183b      	adds	r3, r7, r0
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	211e      	movs	r1, #30
 8001280:	0018      	movs	r0, r3
 8001282:	f000 f825 	bl	80012d0 <LoRa_write>
	HAL_Delay(10);
 8001286:	200a      	movs	r0, #10
 8001288:	f000 fe9c 	bl	8001fc4 <HAL_Delay>
}
 800128c:	46c0      	nop			@ (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bdb0      	pop	{r4, r5, r7, pc}

08001294 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af02      	add	r7, sp, #8
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	000a      	movs	r2, r1
 800129e:	1cfb      	adds	r3, r7, #3
 80012a0:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80012a2:	1cfb      	adds	r3, r7, #3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	227f      	movs	r2, #127	@ 0x7f
 80012a8:	4013      	ands	r3, r2
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	210e      	movs	r1, #14
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80012b2:	240f      	movs	r4, #15
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	1879      	adds	r1, r7, r1
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	9200      	str	r2, [sp, #0]
 80012be:	2201      	movs	r2, #1
 80012c0:	f7ff fdea 	bl	8000e98 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80012c4:	193b      	adds	r3, r7, r4
 80012c6:	781b      	ldrb	r3, [r3, #0]
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b005      	add	sp, #20
 80012ce:	bd90      	pop	{r4, r7, pc}

080012d0 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	0008      	movs	r0, r1
 80012da:	0011      	movs	r1, r2
 80012dc:	1cfb      	adds	r3, r7, #3
 80012de:	1c02      	adds	r2, r0, #0
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	1cbb      	adds	r3, r7, #2
 80012e4:	1c0a      	adds	r2, r1, #0
 80012e6:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80012e8:	1cfb      	adds	r3, r7, #3
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	4252      	negs	r2, r2
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	210e      	movs	r1, #14
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	701a      	strb	r2, [r3, #0]
	data = value;
 80012fa:	200f      	movs	r0, #15
 80012fc:	183b      	adds	r3, r7, r0
 80012fe:	1cba      	adds	r2, r7, #2
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001304:	183b      	adds	r3, r7, r0
 8001306:	1879      	adds	r1, r7, r1
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	f7ff fe05 	bl	8000f1e <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b004      	add	sp, #16
 800131a:	bd80      	pop	{r7, pc}

0800131c <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}

0800132e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2105      	movs	r1, #5
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff fd30 	bl	8000da0 <LoRa_gotoMode>
}
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}

08001348 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001356:	231f      	movs	r3, #31
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	e007      	b.n	8001374 <LoRa_receive+0x2c>
		data[i]=0;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	3301      	adds	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	429a      	cmp	r2, r3
 800137c:	dbf2      	blt.n	8001364 <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2101      	movs	r1, #1
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fd0c 	bl	8000da0 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001388:	2513      	movs	r5, #19
 800138a:	197c      	adds	r4, r7, r5
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2112      	movs	r1, #18
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ff7f 	bl	8001294 <LoRa_read>
 8001396:	0003      	movs	r3, r0
 8001398:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 800139a:	197b      	adds	r3, r7, r5
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2240      	movs	r2, #64	@ 0x40
 80013a0:	4013      	ands	r3, r2
 80013a2:	d03f      	beq.n	8001424 <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	22ff      	movs	r2, #255	@ 0xff
 80013a8:	2112      	movs	r1, #18
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff ff90 	bl	80012d0 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80013b0:	2612      	movs	r6, #18
 80013b2:	19bc      	adds	r4, r7, r6
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2113      	movs	r1, #19
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff6b 	bl	8001294 <LoRa_read>
 80013be:	0003      	movs	r3, r0
 80013c0:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80013c2:	197c      	adds	r4, r7, r5
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2110      	movs	r1, #16
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ff63 	bl	8001294 <LoRa_read>
 80013ce:	0003      	movs	r3, r0
 80013d0:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80013d2:	197b      	adds	r3, r7, r5
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	210d      	movs	r1, #13
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff ff78 	bl	80012d0 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80013e0:	231f      	movs	r3, #31
 80013e2:	18fa      	adds	r2, r7, r3
 80013e4:	19bb      	adds	r3, r7, r6
 80013e6:	1df9      	adds	r1, r7, #7
 80013e8:	780c      	ldrb	r4, [r1, #0]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2d8      	uxtb	r0, r3
 80013ee:	b2e1      	uxtb	r1, r4
 80013f0:	4288      	cmp	r0, r1
 80013f2:	d900      	bls.n	80013f6 <LoRa_receive+0xae>
 80013f4:	1c23      	adds	r3, r4, #0
 80013f6:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00c      	b.n	8001418 <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	18d4      	adds	r4, r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2100      	movs	r1, #0
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff ff43 	bl	8001294 <LoRa_read>
 800140e:	0003      	movs	r3, r0
 8001410:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	231f      	movs	r3, #31
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbec      	blt.n	80013fe <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2105      	movs	r1, #5
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff fcb9 	bl	8000da0 <LoRa_gotoMode>
    return min;
 800142e:	231f      	movs	r3, #31
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	781b      	ldrb	r3, [r3, #0]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b009      	add	sp, #36	@ 0x24
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800143c <LoRa_spi_enable>:
 *					Drive high to enable radio on chip.
 *
 *	args		: LoRa* LoRa        --> LoRa object handler
 *	returns		: HAL_OK, HAL_ERR
 * ----------------------------------------------------------------------------- */
void LoRa_spi_enable(LoRa* _LoRa) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->enable_port, _LoRa->enable_pin, GPIO_PIN_SET);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6998      	ldr	r0, [r3, #24]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	8b9b      	ldrh	r3, [r3, #28]
 800144c:	2201      	movs	r2, #1
 800144e:	0019      	movs	r1, r3
 8001450:	f001 f888 	bl	8002564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	889b      	ldrh	r3, [r3, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	0019      	movs	r1, r3
 8001460:	f001 f880 	bl	8002564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6898      	ldr	r0, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	899b      	ldrh	r3, [r3, #12]
 800146c:	2201      	movs	r2, #1
 800146e:	0019      	movs	r1, r3
 8001470:	f001 f878 	bl	8002564 <HAL_GPIO_WritePin>
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 8001484:	250f      	movs	r5, #15
 8001486:	197c      	adds	r4, r7, r5
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	211a      	movs	r1, #26
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff01 	bl	8001294 <LoRa_read>
 8001492:	0003      	movs	r3, r0
 8001494:	7023      	strb	r3, [r4, #0]
	return -164 + read;
 8001496:	197b      	adds	r3, r7, r5
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3ba4      	subs	r3, #164	@ 0xa4
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b004      	add	sp, #16
 80014a2:	bdb0      	pop	{r4, r5, r7, pc}

080014a4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff ff34 	bl	800131c <LoRa_isvalid>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d100      	bne.n	80014ba <LoRa_init+0x16>
 80014b8:	e0be      	b.n	8001638 <LoRa_init+0x194>
			LoRa_spi_enable(_LoRa);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff ffbd 	bl	800143c <LoRa_spi_enable>
			HAL_Delay(10);
 80014c2:	200a      	movs	r0, #10
 80014c4:	f000 fd7e 	bl	8001fc4 <HAL_Delay>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2100      	movs	r1, #0
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fc67 	bl	8000da0 <LoRa_gotoMode>
			HAL_Delay(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f000 fd76 	bl	8001fc4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80014d8:	260f      	movs	r6, #15
 80014da:	19bc      	adds	r4, r7, r6
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2101      	movs	r1, #1
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fed7 	bl	8001294 <LoRa_read>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 80014ea:	200a      	movs	r0, #10
 80014ec:	f000 fd6a 	bl	8001fc4 <HAL_Delay>
			data = read | 0x80;
 80014f0:	250e      	movs	r5, #14
 80014f2:	197b      	adds	r3, r7, r5
 80014f4:	0034      	movs	r4, r6
 80014f6:	193a      	adds	r2, r7, r4
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4249      	negs	r1, r1
 80014fe:	430a      	orrs	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8001502:	197b      	adds	r3, r7, r5
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2101      	movs	r1, #1
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fee0 	bl	80012d0 <LoRa_write>
			HAL_Delay(100);
 8001510:	2064      	movs	r0, #100	@ 0x64
 8001512:	f000 fd57 	bl	8001fc4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0011      	movs	r1, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff fdae 	bl	8001080 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2232      	movs	r2, #50	@ 0x32
 8001528:	5c9a      	ldrb	r2, [r3, r2]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff fe17 	bl	8001162 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2233      	movs	r2, #51	@ 0x33
 8001538:	5c9a      	ldrb	r2, [r3, r2]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	0011      	movs	r1, r2
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fe38 	bl	80011b4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2223      	movs	r2, #35	@ 0x23
 8001548:	210c      	movs	r1, #12
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff fec0 	bl	80012d0 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0018      	movs	r0, r3
 8001554:	f7ff fe7c 	bl	8001250 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	222c      	movs	r2, #44	@ 0x2c
 800155c:	5c9b      	ldrb	r3, [r3, r2]
 800155e:	001a      	movs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0011      	movs	r1, r2
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fdc2 	bl	80010ee <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	22ff      	movs	r2, #255	@ 0xff
 800156e:	211f      	movs	r1, #31
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff fead 	bl	80012d0 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001576:	197b      	adds	r3, r7, r5
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	222d      	movs	r2, #45	@ 0x2d
 8001580:	5c9b      	ldrb	r3, [r3, r2]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	b2d9      	uxtb	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	222e      	movs	r2, #46	@ 0x2e
 800158a:	5c9b      	ldrb	r3, [r3, r2]
 800158c:	18db      	adds	r3, r3, r3
 800158e:	b2da      	uxtb	r2, r3
 8001590:	197b      	adds	r3, r7, r5
 8001592:	188a      	adds	r2, r1, r2
 8001594:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001596:	197b      	adds	r3, r7, r5
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	211d      	movs	r1, #29
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff fe96 	bl	80012d0 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff fd30 	bl	800100c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2120      	movs	r1, #32
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff fe88 	bl	80012d0 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2121      	movs	r1, #33	@ 0x21
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff fe80 	bl	80012d0 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80015d0:	0026      	movs	r6, r4
 80015d2:	193c      	adds	r4, r7, r4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2140      	movs	r1, #64	@ 0x40
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fe5b 	bl	8001294 <LoRa_read>
 80015de:	0003      	movs	r3, r0
 80015e0:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 80015e2:	197b      	adds	r3, r7, r5
 80015e4:	0034      	movs	r4, r6
 80015e6:	193a      	adds	r2, r7, r4
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	213f      	movs	r1, #63	@ 0x3f
 80015ec:	430a      	orrs	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80015f0:	197b      	adds	r3, r7, r5
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fe69 	bl	80012d0 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2101      	movs	r1, #1
 8001602:	0018      	movs	r0, r3
 8001604:	f7ff fbcc 	bl	8000da0 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_Delay(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f000 fcd8 	bl	8001fc4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001614:	0025      	movs	r5, r4
 8001616:	193c      	adds	r4, r7, r4
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2142      	movs	r1, #66	@ 0x42
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff fe39 	bl	8001294 <LoRa_read>
 8001622:	0003      	movs	r3, r0
 8001624:	7023      	strb	r3, [r4, #0]
			if(read == 0x12 )
 8001626:	197b      	adds	r3, r7, r5
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b12      	cmp	r3, #18
 800162c:	d101      	bne.n	8001632 <LoRa_init+0x18e>
				return LORA_OK;
 800162e:	23c8      	movs	r3, #200	@ 0xc8
 8001630:	e004      	b.n	800163c <LoRa_init+0x198>
			else
				return LORA_NOT_FOUND;
 8001632:	23ca      	movs	r3, #202	@ 0xca
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	e001      	b.n	800163c <LoRa_init+0x198>
	}
	else {
		return LORA_UNAVAILABLE;
 8001638:	23f8      	movs	r3, #248	@ 0xf8
 800163a:	33ff      	adds	r3, #255	@ 0xff
	}
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b005      	add	sp, #20
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b08b      	sub	sp, #44	@ 0x2c
 8001648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	2414      	movs	r4, #20
 800164c:	193b      	adds	r3, r7, r4
 800164e:	0018      	movs	r0, r3
 8001650:	2314      	movs	r3, #20
 8001652:	001a      	movs	r2, r3
 8001654:	2100      	movs	r1, #0
 8001656:	f003 fb25 	bl	8004ca4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b56      	ldr	r3, [pc, #344]	@ (80017b4 <MX_GPIO_Init+0x170>)
 800165c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800165e:	4b55      	ldr	r3, [pc, #340]	@ (80017b4 <MX_GPIO_Init+0x170>)
 8001660:	2104      	movs	r1, #4
 8001662:	430a      	orrs	r2, r1
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
 8001666:	4b53      	ldr	r3, [pc, #332]	@ (80017b4 <MX_GPIO_Init+0x170>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b50      	ldr	r3, [pc, #320]	@ (80017b4 <MX_GPIO_Init+0x170>)
 8001674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001676:	4b4f      	ldr	r3, [pc, #316]	@ (80017b4 <MX_GPIO_Init+0x170>)
 8001678:	2120      	movs	r1, #32
 800167a:	430a      	orrs	r2, r1
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34
 800167e:	4b4d      	ldr	r3, [pc, #308]	@ (80017b4 <MX_GPIO_Init+0x170>)
 8001680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001682:	2220      	movs	r2, #32
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b4a      	ldr	r3, [pc, #296]	@ (80017b4 <MX_GPIO_Init+0x170>)
 800168c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168e:	4b49      	ldr	r3, [pc, #292]	@ (80017b4 <MX_GPIO_Init+0x170>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	@ 0x34
 8001696:	4b47      	ldr	r3, [pc, #284]	@ (80017b4 <MX_GPIO_Init+0x170>)
 8001698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b44      	ldr	r3, [pc, #272]	@ (80017b4 <MX_GPIO_Init+0x170>)
 80016a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a6:	4b43      	ldr	r3, [pc, #268]	@ (80017b4 <MX_GPIO_Init+0x170>)
 80016a8:	2102      	movs	r1, #2
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ae:	4b41      	ldr	r3, [pc, #260]	@ (80017b4 <MX_GPIO_Init+0x170>)
 80016b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80016ba:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <MX_GPIO_Init+0x174>)
 80016bc:	2200      	movs	r2, #0
 80016be:	2104      	movs	r1, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	f000 ff4f 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|ENA_Pin, GPIO_PIN_RESET);
 80016c6:	23c0      	movs	r3, #192	@ 0xc0
 80016c8:	0099      	lsls	r1, r3, #2
 80016ca:	23a0      	movs	r3, #160	@ 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	2200      	movs	r2, #0
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 ff47 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016d6:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <MX_GPIO_Init+0x178>)
 80016d8:	2200      	movs	r2, #0
 80016da:	2140      	movs	r1, #64	@ 0x40
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 ff41 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	2204      	movs	r2, #4
 80016e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	2288      	movs	r2, #136	@ 0x88
 80016ec:	0352      	lsls	r2, r2, #13
 80016ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	4a31      	ldr	r2, [pc, #196]	@ (80017c0 <MX_GPIO_Init+0x17c>)
 80016fa:	0019      	movs	r1, r3
 80016fc:	0010      	movs	r0, r2
 80016fe:	f000 fdcd 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001708:	193b      	adds	r3, r7, r4
 800170a:	2288      	movs	r2, #136	@ 0x88
 800170c:	0352      	lsls	r2, r2, #13
 800170e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001716:	193a      	adds	r2, r7, r4
 8001718:	23a0      	movs	r3, #160	@ 0xa0
 800171a:	05db      	lsls	r3, r3, #23
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f000 fdbc 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2204      	movs	r2, #4
 8001728:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	2201      	movs	r2, #1
 800172e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	193b      	adds	r3, r7, r4
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	193b      	adds	r3, r7, r4
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800173c:	193b      	adds	r3, r7, r4
 800173e:	4a1e      	ldr	r2, [pc, #120]	@ (80017b8 <MX_GPIO_Init+0x174>)
 8001740:	0019      	movs	r1, r3
 8001742:	0010      	movs	r0, r2
 8001744:	f000 fdaa 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin ENA_Pin */
  GPIO_InitStruct.Pin = RST_Pin|ENA_Pin;
 8001748:	0021      	movs	r1, r4
 800174a:	187b      	adds	r3, r7, r1
 800174c:	22c0      	movs	r2, #192	@ 0xc0
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	000c      	movs	r4, r1
 8001754:	193b      	adds	r3, r7, r4
 8001756:	2201      	movs	r2, #1
 8001758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	193b      	adds	r3, r7, r4
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	193a      	adds	r2, r7, r4
 8001768:	23a0      	movs	r3, #160	@ 0xa0
 800176a:	05db      	lsls	r3, r3, #23
 800176c:	0011      	movs	r1, r2
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fd94 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001774:	0021      	movs	r1, r4
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2240      	movs	r2, #64	@ 0x40
 800177a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2201      	movs	r2, #1
 8001780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800178e:	187b      	adds	r3, r7, r1
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <MX_GPIO_Init+0x178>)
 8001792:	0019      	movs	r1, r3
 8001794:	0010      	movs	r0, r2
 8001796:	f000 fd81 	bl	800229c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2005      	movs	r0, #5
 80017a0:	f000 fce0 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80017a4:	2005      	movs	r0, #5
 80017a6:	f000 fcf2 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b00b      	add	sp, #44	@ 0x2c
 80017b0:	bd90      	pop	{r4, r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000
 80017b8:	50000400 	.word	0x50000400
 80017bc:	50000800 	.word	0x50000800
 80017c0:	50001400 	.word	0x50001400

080017c4 <HAL_GPIO_EXTI_Rising_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	4c27      	ldr	r4, [pc, #156]	@ (8001864 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 80017c8:	44a5      	add	sp, r4
 80017ca:	af02      	add	r7, sp, #8
 80017cc:	0002      	movs	r2, r0
 80017ce:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 80017d0:	218e      	movs	r1, #142	@ 0x8e
 80017d2:	0089      	lsls	r1, r1, #2
 80017d4:	185b      	adds	r3, r3, r1
 80017d6:	19db      	adds	r3, r3, r7
 80017d8:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == IRQ_Pin)
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 80017dc:	185b      	adds	r3, r3, r1
 80017de:	19db      	adds	r3, r3, r7
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d138      	bne.n	8001858 <HAL_GPIO_EXTI_Rising_Callback+0x94>
    {
        uint8_t received_data[200];
        uint8_t packet_size = 0;
 80017e6:	4d21      	ldr	r5, [pc, #132]	@ (800186c <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 80017e8:	197b      	adds	r3, r7, r5
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]

        packet_size = LoRa_receive(&myLoRa, received_data, sizeof(received_data));
 80017ee:	197c      	adds	r4, r7, r5
 80017f0:	2608      	movs	r6, #8
 80017f2:	19b9      	adds	r1, r7, r6
 80017f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 80017f6:	22c8      	movs	r2, #200	@ 0xc8
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff fda5 	bl	8001348 <LoRa_receive>
 80017fe:	0003      	movs	r3, r0
 8001800:	7023      	strb	r3, [r4, #0]

        if (packet_size > 0 && strstr((char*)received_data, "transmitter") != NULL)
 8001802:	197b      	adds	r3, r7, r5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d026      	beq.n	8001858 <HAL_GPIO_EXTI_Rising_Callback+0x94>
 800180a:	4a1a      	ldr	r2, [pc, #104]	@ (8001874 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 800180c:	0035      	movs	r5, r6
 800180e:	197b      	adds	r3, r7, r5
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f003 fa4e 	bl	8004cb4 <strstr>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d01d      	beq.n	8001858 <HAL_GPIO_EXTI_Rising_Callback+0x94>
        {
        	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 800181e:	2140      	movs	r1, #64	@ 0x40
 8001820:	0018      	movs	r0, r3
 8001822:	f000 febc 	bl	800259e <HAL_GPIO_TogglePin>

            int packet_strength = LoRa_getRSSI(&myLoRa);
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff fe27 	bl	800147c <LoRa_getRSSI>
 800182e:	0003      	movs	r3, r0
 8001830:	228c      	movs	r2, #140	@ 0x8c
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	18b9      	adds	r1, r7, r2
 8001836:	600b      	str	r3, [r1, #0]

            char message[350];
            snprintf(message, sizeof(message), "Message Received. RSSI: %d :\t%s", packet_strength, received_data);
 8001838:	18bb      	adds	r3, r7, r2
 800183a:	681c      	ldr	r4, [r3, #0]
 800183c:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <HAL_GPIO_EXTI_Rising_Callback+0xb8>)
 800183e:	23af      	movs	r3, #175	@ 0xaf
 8001840:	0059      	lsls	r1, r3, #1
 8001842:	26d0      	movs	r6, #208	@ 0xd0
 8001844:	19b8      	adds	r0, r7, r6
 8001846:	197b      	adds	r3, r7, r5
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	0023      	movs	r3, r4
 800184c:	f003 f9f4 	bl	8004c38 <sniprintf>
            uart_print(message);
 8001850:	19bb      	adds	r3, r7, r6
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fa28 	bl	8001ca8 <uart_print>
        }
    }

}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	238f      	movs	r3, #143	@ 0x8f
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	449d      	add	sp, r3
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001864:	fffffdbc 	.word	0xfffffdbc
 8001868:	fffffdce 	.word	0xfffffdce
 800186c:	00000237 	.word	0x00000237
 8001870:	20000078 	.word	0x20000078
 8001874:	08005630 	.word	0x08005630
 8001878:	50000800 	.word	0x50000800
 800187c:	0800563c 	.word	0x0800563c

08001880 <lora_setup>:

void lora_setup()
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b091      	sub	sp, #68	@ 0x44
 8001884:	af00      	add	r7, sp, #0
	//myLoRa = newLoRa();
	myLoRa = newLoRaLongRange();
 8001886:	4c22      	ldr	r4, [pc, #136]	@ (8001910 <lora_setup+0x90>)
 8001888:	003b      	movs	r3, r7
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff fa5a 	bl	8000d44 <newLoRaLongRange>
 8001890:	003b      	movs	r3, r7
 8001892:	0020      	movs	r0, r4
 8001894:	0019      	movs	r1, r3
 8001896:	2334      	movs	r3, #52	@ 0x34
 8001898:	001a      	movs	r2, r3
 800189a:	f003 fa4d 	bl	8004d38 <memcpy>

	myLoRa.CS_port         = CS_GPIO_Port;
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <lora_setup+0x90>)
 80018a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001914 <lora_setup+0x94>)
 80018a2:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = CS_Pin;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <lora_setup+0x90>)
 80018a6:	2204      	movs	r2, #4
 80018a8:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = RST_GPIO_Port;
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <lora_setup+0x90>)
 80018ac:	22a0      	movs	r2, #160	@ 0xa0
 80018ae:	05d2      	lsls	r2, r2, #23
 80018b0:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = RST_Pin;
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <lora_setup+0x90>)
 80018b4:	2280      	movs	r2, #128	@ 0x80
 80018b6:	0052      	lsls	r2, r2, #1
 80018b8:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = IRQ_GPIO_Port;
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <lora_setup+0x90>)
 80018bc:	22a0      	movs	r2, #160	@ 0xa0
 80018be:	05d2      	lsls	r2, r2, #23
 80018c0:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = IRQ_Pin;
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <lora_setup+0x90>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	829a      	strh	r2, [r3, #20]
	myLoRa.enable_port	   = ENA_GPIO_Port;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <lora_setup+0x90>)
 80018ca:	22a0      	movs	r2, #160	@ 0xa0
 80018cc:	05d2      	lsls	r2, r2, #23
 80018ce:	619a      	str	r2, [r3, #24]
	myLoRa.enable_pin	   = ENA_Pin;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <lora_setup+0x90>)
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	839a      	strh	r2, [r3, #28]
	myLoRa.hSPIx           = &hspi1;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <lora_setup+0x90>)
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <lora_setup+0x98>)
 80018dc:	621a      	str	r2, [r3, #32]

	uint8_t init_status = LoRa_init(&myLoRa);
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <lora_setup+0x90>)
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff fddf 	bl	80014a4 <LoRa_init>
 80018e6:	0003      	movs	r3, r0
 80018e8:	001a      	movs	r2, r3
 80018ea:	213f      	movs	r1, #63	@ 0x3f
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	701a      	strb	r2, [r3, #0]
	if(init_status != LORA_OK)
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80018f6:	d001      	beq.n	80018fc <lora_setup+0x7c>
	{
		while(1);
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	e7fd      	b.n	80018f8 <lora_setup+0x78>
	}
	else
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <lora_setup+0x9c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	2140      	movs	r1, #64	@ 0x40
 8001902:	0018      	movs	r0, r3
 8001904:	f000 fe2e 	bl	8002564 <HAL_GPIO_WritePin>
	}
}
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	b011      	add	sp, #68	@ 0x44
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	20000078 	.word	0x20000078
 8001914:	50000400 	.word	0x50000400
 8001918:	200000ac 	.word	0x200000ac
 800191c:	50000800 	.word	0x50000800

08001920 <receiver_loop>:

	}
}

void receiver_loop()
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8001926:	23fa      	movs	r3, #250	@ 0xfa
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	0018      	movs	r0, r3
 800192c:	f000 fb4a 	bl	8001fc4 <HAL_Delay>
	LoRa_startReceiving(&myLoRa);
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <receiver_loop+0x34>)
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff fcfb 	bl	800132e <LoRa_startReceiving>

	uart_print("Starting LoRa Receiver on G031K8 Nucleo with settings newLoRaLongRange()...");
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <receiver_loop+0x38>)
 800193a:	0018      	movs	r0, r3
 800193c:	f000 f9b4 	bl	8001ca8 <uart_print>

	uint8_t default_power = LoRa_read(&myLoRa, RegPaDac);
 8001940:	1dfc      	adds	r4, r7, #7
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <receiver_loop+0x34>)
 8001944:	214d      	movs	r1, #77	@ 0x4d
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff fca4 	bl	8001294 <LoRa_read>
 800194c:	0003      	movs	r3, r0
 800194e:	7023      	strb	r3, [r4, #0]

	while(1)
	{
		__WFI();
 8001950:	bf30      	wfi
 8001952:	e7fd      	b.n	8001950 <receiver_loop+0x30>
 8001954:	20000078 	.word	0x20000078
 8001958:	08005680 	.word	0x08005680

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001960:	f000 faaa 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001964:	f000 f80c 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001968:	f7ff fe6c 	bl	8001644 <MX_GPIO_Init>
  MX_SPI1_Init();
 800196c:	f000 f856 	bl	8001a1c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001970:	f000 f9fa 	bl	8001d68 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lora_setup();
 8001974:	f7ff ff84 	bl	8001880 <lora_setup>
  #ifdef TRANSMITTER
    transmitter_loop();
  #endif

  #ifdef RECEIVER
    receiver_loop();
 8001978:	f7ff ffd2 	bl	8001920 <receiver_loop>
  #endif

  while (1)
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	e7fd      	b.n	800197c <main+0x20>

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b093      	sub	sp, #76	@ 0x4c
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	2410      	movs	r4, #16
 8001988:	193b      	adds	r3, r7, r4
 800198a:	0018      	movs	r0, r3
 800198c:	2338      	movs	r3, #56	@ 0x38
 800198e:	001a      	movs	r2, r3
 8001990:	2100      	movs	r1, #0
 8001992:	f003 f987 	bl	8004ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001996:	003b      	movs	r3, r7
 8001998:	0018      	movs	r0, r3
 800199a:	2310      	movs	r3, #16
 800199c:	001a      	movs	r2, r3
 800199e:	2100      	movs	r1, #0
 80019a0:	f003 f980 	bl	8004ca4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 fe47 	bl	800263c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	0052      	lsls	r2, r2, #1
 80019ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	2240      	movs	r2, #64	@ 0x40
 80019c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ce:	193b      	adds	r3, r7, r4
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 fe7f 	bl	80026d4 <HAL_RCC_OscConfig>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80019da:	f000 f819 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019de:	003b      	movs	r3, r7
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019e4:	003b      	movs	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ea:	003b      	movs	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f0:	003b      	movs	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019f6:	003b      	movs	r3, r7
 80019f8:	2100      	movs	r1, #0
 80019fa:	0018      	movs	r0, r3
 80019fc:	f001 f984 	bl	8002d08 <HAL_RCC_ClockConfig>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001a04:	f000 f804 	bl	8001a10 <Error_Handler>
  }
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b013      	add	sp, #76	@ 0x4c
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	e7fd      	b.n	8001a18 <Error_Handler+0x8>

08001a1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a22:	4a1c      	ldr	r2, [pc, #112]	@ (8001a94 <MX_SPI1_Init+0x78>)
 8001a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a28:	2282      	movs	r2, #130	@ 0x82
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a36:	22e0      	movs	r2, #224	@ 0xe0
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a42:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a52:	2218      	movs	r2, #24
 8001a54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f001 faed 	bl	800305c <HAL_SPI_Init>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d001      	beq.n	8001a8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a86:	f7ff ffc3 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000ac 	.word	0x200000ac
 8001a94:	40013000 	.word	0x40013000

08001a98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b08b      	sub	sp, #44	@ 0x2c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	2414      	movs	r4, #20
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	2314      	movs	r3, #20
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	2100      	movs	r1, #0
 8001aac:	f003 f8fa 	bl	8004ca4 <memset>
  if(spiHandle->Instance==SPI1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b34 <HAL_SPI_MspInit+0x9c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d138      	bne.n	8001b2c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aba:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <HAL_SPI_MspInit+0xa0>)
 8001abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <HAL_SPI_MspInit+0xa0>)
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	0149      	lsls	r1, r1, #5
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_SPI_MspInit+0xa0>)
 8001aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	015b      	lsls	r3, r3, #5
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_SPI_MspInit+0xa0>)
 8001ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_SPI_MspInit+0xa0>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_SPI_MspInit+0xa0>)
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001aee:	0021      	movs	r1, r4
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	22c2      	movs	r2, #194	@ 0xc2
 8001af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	2202      	movs	r2, #2
 8001afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2203      	movs	r2, #3
 8001b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	187a      	adds	r2, r7, r1
 8001b10:	23a0      	movs	r3, #160	@ 0xa0
 8001b12:	05db      	lsls	r3, r3, #23
 8001b14:	0011      	movs	r1, r2
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 fbc0 	bl	800229c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2019      	movs	r0, #25
 8001b22:	f000 fb1f 	bl	8002164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b26:	2019      	movs	r0, #25
 8001b28:	f000 fb31 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b00b      	add	sp, #44	@ 0x2c
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	40013000 	.word	0x40013000
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b48:	2101      	movs	r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	2201      	movs	r2, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	0549      	lsls	r1, r1, #21
 8001b64:	430a      	orrs	r2, r1
 8001b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	055b      	lsls	r3, r3, #21
 8001b70:	4013      	ands	r3, r2
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	40021000 	.word	0x40021000

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	e7fd      	b.n	8001b88 <NMI_Handler+0x4>

08001b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	e7fd      	b.n	8001b90 <HardFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f9ee 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 fd0a 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <SPI1_IRQHandler+0x14>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f001 ff90 	bl	8003af4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	200000ac 	.word	0x200000ac

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f003 f866 	bl	8004ce0 <__errno>
 8001c14:	0003      	movs	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	18d2      	adds	r2, r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <_sbrk+0x64>)
 8001c30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b006      	add	sp, #24
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20002000 	.word	0x20002000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	20000110 	.word	0x20000110
 8001c48:	20000300 	.word	0x20000300

08001c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <init_uart_print>:
extern UART_HandleTypeDef huart2;

static UART_HandleTypeDef *active_uart = NULL;
static uint8_t initialized = 0;

static void init_uart_print(UART_HandleTypeDef *huart) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    huart->Init.BaudRate = 115200;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	22e1      	movs	r2, #225	@ 0xe1
 8001c64:	0252      	lsls	r2, r2, #9
 8001c66:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220c      	movs	r2, #12
 8001c7e:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(huart) != HAL_OK) {
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f002 fa2c 	bl	80040ec <HAL_UART_Init>
        // handle error
    }
    initialized = 1;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <init_uart_print+0x4c>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	20000118 	.word	0x20000118

08001ca8 <uart_print>:
void uart_print_init(UART_HandleTypeDef *huart) {
    active_uart = huart;
    initialized = 0;  // force re-init if needed
}

void uart_print(const char *str) {
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001caa:	b08b      	sub	sp, #44	@ 0x2c
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	61f8      	str	r0, [r7, #28]
 8001cb0:	466b      	mov	r3, sp
 8001cb2:	001e      	movs	r6, r3
    if (!active_uart) active_uart = &huart2;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	@ (8001d58 <uart_print+0xb0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <uart_print+0x1a>
 8001cbc:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <uart_print+0xb0>)
 8001cbe:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <uart_print+0xb4>)
 8001cc0:	601a      	str	r2, [r3, #0]
    if (!initialized) init_uart_print(active_uart);
 8001cc2:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <uart_print+0xb8>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d104      	bne.n	8001cd4 <uart_print+0x2c>
 8001cca:	4b23      	ldr	r3, [pc, #140]	@ (8001d58 <uart_print+0xb0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff ffc2 	bl	8001c58 <init_uart_print>

    char buffer[strlen(str) + 2];
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7fe fa14 	bl	8000104 <strlen>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	1c99      	adds	r1, r3, #2
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce6:	6139      	str	r1, [r7, #16]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	0f5b      	lsrs	r3, r3, #29
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	00d2      	lsls	r2, r2, #3
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	0f5b      	lsrs	r3, r3, #29
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	00d5      	lsls	r5, r2, #3
 8001d10:	431d      	orrs	r5, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	00dc      	lsls	r4, r3, #3
 8001d16:	1dcb      	adds	r3, r1, #7
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	466a      	mov	r2, sp
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	469d      	mov	sp, r3
 8001d22:	466b      	mov	r3, sp
 8001d24:	3300      	adds	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
    snprintf(buffer, sizeof(buffer), "%s\n", str);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <uart_print+0xbc>)
 8001d2c:	6a38      	ldr	r0, [r7, #32]
 8001d2e:	f002 ff83 	bl	8004c38 <sniprintf>
    HAL_UART_Transmit(active_uart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <uart_print+0xb0>)
 8001d34:	681c      	ldr	r4, [r3, #0]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7fe f9e3 	bl	8000104 <strlen>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	2301      	movs	r3, #1
 8001d44:	425b      	negs	r3, r3
 8001d46:	6a39      	ldr	r1, [r7, #32]
 8001d48:	0020      	movs	r0, r4
 8001d4a:	f002 fa25 	bl	8004198 <HAL_UART_Transmit>
 8001d4e:	46b5      	mov	sp, r6
}
 8001d50:	46c0      	nop			@ (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b00b      	add	sp, #44	@ 0x2c
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d58:	20000114 	.word	0x20000114
 8001d5c:	2000011c 	.word	0x2000011c
 8001d60:	20000118 	.word	0x20000118
 8001d64:	080056cc 	.word	0x080056cc

08001d68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d6e:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <MX_USART2_UART_Init+0x64>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d74:	22e1      	movs	r2, #225	@ 0xe1
 8001d76:	0252      	lsls	r2, r2, #9
 8001d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <MX_USART2_UART_Init+0x60>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f002 f99a 	bl	80040ec <HAL_UART_Init>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001dbc:	f7ff fe28 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc0:	46c0      	nop			@ (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	2000011c 	.word	0x2000011c
 8001dcc:	40004400 	.word	0x40004400

08001dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b08b      	sub	sp, #44	@ 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	2414      	movs	r4, #20
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	0018      	movs	r0, r3
 8001dde:	2314      	movs	r3, #20
 8001de0:	001a      	movs	r2, r3
 8001de2:	2100      	movs	r1, #0
 8001de4:	f002 ff5e 	bl	8004ca4 <memset>
  if(uartHandle->Instance==USART2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <HAL_UART_MspInit+0x8c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d130      	bne.n	8001e54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_UART_MspInit+0x90>)
 8001df4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_UART_MspInit+0x90>)
 8001df8:	2180      	movs	r1, #128	@ 0x80
 8001dfa:	0289      	lsls	r1, r1, #10
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e00:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <HAL_UART_MspInit+0x90>)
 8001e02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_UART_MspInit+0x90>)
 8001e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <HAL_UART_MspInit+0x90>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	430a      	orrs	r2, r1
 8001e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_UART_MspInit+0x90>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001e26:	0021      	movs	r1, r4
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	2202      	movs	r2, #2
 8001e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	2201      	movs	r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	187a      	adds	r2, r7, r1
 8001e48:	23a0      	movs	r3, #160	@ 0xa0
 8001e4a:	05db      	lsls	r3, r3, #23
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 fa24 	bl	800229c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e54:	46c0      	nop			@ (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b00b      	add	sp, #44	@ 0x2c
 8001e5a:	bd90      	pop	{r4, r7, pc}
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	40021000 	.word	0x40021000

08001e64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e64:	480d      	ldr	r0, [pc, #52]	@ (8001e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e68:	f7ff fef0 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6e:	490d      	ldr	r1, [pc, #52]	@ (8001ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <LoopForever+0xe>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e84:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb0 <LoopForever+0x16>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e92:	f002 ff2b 	bl	8004cec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e96:	f7ff fd61 	bl	800195c <main>

08001e9a <LoopForever>:

LoopForever:
  b LoopForever
 8001e9a:	e7fe      	b.n	8001e9a <LoopForever>
  ldr   r0, =_estack
 8001e9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ea8:	080057cc 	.word	0x080057cc
  ldr r2, =_sbss
 8001eac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001eb0:	200002fc 	.word	0x200002fc

08001eb4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_Init+0x3c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_Init+0x3c>)
 8001eca:	2180      	movs	r1, #128	@ 0x80
 8001ecc:	0049      	lsls	r1, r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f810 	bl	8001ef8 <HAL_InitTick>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001edc:	1dfb      	adds	r3, r7, #7
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e001      	b.n	8001ee8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fe2a 	bl	8001b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	781b      	ldrb	r3, [r3, #0]
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f00:	230f      	movs	r3, #15
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <HAL_InitTick+0x88>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02b      	beq.n	8001f68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f10:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <HAL_InitTick+0x8c>)
 8001f12:	681c      	ldr	r4, [r3, #0]
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <HAL_InitTick+0x88>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	0019      	movs	r1, r3
 8001f1a:	23fa      	movs	r3, #250	@ 0xfa
 8001f1c:	0098      	lsls	r0, r3, #2
 8001f1e:	f7fe f903 	bl	8000128 <__udivsi3>
 8001f22:	0003      	movs	r3, r0
 8001f24:	0019      	movs	r1, r3
 8001f26:	0020      	movs	r0, r4
 8001f28:	f7fe f8fe 	bl	8000128 <__udivsi3>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 f93d 	bl	80021ae <HAL_SYSTICK_Config>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d112      	bne.n	8001f5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d80a      	bhi.n	8001f54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	2301      	movs	r3, #1
 8001f42:	425b      	negs	r3, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 f90c 	bl	8002164 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_InitTick+0x90>)
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e00d      	b.n	8001f70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f54:	230f      	movs	r3, #15
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e008      	b.n	8001f70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f5e:	230f      	movs	r3, #15
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e003      	b.n	8001f70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f68:	230f      	movs	r3, #15
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f70:	230f      	movs	r3, #15
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	781b      	ldrb	r3, [r3, #0]
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bd90      	pop	{r4, r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_IncTick+0x1c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	001a      	movs	r2, r3
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_IncTick+0x20>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	18d2      	adds	r2, r2, r3
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <HAL_IncTick+0x20>)
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	200001b0 	.word	0x200001b0

08001fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb4:	4b02      	ldr	r3, [pc, #8]	@ (8001fc0 <HAL_GetTick+0x10>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	200001b0 	.word	0x200001b0

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	f7ff ffe0 	bl	8001fb0 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	46c0      	nop			@ (mov r8, r8)
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	20000008 	.word	0x20000008

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	0002      	movs	r2, r0
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b7f      	cmp	r3, #127	@ 0x7f
 800201e:	d809      	bhi.n	8002034 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	001a      	movs	r2, r3
 8002026:	231f      	movs	r3, #31
 8002028:	401a      	ands	r2, r3
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <__NVIC_EnableIRQ+0x30>)
 800202c:	2101      	movs	r1, #1
 800202e:	4091      	lsls	r1, r2
 8002030:	000a      	movs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002034:	46c0      	nop			@ (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	0002      	movs	r2, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b7f      	cmp	r3, #127	@ 0x7f
 8002054:	d828      	bhi.n	80020a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002056:	4a2f      	ldr	r2, [pc, #188]	@ (8002114 <__NVIC_SetPriority+0xd4>)
 8002058:	1dfb      	adds	r3, r7, #7
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b25b      	sxtb	r3, r3
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	33c0      	adds	r3, #192	@ 0xc0
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	589b      	ldr	r3, [r3, r2]
 8002066:	1dfa      	adds	r2, r7, #7
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	0011      	movs	r1, r2
 800206c:	2203      	movs	r2, #3
 800206e:	400a      	ands	r2, r1
 8002070:	00d2      	lsls	r2, r2, #3
 8002072:	21ff      	movs	r1, #255	@ 0xff
 8002074:	4091      	lsls	r1, r2
 8002076:	000a      	movs	r2, r1
 8002078:	43d2      	mvns	r2, r2
 800207a:	401a      	ands	r2, r3
 800207c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	22ff      	movs	r2, #255	@ 0xff
 8002084:	401a      	ands	r2, r3
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	0018      	movs	r0, r3
 800208c:	2303      	movs	r3, #3
 800208e:	4003      	ands	r3, r0
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002094:	481f      	ldr	r0, [pc, #124]	@ (8002114 <__NVIC_SetPriority+0xd4>)
 8002096:	1dfb      	adds	r3, r7, #7
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b25b      	sxtb	r3, r3
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	430a      	orrs	r2, r1
 80020a0:	33c0      	adds	r3, #192	@ 0xc0
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020a6:	e031      	b.n	800210c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002118 <__NVIC_SetPriority+0xd8>)
 80020aa:	1dfb      	adds	r3, r7, #7
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	0019      	movs	r1, r3
 80020b0:	230f      	movs	r3, #15
 80020b2:	400b      	ands	r3, r1
 80020b4:	3b08      	subs	r3, #8
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3306      	adds	r3, #6
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	18d3      	adds	r3, r2, r3
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1dfa      	adds	r2, r7, #7
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	0011      	movs	r1, r2
 80020c8:	2203      	movs	r2, #3
 80020ca:	400a      	ands	r2, r1
 80020cc:	00d2      	lsls	r2, r2, #3
 80020ce:	21ff      	movs	r1, #255	@ 0xff
 80020d0:	4091      	lsls	r1, r2
 80020d2:	000a      	movs	r2, r1
 80020d4:	43d2      	mvns	r2, r2
 80020d6:	401a      	ands	r2, r3
 80020d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	22ff      	movs	r2, #255	@ 0xff
 80020e0:	401a      	ands	r2, r3
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	0018      	movs	r0, r3
 80020e8:	2303      	movs	r3, #3
 80020ea:	4003      	ands	r3, r0
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f0:	4809      	ldr	r0, [pc, #36]	@ (8002118 <__NVIC_SetPriority+0xd8>)
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	001c      	movs	r4, r3
 80020f8:	230f      	movs	r3, #15
 80020fa:	4023      	ands	r3, r4
 80020fc:	3b08      	subs	r3, #8
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	430a      	orrs	r2, r1
 8002102:	3306      	adds	r3, #6
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	18c3      	adds	r3, r0, r3
 8002108:	3304      	adds	r3, #4
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b003      	add	sp, #12
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	045b      	lsls	r3, r3, #17
 800212c:	429a      	cmp	r2, r3
 800212e:	d301      	bcc.n	8002134 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002130:	2301      	movs	r3, #1
 8002132:	e010      	b.n	8002156 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002134:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <SysTick_Config+0x44>)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	3a01      	subs	r2, #1
 800213a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213c:	2301      	movs	r3, #1
 800213e:	425b      	negs	r3, r3
 8002140:	2103      	movs	r1, #3
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff ff7c 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <SysTick_Config+0x44>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <SysTick_Config+0x44>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	210f      	movs	r1, #15
 8002170:	187b      	adds	r3, r7, r1
 8002172:	1c02      	adds	r2, r0, #0
 8002174:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	187b      	adds	r3, r7, r1
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b25b      	sxtb	r3, r3
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	0002      	movs	r2, r0
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff ff33 	bl	800200c <__NVIC_EnableIRQ>
}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7ff ffaf 	bl	800211c <SysTick_Config>
 80021be:	0003      	movs	r3, r0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	210f      	movs	r1, #15
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2225      	movs	r2, #37	@ 0x25
 80021dc:	5c9b      	ldrb	r3, [r3, r2]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d006      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2204      	movs	r2, #4
 80021e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021ea:	187b      	adds	r3, r7, r1
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e049      	b.n	8002286 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	210e      	movs	r1, #14
 80021fe:	438a      	bics	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	438a      	bics	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221c:	491d      	ldr	r1, [pc, #116]	@ (8002294 <HAL_DMA_Abort_IT+0xcc>)
 800221e:	400a      	ands	r2, r1
 8002220:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_DMA_Abort_IT+0xd0>)
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	221c      	movs	r2, #28
 800222c:	4013      	ands	r3, r2
 800222e:	2201      	movs	r2, #1
 8002230:	409a      	lsls	r2, r3
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_DMA_Abort_IT+0xd0>)
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002240:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002254:	490f      	ldr	r1, [pc, #60]	@ (8002294 <HAL_DMA_Abort_IT+0xcc>)
 8002256:	400a      	ands	r2, r1
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002262:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2225      	movs	r2, #37	@ 0x25
 8002268:	2101      	movs	r1, #1
 800226a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	@ 0x24
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	0010      	movs	r0, r2
 8002284:	4798      	blx	r3
    }
  }
  return status;
 8002286:	230f      	movs	r3, #15
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	781b      	ldrb	r3, [r3, #0]
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bd80      	pop	{r7, pc}
 8002294:	fffffeff 	.word	0xfffffeff
 8002298:	40020000 	.word	0x40020000

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022aa:	e147      	b.n	800253c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4091      	lsls	r1, r2
 80022b6:	000a      	movs	r2, r1
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <HAL_GPIO_Init+0x28>
 80022c2:	e138      	b.n	8002536 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d005      	beq.n	80022dc <HAL_GPIO_Init+0x40>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2203      	movs	r2, #3
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d130      	bne.n	800233e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	43da      	mvns	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	0013      	movs	r3, r2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002312:	2201      	movs	r2, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	2201      	movs	r2, #1
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	4013      	ands	r3, r2
 8002346:	2b03      	cmp	r3, #3
 8002348:	d017      	beq.n	800237a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	43da      	mvns	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2203      	movs	r2, #3
 8002380:	4013      	ands	r3, r2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d123      	bne.n	80023ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	58d3      	ldr	r3, [r2, r3]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2107      	movs	r1, #7
 80023b2:	400b      	ands	r3, r1
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	6939      	ldr	r1, [r7, #16]
 80023cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	43da      	mvns	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	401a      	ands	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	23c0      	movs	r3, #192	@ 0xc0
 8002408:	029b      	lsls	r3, r3, #10
 800240a:	4013      	ands	r3, r2
 800240c:	d100      	bne.n	8002410 <HAL_GPIO_Init+0x174>
 800240e:	e092      	b.n	8002536 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002410:	4a50      	ldr	r2, [pc, #320]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3318      	adds	r3, #24
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	589b      	ldr	r3, [r3, r2]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2203      	movs	r2, #3
 8002422:	4013      	ands	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	220f      	movs	r2, #15
 8002428:	409a      	lsls	r2, r3
 800242a:	0013      	movs	r3, r2
 800242c:	43da      	mvns	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	23a0      	movs	r3, #160	@ 0xa0
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	429a      	cmp	r2, r3
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x1ca>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a45      	ldr	r2, [pc, #276]	@ (8002558 <HAL_GPIO_Init+0x2bc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x1c6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a44      	ldr	r2, [pc, #272]	@ (800255c <HAL_GPIO_Init+0x2c0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x1c2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a43      	ldr	r2, [pc, #268]	@ (8002560 <HAL_GPIO_Init+0x2c4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x1be>
 8002456:	2303      	movs	r3, #3
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 800245a:	2305      	movs	r3, #5
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 8002466:	2300      	movs	r3, #0
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	2103      	movs	r1, #3
 800246c:	400a      	ands	r2, r1
 800246e:	00d2      	lsls	r2, r2, #3
 8002470:	4093      	lsls	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002478:	4936      	ldr	r1, [pc, #216]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3318      	adds	r3, #24
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002486:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43da      	mvns	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	035b      	lsls	r3, r3, #13
 800249e:	4013      	ands	r3, r2
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024b0:	4b28      	ldr	r3, [pc, #160]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	039b      	lsls	r3, r3, #14
 80024c8:	4013      	ands	r3, r2
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024da:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 80024dc:	2384      	movs	r3, #132	@ 0x84
 80024de:	58d3      	ldr	r3, [r2, r3]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	029b      	lsls	r3, r3, #10
 80024f4:	4013      	ands	r3, r2
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002500:	4914      	ldr	r1, [pc, #80]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 8002502:	2284      	movs	r2, #132	@ 0x84
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002508:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	58d3      	ldr	r3, [r2, r3]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43da      	mvns	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	2380      	movs	r3, #128	@ 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	4013      	ands	r3, r2
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800252e:	4909      	ldr	r1, [pc, #36]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 8002530:	2280      	movs	r2, #128	@ 0x80
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	40da      	lsrs	r2, r3
 8002544:	1e13      	subs	r3, r2, #0
 8002546:	d000      	beq.n	800254a <HAL_GPIO_Init+0x2ae>
 8002548:	e6b0      	b.n	80022ac <HAL_GPIO_Init+0x10>
  }
}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	46c0      	nop			@ (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b006      	add	sp, #24
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021800 	.word	0x40021800
 8002558:	50000400 	.word	0x50000400
 800255c:	50000800 	.word	0x50000800
 8002560:	50000c00 	.word	0x50000c00

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	0008      	movs	r0, r1
 800256e:	0011      	movs	r1, r2
 8002570:	1cbb      	adds	r3, r7, #2
 8002572:	1c02      	adds	r2, r0, #0
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	1c7b      	adds	r3, r7, #1
 8002578:	1c0a      	adds	r2, r1, #0
 800257a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800257c:	1c7b      	adds	r3, r7, #1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002584:	1cbb      	adds	r3, r7, #2
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800258e:	1cbb      	adds	r3, r7, #2
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	000a      	movs	r2, r1
 80025a8:	1cbb      	adds	r3, r7, #2
 80025aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b2:	1cbb      	adds	r3, r7, #2
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	041a      	lsls	r2, r3, #16
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	1cb9      	adds	r1, r7, #2
 80025c2:	8809      	ldrh	r1, [r1, #0]
 80025c4:	400b      	ands	r3, r1
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
}
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	0002      	movs	r2, r0
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	1dba      	adds	r2, r7, #6
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	4013      	ands	r3, r2
 80025ea:	d008      	beq.n	80025fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025ee:	1dba      	adds	r2, r7, #6
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80025f4:	1dbb      	adds	r3, r7, #6
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff f8e3 	bl	80017c4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	1dba      	adds	r2, r7, #6
 8002604:	8812      	ldrh	r2, [r2, #0]
 8002606:	4013      	ands	r3, r2
 8002608:	d008      	beq.n	800261c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800260c:	1dba      	adds	r2, r7, #6
 800260e:	8812      	ldrh	r2, [r2, #0]
 8002610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002612:	1dbb      	adds	r3, r7, #6
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f806 	bl	8002628 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021800 	.word	0x40021800

08002628 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	0002      	movs	r2, r0
 8002630:	1dbb      	adds	r3, r7, #6
 8002632:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a19      	ldr	r2, [pc, #100]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d11f      	bne.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	0013      	movs	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	189b      	adds	r3, r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4912      	ldr	r1, [pc, #72]	@ (80026b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800266e:	0018      	movs	r0, r3
 8002670:	f7fd fd5a 	bl	8000128 <__udivsi3>
 8002674:	0003      	movs	r3, r0
 8002676:	3301      	adds	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800267a:	e008      	b.n	800268e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3b01      	subs	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e001      	b.n	800268e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e009      	b.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	401a      	ands	r2, r3
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	429a      	cmp	r2, r3
 800269e:	d0ed      	beq.n	800267c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	40007000 	.word	0x40007000
 80026b0:	fffff9ff 	.word	0xfffff9ff
 80026b4:	20000000 	.word	0x20000000
 80026b8:	000f4240 	.word	0x000f4240

080026bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	23e0      	movs	r3, #224	@ 0xe0
 80026c6:	01db      	lsls	r3, r3, #7
 80026c8:	4013      	ands	r3, r2
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e2fe      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d100      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1e>
 80026f0:	e07c      	b.n	80027ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f2:	4bc3      	ldr	r3, [pc, #780]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2238      	movs	r2, #56	@ 0x38
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fc:	4bc0      	ldr	r3, [pc, #768]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2203      	movs	r2, #3
 8002702:	4013      	ands	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b10      	cmp	r3, #16
 800270a:	d102      	bne.n	8002712 <HAL_RCC_OscConfig+0x3e>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d002      	beq.n	8002718 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d10b      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	4bb9      	ldr	r3, [pc, #740]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	4013      	ands	r3, r2
 8002722:	d062      	beq.n	80027ea <HAL_RCC_OscConfig+0x116>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d15e      	bne.n	80027ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e2d9      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	025b      	lsls	r3, r3, #9
 8002738:	429a      	cmp	r2, r3
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x78>
 800273c:	4bb0      	ldr	r3, [pc, #704]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4baf      	ldr	r3, [pc, #700]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002742:	2180      	movs	r1, #128	@ 0x80
 8002744:	0249      	lsls	r1, r1, #9
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e020      	b.n	800278e <HAL_RCC_OscConfig+0xba>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	23a0      	movs	r3, #160	@ 0xa0
 8002752:	02db      	lsls	r3, r3, #11
 8002754:	429a      	cmp	r2, r3
 8002756:	d10e      	bne.n	8002776 <HAL_RCC_OscConfig+0xa2>
 8002758:	4ba9      	ldr	r3, [pc, #676]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4ba8      	ldr	r3, [pc, #672]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	02c9      	lsls	r1, r1, #11
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	4ba6      	ldr	r3, [pc, #664]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4ba5      	ldr	r3, [pc, #660]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800276c:	2180      	movs	r1, #128	@ 0x80
 800276e:	0249      	lsls	r1, r1, #9
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e00b      	b.n	800278e <HAL_RCC_OscConfig+0xba>
 8002776:	4ba2      	ldr	r3, [pc, #648]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4ba1      	ldr	r3, [pc, #644]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800277c:	49a1      	ldr	r1, [pc, #644]	@ (8002a04 <HAL_RCC_OscConfig+0x330>)
 800277e:	400a      	ands	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	4b9f      	ldr	r3, [pc, #636]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b9e      	ldr	r3, [pc, #632]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002788:	499f      	ldr	r1, [pc, #636]	@ (8002a08 <HAL_RCC_OscConfig+0x334>)
 800278a:	400a      	ands	r2, r1
 800278c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff fc0b 	bl	8001fb0 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff fc06 	bl	8001fb0 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e298      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	4b93      	ldr	r3, [pc, #588]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	029b      	lsls	r3, r3, #10
 80027ba:	4013      	ands	r3, r2
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0xcc>
 80027be:	e015      	b.n	80027ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff fbf6 	bl	8001fb0 <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ca:	f7ff fbf1 	bl	8001fb0 <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	@ 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e283      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027dc:	4b88      	ldr	r3, [pc, #544]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	4013      	ands	r3, r2
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0xf6>
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2202      	movs	r2, #2
 80027f2:	4013      	ands	r3, r2
 80027f4:	d100      	bne.n	80027f8 <HAL_RCC_OscConfig+0x124>
 80027f6:	e099      	b.n	800292c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f8:	4b81      	ldr	r3, [pc, #516]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2238      	movs	r2, #56	@ 0x38
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002802:	4b7f      	ldr	r3, [pc, #508]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2203      	movs	r2, #3
 8002808:	4013      	ands	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b10      	cmp	r3, #16
 8002810:	d102      	bne.n	8002818 <HAL_RCC_OscConfig+0x144>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d002      	beq.n	800281e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d135      	bne.n	800288a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281e:	4b78      	ldr	r3, [pc, #480]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4013      	ands	r3, r2
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x162>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e256      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b72      	ldr	r3, [pc, #456]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a74      	ldr	r2, [pc, #464]	@ (8002a0c <HAL_RCC_OscConfig+0x338>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	021a      	lsls	r2, r3, #8
 8002846:	4b6e      	ldr	r3, [pc, #440]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d112      	bne.n	8002878 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002852:	4b6b      	ldr	r3, [pc, #428]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6e      	ldr	r2, [pc, #440]	@ (8002a10 <HAL_RCC_OscConfig+0x33c>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	4b67      	ldr	r3, [pc, #412]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002866:	4b66      	ldr	r3, [pc, #408]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	0adb      	lsrs	r3, r3, #11
 800286c:	2207      	movs	r2, #7
 800286e:	4013      	ands	r3, r2
 8002870:	4a68      	ldr	r2, [pc, #416]	@ (8002a14 <HAL_RCC_OscConfig+0x340>)
 8002872:	40da      	lsrs	r2, r3
 8002874:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <HAL_RCC_OscConfig+0x344>)
 8002876:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002878:	4b68      	ldr	r3, [pc, #416]	@ (8002a1c <HAL_RCC_OscConfig+0x348>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0018      	movs	r0, r3
 800287e:	f7ff fb3b 	bl	8001ef8 <HAL_InitTick>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d051      	beq.n	800292a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e22c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d030      	beq.n	80028f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002892:	4b5b      	ldr	r3, [pc, #364]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5e      	ldr	r2, [pc, #376]	@ (8002a10 <HAL_RCC_OscConfig+0x33c>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	4b57      	ldr	r3, [pc, #348]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028a6:	4b56      	ldr	r3, [pc, #344]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b55      	ldr	r3, [pc, #340]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028ac:	2180      	movs	r1, #128	@ 0x80
 80028ae:	0049      	lsls	r1, r1, #1
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff fb7c 	bl	8001fb0 <HAL_GetTick>
 80028b8:	0003      	movs	r3, r0
 80028ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7ff fb77 	bl	8001fb0 <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e209      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4013      	ands	r3, r2
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b48      	ldr	r3, [pc, #288]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a4a      	ldr	r2, [pc, #296]	@ (8002a0c <HAL_RCC_OscConfig+0x338>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	4b44      	ldr	r3, [pc, #272]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e01b      	b.n	800292c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028f4:	4b42      	ldr	r3, [pc, #264]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b41      	ldr	r3, [pc, #260]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80028fa:	4949      	ldr	r1, [pc, #292]	@ (8002a20 <HAL_RCC_OscConfig+0x34c>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff fb56 	bl	8001fb0 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7ff fb51 	bl	8001fb0 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1e3      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800291c:	4b38      	ldr	r3, [pc, #224]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4013      	ands	r3, r2
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x236>
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2208      	movs	r2, #8
 8002932:	4013      	ands	r3, r2
 8002934:	d047      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002936:	4b32      	ldr	r3, [pc, #200]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2238      	movs	r2, #56	@ 0x38
 800293c:	4013      	ands	r3, r2
 800293e:	2b18      	cmp	r3, #24
 8002940:	d10a      	bne.n	8002958 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002942:	4b2f      	ldr	r3, [pc, #188]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002946:	2202      	movs	r2, #2
 8002948:	4013      	ands	r3, r2
 800294a:	d03c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d138      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e1c5      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d019      	beq.n	8002994 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002962:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002964:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002966:	2101      	movs	r1, #1
 8002968:	430a      	orrs	r2, r1
 800296a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7ff fb20 	bl	8001fb0 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002976:	f7ff fb1b 	bl	8001fb0 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1ad      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800298a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d0f1      	beq.n	8002976 <HAL_RCC_OscConfig+0x2a2>
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002994:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 8002996:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff fb06 	bl	8001fb0 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7ff fb01 	bl	8001fb0 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e193      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029bc:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80029be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1f1      	bne.n	80029aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4013      	ands	r3, r2
 80029ce:	d100      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2fe>
 80029d0:	e0c6      	b.n	8002b60 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	231f      	movs	r3, #31
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029da:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2238      	movs	r2, #56	@ 0x38
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d11e      	bne.n	8002a24 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_RCC_OscConfig+0x32c>)
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x31e>
 80029f0:	e0b6      	b.n	8002b60 <HAL_RCC_OscConfig+0x48c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d000      	beq.n	80029fc <HAL_RCC_OscConfig+0x328>
 80029fa:	e0b1      	b.n	8002b60 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e171      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	fffeffff 	.word	0xfffeffff
 8002a08:	fffbffff 	.word	0xfffbffff
 8002a0c:	ffff80ff 	.word	0xffff80ff
 8002a10:	ffffc7ff 	.word	0xffffc7ff
 8002a14:	00f42400 	.word	0x00f42400
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a24:	4bb1      	ldr	r3, [pc, #708]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_OscConfig+0x360>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x362>
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d011      	beq.n	8002a5e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4bac      	ldr	r3, [pc, #688]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002a3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a3e:	4bab      	ldr	r3, [pc, #684]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002a40:	2180      	movs	r1, #128	@ 0x80
 8002a42:	0549      	lsls	r1, r1, #21
 8002a44:	430a      	orrs	r2, r1
 8002a46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a48:	4ba8      	ldr	r3, [pc, #672]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a4c:	2380      	movs	r3, #128	@ 0x80
 8002a4e:	055b      	lsls	r3, r3, #21
 8002a50:	4013      	ands	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a56:	231f      	movs	r3, #31
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	4ba4      	ldr	r3, [pc, #656]	@ (8002cf0 <HAL_RCC_OscConfig+0x61c>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4013      	ands	r3, r2
 8002a68:	d11a      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6a:	4ba1      	ldr	r3, [pc, #644]	@ (8002cf0 <HAL_RCC_OscConfig+0x61c>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4ba0      	ldr	r3, [pc, #640]	@ (8002cf0 <HAL_RCC_OscConfig+0x61c>)
 8002a70:	2180      	movs	r1, #128	@ 0x80
 8002a72:	0049      	lsls	r1, r1, #1
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a78:	f7ff fa9a 	bl	8001fb0 <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a82:	f7ff fa95 	bl	8001fb0 <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e127      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	4b96      	ldr	r3, [pc, #600]	@ (8002cf0 <HAL_RCC_OscConfig+0x61c>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3e2>
 8002aa8:	4b90      	ldr	r3, [pc, #576]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002aaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aac:	4b8f      	ldr	r3, [pc, #572]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCC_OscConfig+0x41c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x404>
 8002abe:	4b8b      	ldr	r3, [pc, #556]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002ac0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ac2:	4b8a      	ldr	r3, [pc, #552]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aca:	4b88      	ldr	r3, [pc, #544]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002acc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ace:	4b87      	ldr	r3, [pc, #540]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0x41c>
 8002ad8:	4b84      	ldr	r3, [pc, #528]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002ada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002adc:	4b83      	ldr	r3, [pc, #524]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ae4:	4b81      	ldr	r3, [pc, #516]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002ae6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae8:	4b80      	ldr	r3, [pc, #512]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002aea:	2104      	movs	r1, #4
 8002aec:	438a      	bics	r2, r1
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff fa5a 	bl	8001fb0 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b00:	e009      	b.n	8002b16 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7ff fa55 	bl	8001fb0 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	4a79      	ldr	r2, [pc, #484]	@ (8002cf4 <HAL_RCC_OscConfig+0x620>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0e6      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b16:	4b75      	ldr	r3, [pc, #468]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x42e>
 8002b20:	e013      	b.n	8002b4a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7ff fa45 	bl	8001fb0 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b2a:	e009      	b.n	8002b40 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fa40 	bl	8001fb0 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf4 <HAL_RCC_OscConfig+0x620>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0d1      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b40:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b4a:	231f      	movs	r3, #31
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b54:	4b65      	ldr	r3, [pc, #404]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b58:	4b64      	ldr	r3, [pc, #400]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002b5a:	4967      	ldr	r1, [pc, #412]	@ (8002cf8 <HAL_RCC_OscConfig+0x624>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d100      	bne.n	8002b6a <HAL_RCC_OscConfig+0x496>
 8002b68:	e0bb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6a:	4b60      	ldr	r3, [pc, #384]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2238      	movs	r2, #56	@ 0x38
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d100      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4a4>
 8002b76:	e07b      	b.n	8002c70 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d156      	bne.n	8002c2e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b5a      	ldr	r3, [pc, #360]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002b86:	495d      	ldr	r1, [pc, #372]	@ (8002cfc <HAL_RCC_OscConfig+0x628>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fa10 	bl	8001fb0 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7ff fa0b 	bl	8001fb0 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e09d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	4b50      	ldr	r3, [pc, #320]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	049b      	lsls	r3, r3, #18
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a51      	ldr	r2, [pc, #324]	@ (8002d00 <HAL_RCC_OscConfig+0x62c>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1a      	ldr	r2, [r3, #32]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be0:	431a      	orrs	r2, r3
 8002be2:	4b42      	ldr	r3, [pc, #264]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be8:	4b40      	ldr	r3, [pc, #256]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b3f      	ldr	r3, [pc, #252]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	0449      	lsls	r1, r1, #17
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002bfc:	2180      	movs	r1, #128	@ 0x80
 8002bfe:	0549      	lsls	r1, r1, #21
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7ff f9d4 	bl	8001fb0 <HAL_GetTick>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7ff f9cf 	bl	8001fb0 <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e061      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c20:	4b32      	ldr	r3, [pc, #200]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	049b      	lsls	r3, r3, #18
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x53a>
 8002c2c:	e059      	b.n	8002ce2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b2e      	ldr	r3, [pc, #184]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002c34:	4931      	ldr	r1, [pc, #196]	@ (8002cfc <HAL_RCC_OscConfig+0x628>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7ff f9b9 	bl	8001fb0 <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7ff f9b4 	bl	8001fb0 <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e046      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	4b25      	ldr	r3, [pc, #148]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	049b      	lsls	r3, r3, #18
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c62:	4b22      	ldr	r3, [pc, #136]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002c68:	4926      	ldr	r1, [pc, #152]	@ (8002d04 <HAL_RCC_OscConfig+0x630>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	e038      	b.n	8002ce2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e033      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x618>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2203      	movs	r2, #3
 8002c86:	401a      	ands	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d126      	bne.n	8002cde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2270      	movs	r2, #112	@ 0x70
 8002c94:	401a      	ands	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d11f      	bne.n	8002cde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	23fe      	movs	r3, #254	@ 0xfe
 8002ca2:	01db      	lsls	r3, r3, #7
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d116      	bne.n	8002cde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	23f8      	movs	r3, #248	@ 0xf8
 8002cb4:	039b      	lsls	r3, r3, #14
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d10e      	bne.n	8002cde <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	23e0      	movs	r3, #224	@ 0xe0
 8002cc4:	051b      	lsls	r3, r3, #20
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	0f5b      	lsrs	r3, r3, #29
 8002cd4:	075a      	lsls	r2, r3, #29
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b008      	add	sp, #32
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	00001388 	.word	0x00001388
 8002cf8:	efffffff 	.word	0xefffffff
 8002cfc:	feffffff 	.word	0xfeffffff
 8002d00:	11c1808c 	.word	0x11c1808c
 8002d04:	eefefffc 	.word	0xeefefffc

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0e9      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b76      	ldr	r3, [pc, #472]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2207      	movs	r2, #7
 8002d22:	4013      	ands	r3, r2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d91e      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b73      	ldr	r3, [pc, #460]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2207      	movs	r2, #7
 8002d30:	4393      	bics	r3, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	4b70      	ldr	r3, [pc, #448]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d3c:	f7ff f938 	bl	8001fb0 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d44:	e009      	b.n	8002d5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7ff f933 	bl	8001fb0 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4a6a      	ldr	r2, [pc, #424]	@ (8002efc <HAL_RCC_ClockConfig+0x1f4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0ca      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d5a:	4b67      	ldr	r3, [pc, #412]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2207      	movs	r2, #7
 8002d60:	4013      	ands	r3, r2
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d015      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d006      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d7c:	4b60      	ldr	r3, [pc, #384]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b5f      	ldr	r3, [pc, #380]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002d82:	21e0      	movs	r1, #224	@ 0xe0
 8002d84:	01c9      	lsls	r1, r1, #7
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002f04 <HAL_RCC_ClockConfig+0x1fc>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	4b59      	ldr	r3, [pc, #356]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	d057      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db0:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	4013      	ands	r3, r2
 8002dba:	d12b      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e097      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	049b      	lsls	r3, r3, #18
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d11f      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e08b      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de0:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4013      	ands	r3, r2
 8002dea:	d113      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e07f      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df8:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d108      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e074      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e06:	4b3e      	ldr	r3, [pc, #248]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e06d      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e14:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2207      	movs	r2, #7
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7ff f8c2 	bl	8001fb0 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e32:	f7ff f8bd 	bl	8001fb0 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <HAL_RCC_ClockConfig+0x1f4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e054      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2e      	ldr	r3, [pc, #184]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2238      	movs	r2, #56	@ 0x38
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1ec      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b27      	ldr	r3, [pc, #156]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	4013      	ands	r3, r2
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d21e      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	4b21      	ldr	r3, [pc, #132]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e78:	f7ff f89a 	bl	8001fb0 <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e80:	e009      	b.n	8002e96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e82:	f7ff f895 	bl	8001fb0 <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002efc <HAL_RCC_ClockConfig+0x1f4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e02c      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1ee      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eae:	4b14      	ldr	r3, [pc, #80]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a15      	ldr	r2, [pc, #84]	@ (8002f08 <HAL_RCC_ClockConfig+0x200>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ec2:	f000 f829 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ec6:	0001      	movs	r1, r0
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	220f      	movs	r2, #15
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <HAL_RCC_ClockConfig+0x204>)
 8002ed4:	0092      	lsls	r2, r2, #2
 8002ed6:	58d3      	ldr	r3, [r2, r3]
 8002ed8:	221f      	movs	r2, #31
 8002eda:	4013      	ands	r3, r2
 8002edc:	000a      	movs	r2, r1
 8002ede:	40da      	lsrs	r2, r3
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_ClockConfig+0x208>)
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_RCC_ClockConfig+0x20c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7ff f805 	bl	8001ef8 <HAL_InitTick>
 8002eee:	0003      	movs	r3, r0
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b004      	add	sp, #16
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	00001388 	.word	0x00001388
 8002f00:	40021000 	.word	0x40021000
 8002f04:	fffff0ff 	.word	0xfffff0ff
 8002f08:	ffff8fff 	.word	0xffff8fff
 8002f0c:	08005710 	.word	0x08005710
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2238      	movs	r2, #56	@ 0x38
 8002f24:	4013      	ands	r3, r2
 8002f26:	d10f      	bne.n	8002f48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0adb      	lsrs	r3, r3, #11
 8002f2e:	2207      	movs	r2, #7
 8002f30:	4013      	ands	r3, r2
 8002f32:	2201      	movs	r2, #1
 8002f34:	409a      	lsls	r2, r3
 8002f36:	0013      	movs	r3, r2
 8002f38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	4835      	ldr	r0, [pc, #212]	@ (8003014 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f3e:	f7fd f8f3 	bl	8000128 <__udivsi3>
 8002f42:	0003      	movs	r3, r0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e05d      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f48:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2238      	movs	r2, #56	@ 0x38
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e054      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2238      	movs	r2, #56	@ 0x38
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d138      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f66:	4b2a      	ldr	r3, [pc, #168]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f70:	4b27      	ldr	r3, [pc, #156]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	2207      	movs	r2, #7
 8002f78:	4013      	ands	r3, r2
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4824      	ldr	r0, [pc, #144]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f88:	f7fd f8ce 	bl	8000128 <__udivsi3>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	227f      	movs	r2, #127	@ 0x7f
 8002f98:	4013      	ands	r3, r2
 8002f9a:	434b      	muls	r3, r1
 8002f9c:	617b      	str	r3, [r7, #20]
        break;
 8002f9e:	e00d      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	481c      	ldr	r0, [pc, #112]	@ (8003014 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fa4:	f7fd f8c0 	bl	8000128 <__udivsi3>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	0019      	movs	r1, r3
 8002fac:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	227f      	movs	r2, #127	@ 0x7f
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	434b      	muls	r3, r1
 8002fb8:	617b      	str	r3, [r7, #20]
        break;
 8002fba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fbc:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0f5b      	lsrs	r3, r3, #29
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	6978      	ldr	r0, [r7, #20]
 8002fce:	f7fd f8ab 	bl	8000128 <__udivsi3>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	e015      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2238      	movs	r2, #56	@ 0x38
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d103      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fec:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2238      	movs	r2, #56	@ 0x38
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b18      	cmp	r3, #24
 8002ff6:	d103      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ff8:	23fa      	movs	r3, #250	@ 0xfa
 8002ffa:	01db      	lsls	r3, r3, #7
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e001      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003004:	693b      	ldr	r3, [r7, #16]
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b006      	add	sp, #24
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	40021000 	.word	0x40021000
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200

0800301c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b02      	ldr	r3, [pc, #8]	@ (800302c <HAL_RCC_GetHCLKFreq+0x10>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	20000000 	.word	0x20000000

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003034:	f7ff fff2 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003038:	0004      	movs	r4, r0
 800303a:	f7ff fb3f 	bl	80026bc <LL_RCC_GetAPB1Prescaler>
 800303e:	0003      	movs	r3, r0
 8003040:	0b1a      	lsrs	r2, r3, #12
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	58d3      	ldr	r3, [r2, r3]
 8003048:	221f      	movs	r2, #31
 800304a:	4013      	ands	r3, r2
 800304c:	40dc      	lsrs	r4, r3
 800304e:	0023      	movs	r3, r4
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	bdb0      	pop	{r4, r5, r7, pc}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	08005750 	.word	0x08005750

0800305c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0a8      	b.n	80031c0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	2382      	movs	r3, #130	@ 0x82
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	429a      	cmp	r2, r3
 8003080:	d009      	beq.n	8003096 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	61da      	str	r2, [r3, #28]
 8003088:	e005      	b.n	8003096 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	225d      	movs	r2, #93	@ 0x5d
 80030a0:	5c9b      	ldrb	r3, [r3, r2]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	225c      	movs	r2, #92	@ 0x5c
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7fe fcf0 	bl	8001a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	225d      	movs	r2, #93	@ 0x5d
 80030bc:	2102      	movs	r1, #2
 80030be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2140      	movs	r1, #64	@ 0x40
 80030cc:	438a      	bics	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	23e0      	movs	r3, #224	@ 0xe0
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	429a      	cmp	r2, r3
 80030da:	d902      	bls.n	80030e2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e002      	b.n	80030e8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	015b      	lsls	r3, r3, #5
 80030e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	23f0      	movs	r3, #240	@ 0xf0
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d008      	beq.n	8003106 <HAL_SPI_Init+0xaa>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	23e0      	movs	r3, #224	@ 0xe0
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	2382      	movs	r3, #130	@ 0x82
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	401a      	ands	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	2384      	movs	r3, #132	@ 0x84
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	400b      	ands	r3, r1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2102      	movs	r1, #2
 8003122:	400b      	ands	r3, r1
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2101      	movs	r1, #1
 800312c:	400b      	ands	r3, r1
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6999      	ldr	r1, [r3, #24]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	400b      	ands	r3, r1
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2138      	movs	r1, #56	@ 0x38
 8003142:	400b      	ands	r3, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2180      	movs	r1, #128	@ 0x80
 800314c:	400b      	ands	r3, r1
 800314e:	431a      	orrs	r2, r3
 8003150:	0011      	movs	r1, r2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003156:	2380      	movs	r3, #128	@ 0x80
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	401a      	ands	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	2204      	movs	r2, #4
 800316c:	401a      	ands	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	2110      	movs	r1, #16
 8003174:	400b      	ands	r3, r1
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317c:	2108      	movs	r1, #8
 800317e:	400b      	ands	r3, r1
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	23f0      	movs	r3, #240	@ 0xf0
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	400b      	ands	r3, r1
 800318c:	431a      	orrs	r2, r3
 800318e:	0011      	movs	r1, r2
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	015b      	lsls	r3, r3, #5
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4907      	ldr	r1, [pc, #28]	@ (80031c8 <HAL_SPI_Init+0x16c>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	225d      	movs	r2, #93	@ 0x5d
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b004      	add	sp, #16
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	fffff7ff 	.word	0xfffff7ff

080031cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	1dbb      	adds	r3, r7, #6
 80031da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031dc:	231f      	movs	r3, #31
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	225c      	movs	r2, #92	@ 0x5c
 80031e8:	5c9b      	ldrb	r3, [r3, r2]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_SPI_Transmit+0x26>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e147      	b.n	8003482 <HAL_SPI_Transmit+0x2b6>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	225c      	movs	r2, #92	@ 0x5c
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031fa:	f7fe fed9 	bl	8001fb0 <HAL_GetTick>
 80031fe:	0003      	movs	r3, r0
 8003200:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003202:	2316      	movs	r3, #22
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	1dba      	adds	r2, r7, #6
 8003208:	8812      	ldrh	r2, [r2, #0]
 800320a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	225d      	movs	r2, #93	@ 0x5d
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d004      	beq.n	8003222 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003218:	231f      	movs	r3, #31
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003220:	e128      	b.n	8003474 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_SPI_Transmit+0x64>
 8003228:	1dbb      	adds	r3, r7, #6
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003230:	231f      	movs	r3, #31
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
    goto error;
 8003238:	e11c      	b.n	8003474 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	225d      	movs	r2, #93	@ 0x5d
 800323e:	2103      	movs	r1, #3
 8003240:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1dba      	adds	r2, r7, #6
 8003252:	8812      	ldrh	r2, [r2, #0]
 8003254:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1dba      	adds	r2, r7, #6
 800325a:	8812      	ldrh	r2, [r2, #0]
 800325c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2244      	movs	r2, #68	@ 0x44
 8003268:	2100      	movs	r1, #0
 800326a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2246      	movs	r2, #70	@ 0x46
 8003270:	2100      	movs	r1, #0
 8003272:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	429a      	cmp	r2, r3
 800328a:	d110      	bne.n	80032ae <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2140      	movs	r1, #64	@ 0x40
 8003298:	438a      	bics	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	01c9      	lsls	r1, r1, #7
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2240      	movs	r2, #64	@ 0x40
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d007      	beq.n	80032cc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2140      	movs	r1, #64	@ 0x40
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	23e0      	movs	r3, #224	@ 0xe0
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d952      	bls.n	800337e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_SPI_Transmit+0x11e>
 80032e0:	2316      	movs	r3, #22
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d143      	bne.n	8003372 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ee:	881a      	ldrh	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fa:	1c9a      	adds	r2, r3, #2
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800330e:	e030      	b.n	8003372 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2202      	movs	r2, #2
 8003318:	4013      	ands	r3, r2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d112      	bne.n	8003344 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332e:	1c9a      	adds	r2, r3, #2
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003342:	e016      	b.n	8003372 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003344:	f7fe fe34 	bl	8001fb0 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d802      	bhi.n	800335a <HAL_SPI_Transmit+0x18e>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	3301      	adds	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_SPI_Transmit+0x194>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003360:	231f      	movs	r3, #31
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	2203      	movs	r2, #3
 8003366:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	225d      	movs	r2, #93	@ 0x5d
 800336c:	2101      	movs	r1, #1
 800336e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003370:	e080      	b.n	8003474 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1c9      	bne.n	8003310 <HAL_SPI_Transmit+0x144>
 800337c:	e053      	b.n	8003426 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_SPI_Transmit+0x1c4>
 8003386:	2316      	movs	r3, #22
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d145      	bne.n	800341c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80033b6:	e031      	b.n	800341c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2202      	movs	r2, #2
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d113      	bne.n	80033ee <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033ec:	e016      	b.n	800341c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ee:	f7fe fddf 	bl	8001fb0 <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d802      	bhi.n	8003404 <HAL_SPI_Transmit+0x238>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	d102      	bne.n	800340a <HAL_SPI_Transmit+0x23e>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800340a:	231f      	movs	r3, #31
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2203      	movs	r2, #3
 8003410:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	225d      	movs	r2, #93	@ 0x5d
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]
          goto error;
 800341a:	e02b      	b.n	8003474 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1c8      	bne.n	80033b8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 fe17 	bl	8004060 <SPI_EndRxTxTransaction>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d002      	beq.n	800343c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003462:	231f      	movs	r3, #31
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e003      	b.n	8003474 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	225d      	movs	r2, #93	@ 0x5d
 8003470:	2101      	movs	r1, #1
 8003472:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	225c      	movs	r2, #92	@ 0x5c
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800347c:	231f      	movs	r3, #31
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	781b      	ldrb	r3, [r3, #0]
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b008      	add	sp, #32
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	1dbb      	adds	r3, r7, #6
 800349a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800349c:	2117      	movs	r1, #23
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	225d      	movs	r2, #93	@ 0x5d
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d003      	beq.n	80034b8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2202      	movs	r2, #2
 80034b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80034b6:	e12b      	b.n	8003710 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	2382      	movs	r3, #130	@ 0x82
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d113      	bne.n	80034ec <HAL_SPI_Receive+0x60>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	225d      	movs	r2, #93	@ 0x5d
 80034d0:	2104      	movs	r1, #4
 80034d2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034d4:	1dbb      	adds	r3, r7, #6
 80034d6:	881c      	ldrh	r4, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	0023      	movs	r3, r4
 80034e4:	f000 f924 	bl	8003730 <HAL_SPI_TransmitReceive>
 80034e8:	0003      	movs	r3, r0
 80034ea:	e118      	b.n	800371e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	225c      	movs	r2, #92	@ 0x5c
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_SPI_Receive+0x6e>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e111      	b.n	800371e <HAL_SPI_Receive+0x292>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	225c      	movs	r2, #92	@ 0x5c
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003502:	f7fe fd55 	bl	8001fb0 <HAL_GetTick>
 8003506:	0003      	movs	r3, r0
 8003508:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_SPI_Receive+0x8c>
 8003510:	1dbb      	adds	r3, r7, #6
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003518:	2317      	movs	r3, #23
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003520:	e0f6      	b.n	8003710 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	225d      	movs	r2, #93	@ 0x5d
 8003526:	2104      	movs	r1, #4
 8003528:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1dba      	adds	r2, r7, #6
 800353a:	2144      	movs	r1, #68	@ 0x44
 800353c:	8812      	ldrh	r2, [r2, #0]
 800353e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1dba      	adds	r2, r7, #6
 8003544:	2146      	movs	r1, #70	@ 0x46
 8003546:	8812      	ldrh	r2, [r2, #0]
 8003548:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	23e0      	movs	r3, #224	@ 0xe0
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	429a      	cmp	r2, r3
 8003572:	d908      	bls.n	8003586 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	496a      	ldr	r1, [pc, #424]	@ (8003728 <HAL_SPI_Receive+0x29c>)
 8003580:	400a      	ands	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	e008      	b.n	8003598 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2180      	movs	r1, #128	@ 0x80
 8003592:	0149      	lsls	r1, r1, #5
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d10f      	bne.n	80035c4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2140      	movs	r1, #64	@ 0x40
 80035b0:	438a      	bics	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	495b      	ldr	r1, [pc, #364]	@ (800372c <HAL_SPI_Receive+0x2a0>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2240      	movs	r2, #64	@ 0x40
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b40      	cmp	r3, #64	@ 0x40
 80035d0:	d007      	beq.n	80035e2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2140      	movs	r1, #64	@ 0x40
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	23e0      	movs	r3, #224	@ 0xe0
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d900      	bls.n	80035f0 <HAL_SPI_Receive+0x164>
 80035ee:	e071      	b.n	80036d4 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035f0:	e035      	b.n	800365e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d117      	bne.n	8003630 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	001a      	movs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2246      	movs	r2, #70	@ 0x46
 8003620:	5a9b      	ldrh	r3, [r3, r2]
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b299      	uxth	r1, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2246      	movs	r2, #70	@ 0x46
 800362c:	5299      	strh	r1, [r3, r2]
 800362e:	e016      	b.n	800365e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003630:	f7fe fcbe 	bl	8001fb0 <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d802      	bhi.n	8003646 <HAL_SPI_Receive+0x1ba>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_SPI_Receive+0x1c0>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d108      	bne.n	800365e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800364c:	2317      	movs	r3, #23
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2203      	movs	r2, #3
 8003652:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	225d      	movs	r2, #93	@ 0x5d
 8003658:	2101      	movs	r1, #1
 800365a:	5499      	strb	r1, [r3, r2]
          goto error;
 800365c:	e058      	b.n	8003710 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2246      	movs	r2, #70	@ 0x46
 8003662:	5a9b      	ldrh	r3, [r3, r2]
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1c3      	bne.n	80035f2 <HAL_SPI_Receive+0x166>
 800366a:	e039      	b.n	80036e0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	2b01      	cmp	r3, #1
 8003678:	d115      	bne.n	80036a6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	b292      	uxth	r2, r2
 8003686:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2246      	movs	r2, #70	@ 0x46
 8003696:	5a9b      	ldrh	r3, [r3, r2]
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b299      	uxth	r1, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2246      	movs	r2, #70	@ 0x46
 80036a2:	5299      	strh	r1, [r3, r2]
 80036a4:	e016      	b.n	80036d4 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a6:	f7fe fc83 	bl	8001fb0 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d802      	bhi.n	80036bc <HAL_SPI_Receive+0x230>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Receive+0x236>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80036c2:	2317      	movs	r3, #23
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	2203      	movs	r2, #3
 80036c8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	225d      	movs	r2, #93	@ 0x5d
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
          goto error;
 80036d2:	e01d      	b.n	8003710 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2246      	movs	r2, #70	@ 0x46
 80036d8:	5a9b      	ldrh	r3, [r3, r2]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1c5      	bne.n	800366c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 fc5c 	bl	8003fa4 <SPI_EndRxTransaction>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80036fe:	2317      	movs	r3, #23
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e003      	b.n	8003710 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	225d      	movs	r2, #93	@ 0x5d
 800370c:	2101      	movs	r1, #1
 800370e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	225c      	movs	r2, #92	@ 0x5c
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003718:	2317      	movs	r3, #23
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	781b      	ldrb	r3, [r3, #0]
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b007      	add	sp, #28
 8003724:	bd90      	pop	{r4, r7, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	ffffefff 	.word	0xffffefff
 800372c:	ffffbfff 	.word	0xffffbfff

08003730 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	@ 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	001a      	movs	r2, r3
 800373e:	1cbb      	adds	r3, r7, #2
 8003740:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003742:	2301      	movs	r3, #1
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003746:	2323      	movs	r3, #35	@ 0x23
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	225c      	movs	r2, #92	@ 0x5c
 8003752:	5c9b      	ldrb	r3, [r3, r2]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_SPI_TransmitReceive+0x2c>
 8003758:	2302      	movs	r3, #2
 800375a:	e1c4      	b.n	8003ae6 <HAL_SPI_TransmitReceive+0x3b6>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	225c      	movs	r2, #92	@ 0x5c
 8003760:	2101      	movs	r1, #1
 8003762:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003764:	f7fe fc24 	bl	8001fb0 <HAL_GetTick>
 8003768:	0003      	movs	r3, r0
 800376a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800376c:	201b      	movs	r0, #27
 800376e:	183b      	adds	r3, r7, r0
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	215d      	movs	r1, #93	@ 0x5d
 8003774:	5c52      	ldrb	r2, [r2, r1]
 8003776:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800377e:	2312      	movs	r3, #18
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	1cba      	adds	r2, r7, #2
 8003784:	8812      	ldrh	r2, [r2, #0]
 8003786:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003788:	183b      	adds	r3, r7, r0
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d011      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x84>
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	2382      	movs	r3, #130	@ 0x82
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	429a      	cmp	r2, r3
 8003798:	d107      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x7a>
 80037a2:	183b      	adds	r3, r7, r0
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d004      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80037aa:	2323      	movs	r3, #35	@ 0x23
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	2202      	movs	r2, #2
 80037b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80037b2:	e191      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x98>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x98>
 80037c0:	1cbb      	adds	r3, r7, #2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80037c8:	2323      	movs	r3, #35	@ 0x23
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80037d0:	e182      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	225d      	movs	r2, #93	@ 0x5d
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d003      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	225d      	movs	r2, #93	@ 0x5d
 80037e2:	2105      	movs	r1, #5
 80037e4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1cba      	adds	r2, r7, #2
 80037f6:	2146      	movs	r1, #70	@ 0x46
 80037f8:	8812      	ldrh	r2, [r2, #0]
 80037fa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1cba      	adds	r2, r7, #2
 8003800:	2144      	movs	r1, #68	@ 0x44
 8003802:	8812      	ldrh	r2, [r2, #0]
 8003804:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1cba      	adds	r2, r7, #2
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1cba      	adds	r2, r7, #2
 8003818:	8812      	ldrh	r2, [r2, #0]
 800381a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	23e0      	movs	r3, #224	@ 0xe0
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	429a      	cmp	r2, r3
 8003832:	d908      	bls.n	8003846 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	49ac      	ldr	r1, [pc, #688]	@ (8003af0 <HAL_SPI_TransmitReceive+0x3c0>)
 8003840:	400a      	ands	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	e008      	b.n	8003858 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2180      	movs	r1, #128	@ 0x80
 8003852:	0149      	lsls	r1, r1, #5
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2240      	movs	r2, #64	@ 0x40
 8003860:	4013      	ands	r3, r2
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d007      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2140      	movs	r1, #64	@ 0x40
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	23e0      	movs	r3, #224	@ 0xe0
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	429a      	cmp	r2, r3
 8003880:	d800      	bhi.n	8003884 <HAL_SPI_TransmitReceive+0x154>
 8003882:	e083      	b.n	800398c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x168>
 800388c:	2312      	movs	r3, #18
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d000      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x168>
 8003896:	e06d      	b.n	8003974 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038bc:	e05a      	b.n	8003974 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2202      	movs	r2, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11b      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x1d4>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x1d4>
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d113      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	881a      	ldrh	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	2b01      	cmp	r3, #1
 8003910:	d11c      	bne.n	800394c <HAL_SPI_TransmitReceive+0x21c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2246      	movs	r2, #70	@ 0x46
 8003916:	5a9b      	ldrh	r3, [r3, r2]
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	b292      	uxth	r2, r2
 800392a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003930:	1c9a      	adds	r2, r3, #2
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2246      	movs	r2, #70	@ 0x46
 800393a:	5a9b      	ldrh	r3, [r3, r2]
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b299      	uxth	r1, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2246      	movs	r2, #70	@ 0x46
 8003946:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003948:	2301      	movs	r3, #1
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800394c:	f7fe fb30 	bl	8001fb0 <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003958:	429a      	cmp	r2, r3
 800395a:	d80b      	bhi.n	8003974 <HAL_SPI_TransmitReceive+0x244>
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	3301      	adds	r3, #1
 8003960:	d008      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003962:	2323      	movs	r3, #35	@ 0x23
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	2203      	movs	r2, #3
 8003968:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	225d      	movs	r2, #93	@ 0x5d
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]
        goto error;
 8003972:	e0b1      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d19f      	bne.n	80038be <HAL_SPI_TransmitReceive+0x18e>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2246      	movs	r2, #70	@ 0x46
 8003982:	5a9b      	ldrh	r3, [r3, r2]
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d199      	bne.n	80038be <HAL_SPI_TransmitReceive+0x18e>
 800398a:	e089      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x270>
 8003994:	2312      	movs	r3, #18
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d000      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x270>
 800399e:	e074      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c6:	e060      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d11c      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x2e0>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d017      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x2e0>
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d114      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2201      	movs	r2, #1
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d11e      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x32c>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2246      	movs	r2, #70	@ 0x46
 8003a22:	5a9b      	ldrh	r3, [r3, r2]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	001a      	movs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2246      	movs	r2, #70	@ 0x46
 8003a4a:	5a9b      	ldrh	r3, [r3, r2]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b299      	uxth	r1, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2246      	movs	r2, #70	@ 0x46
 8003a56:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a5c:	f7fe faa8 	bl	8001fb0 <HAL_GetTick>
 8003a60:	0002      	movs	r2, r0
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d802      	bhi.n	8003a72 <HAL_SPI_TransmitReceive+0x342>
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	3301      	adds	r3, #1
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x348>
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d108      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003a78:	2323      	movs	r3, #35	@ 0x23
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	225d      	movs	r2, #93	@ 0x5d
 8003a84:	2101      	movs	r1, #1
 8003a86:	5499      	strb	r1, [r3, r2]
        goto error;
 8003a88:	e026      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d199      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x298>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2246      	movs	r2, #70	@ 0x46
 8003a98:	5a9b      	ldrh	r3, [r3, r2]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d193      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fada 	bl	8004060 <SPI_EndRxTxTransaction>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d006      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003ab0:	2323      	movs	r3, #35	@ 0x23
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003ac6:	2323      	movs	r3, #35	@ 0x23
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e003      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	225d      	movs	r2, #93	@ 0x5d
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	225c      	movs	r2, #92	@ 0x5c
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ae0:	2323      	movs	r3, #35	@ 0x23
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	781b      	ldrb	r3, [r3, #0]
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b00a      	add	sp, #40	@ 0x28
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	ffffefff 	.word	0xffffefff

08003af4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	001a      	movs	r2, r3
 8003b12:	2301      	movs	r3, #1
 8003b14:	4013      	ands	r3, r2
 8003b16:	d10f      	bne.n	8003b38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b1e:	d00b      	beq.n	8003b38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	001a      	movs	r2, r3
 8003b26:	2301      	movs	r3, #1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d005      	beq.n	8003b38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	0010      	movs	r0, r2
 8003b34:	4798      	blx	r3
    return;
 8003b36:	e0d5      	b.n	8003ce4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <HAL_SPI_IRQHandler+0x68>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	09db      	lsrs	r3, r3, #7
 8003b48:	001a      	movs	r2, r3
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d005      	beq.n	8003b5c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	0010      	movs	r0, r2
 8003b58:	4798      	blx	r3
    return;
 8003b5a:	e0c3      	b.n	8003ce4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	001a      	movs	r2, r3
 8003b62:	2301      	movs	r3, #1
 8003b64:	4013      	ands	r3, r2
 8003b66:	d10c      	bne.n	8003b82 <HAL_SPI_IRQHandler+0x8e>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4013      	ands	r3, r2
 8003b72:	d106      	bne.n	8003b82 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	001a      	movs	r2, r3
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d100      	bne.n	8003b82 <HAL_SPI_IRQHandler+0x8e>
 8003b80:	e0b0      	b.n	8003ce4 <HAL_SPI_IRQHandler+0x1f0>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	001a      	movs	r2, r3
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d100      	bne.n	8003b90 <HAL_SPI_IRQHandler+0x9c>
 8003b8e:	e0a9      	b.n	8003ce4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	001a      	movs	r2, r3
 8003b96:	2301      	movs	r3, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d023      	beq.n	8003be4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	225d      	movs	r2, #93	@ 0x5d
 8003ba0:	5c9b      	ldrb	r3, [r3, r2]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d011      	beq.n	8003bcc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bac:	2204      	movs	r2, #4
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	e00b      	b.n	8003be4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
        return;
 8003be2:	e07f      	b.n	8003ce4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	001a      	movs	r2, r3
 8003bea:	2301      	movs	r3, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	d014      	beq.n	8003c1a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2140      	movs	r1, #64	@ 0x40
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	001a      	movs	r2, r3
 8003c20:	2301      	movs	r3, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	d00c      	beq.n	8003c40 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d04c      	beq.n	8003ce2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	21e0      	movs	r1, #224	@ 0xe0
 8003c54:	438a      	bics	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	225d      	movs	r2, #93	@ 0x5d
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d103      	bne.n	8003c70 <HAL_SPI_IRQHandler+0x17c>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d032      	beq.n	8003cd6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	4a17      	ldr	r2, [pc, #92]	@ (8003cec <HAL_SPI_IRQHandler+0x1f8>)
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fe fa97 	bl	80021c8 <HAL_DMA_Abort_IT>
 8003c9a:	1e03      	subs	r3, r0, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	2240      	movs	r2, #64	@ 0x40
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d016      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <HAL_SPI_IRQHandler+0x1f8>)
 8003cb8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7fe fa82 	bl	80021c8 <HAL_DMA_Abort_IT>
 8003cc4:	1e03      	subs	r3, r0, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ccc:	2240      	movs	r2, #64	@ 0x40
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003cd4:	e004      	b.n	8003ce0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 f809 	bl	8003cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003cde:	e000      	b.n	8003ce2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003ce0:	46c0      	nop			@ (mov r8, r8)
    return;
 8003ce2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b008      	add	sp, #32
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	08003d19 	.word	0x08003d19

08003cf0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003cf8:	46c0      	nop			@ (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	225d      	movs	r2, #93	@ 0x5d
 8003d0c:	5c9b      	ldrb	r3, [r3, r2]
 8003d0e:	b2db      	uxtb	r3, r3
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2246      	movs	r2, #70	@ 0x46
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7ff ffda 	bl	8003cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b004      	add	sp, #16
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	1dfb      	adds	r3, r7, #7
 8003d52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d54:	f7fe f92c 	bl	8001fb0 <HAL_GetTick>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	18d3      	adds	r3, r2, r3
 8003d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d64:	f7fe f924 	bl	8001fb0 <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	015b      	lsls	r3, r3, #5
 8003d72:	0d1b      	lsrs	r3, r3, #20
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	4353      	muls	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7a:	e058      	b.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	d055      	beq.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d82:	f7fe f915 	bl	8001fb0 <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d902      	bls.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d142      	bne.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	21e0      	movs	r1, #224	@ 0xe0
 8003da4:	438a      	bics	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	2382      	movs	r3, #130	@ 0x82
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d113      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x98>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d005      	beq.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	2380      	movs	r3, #128	@ 0x80
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d107      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2140      	movs	r1, #64	@ 0x40
 8003dd8:	438a      	bics	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	019b      	lsls	r3, r3, #6
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d110      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	491a      	ldr	r1, [pc, #104]	@ (8003e5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2180      	movs	r1, #128	@ 0x80
 8003e04:	0189      	lsls	r1, r1, #6
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	225d      	movs	r2, #93	@ 0x5d
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	225c      	movs	r2, #92	@ 0x5c
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e017      	b.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	4013      	ands	r3, r2
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	425a      	negs	r2, r3
 8003e3e:	4153      	adcs	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	001a      	movs	r2, r3
 8003e44:	1dfb      	adds	r3, r7, #7
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d197      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b008      	add	sp, #32
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	ffffdfff 	.word	0xffffdfff

08003e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e6e:	2317      	movs	r3, #23
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e76:	f7fe f89b 	bl	8001fb0 <HAL_GetTick>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	18d3      	adds	r3, r2, r3
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e86:	f7fe f893 	bl	8001fb0 <HAL_GetTick>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e96:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	0013      	movs	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	00da      	lsls	r2, r3, #3
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	0d1b      	lsrs	r3, r3, #20
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	4353      	muls	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003eac:	e068      	b.n	8003f80 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	23c0      	movs	r3, #192	@ 0xc0
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d10a      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	2117      	movs	r1, #23
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	d055      	beq.n	8003f80 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ed4:	f7fe f86c 	bl	8001fb0 <HAL_GetTick>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d902      	bls.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d142      	bne.n	8003f70 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	21e0      	movs	r1, #224	@ 0xe0
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	2382      	movs	r3, #130	@ 0x82
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d113      	bne.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	2380      	movs	r3, #128	@ 0x80
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d005      	beq.n	8003f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	2380      	movs	r3, #128	@ 0x80
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d107      	bne.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2140      	movs	r1, #64	@ 0x40
 8003f2a:	438a      	bics	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d110      	bne.n	8003f5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4916      	ldr	r1, [pc, #88]	@ (8003fa0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2180      	movs	r1, #128	@ 0x80
 8003f56:	0189      	lsls	r1, r1, #6
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	225d      	movs	r2, #93	@ 0x5d
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	225c      	movs	r2, #92	@ 0x5c
 8003f68:	2100      	movs	r1, #0
 8003f6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e010      	b.n	8003f92 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d18e      	bne.n	8003eae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b00a      	add	sp, #40	@ 0x28
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	ffffdfff 	.word	0xffffdfff

08003fa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	2382      	movs	r3, #130	@ 0x82
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d113      	bne.n	8003fe4 <SPI_EndRxTransaction+0x40>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	2380      	movs	r3, #128	@ 0x80
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d005      	beq.n	8003fd4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d107      	bne.n	8003fe4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2140      	movs	r1, #64	@ 0x40
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0013      	movs	r3, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	f7ff fea7 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d007      	beq.n	800400a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	2220      	movs	r2, #32
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e026      	b.n	8004058 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	2382      	movs	r3, #130	@ 0x82
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	429a      	cmp	r2, r3
 8004014:	d11f      	bne.n	8004056 <SPI_EndRxTransaction+0xb2>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	2380      	movs	r3, #128	@ 0x80
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	429a      	cmp	r2, r3
 8004020:	d005      	beq.n	800402e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	2380      	movs	r3, #128	@ 0x80
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	429a      	cmp	r2, r3
 800402c:	d113      	bne.n	8004056 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	23c0      	movs	r3, #192	@ 0xc0
 8004032:	00d9      	lsls	r1, r3, #3
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	0013      	movs	r3, r2
 800403c:	2200      	movs	r2, #0
 800403e:	f7ff ff0f 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d007      	beq.n	8004056 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404a:	2220      	movs	r2, #32
 800404c:	431a      	orrs	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e000      	b.n	8004058 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	b004      	add	sp, #16
 800405e:	bd80      	pop	{r7, pc}

08004060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	23c0      	movs	r3, #192	@ 0xc0
 8004070:	0159      	lsls	r1, r3, #5
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	0013      	movs	r3, r2
 800407a:	2200      	movs	r2, #0
 800407c:	f7ff fef0 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d007      	beq.n	8004094 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004088:	2220      	movs	r2, #32
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e027      	b.n	80040e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	0013      	movs	r3, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	f7ff fe4f 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 80040a6:	1e03      	subs	r3, r0, #0
 80040a8:	d007      	beq.n	80040ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ae:	2220      	movs	r2, #32
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e014      	b.n	80040e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	23c0      	movs	r3, #192	@ 0xc0
 80040be:	00d9      	lsls	r1, r3, #3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	0013      	movs	r3, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	f7ff fec9 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d007      	beq.n	80040e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d6:	2220      	movs	r2, #32
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e000      	b.n	80040e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e046      	b.n	800418c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2288      	movs	r2, #136	@ 0x88
 8004102:	589b      	ldr	r3, [r3, r2]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2284      	movs	r2, #132	@ 0x84
 800410c:	2100      	movs	r1, #0
 800410e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fe5c 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2288      	movs	r2, #136	@ 0x88
 800411c:	2124      	movs	r1, #36	@ 0x24
 800411e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	438a      	bics	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 fb48 	bl	80047d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	f000 f8cc 	bl	80042e0 <UART_SetConfig>
 8004148:	0003      	movs	r3, r0
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e01c      	b.n	800418c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	490d      	ldr	r1, [pc, #52]	@ (8004194 <HAL_UART_Init+0xa8>)
 800415e:	400a      	ands	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	212a      	movs	r1, #42	@ 0x2a
 800416e:	438a      	bics	r2, r1
 8004170:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f000 fbd7 	bl	8004938 <UART_CheckIdleState>
 800418a:	0003      	movs	r3, r0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}
 8004194:	ffffb7ff 	.word	0xffffb7ff

08004198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2288      	movs	r2, #136	@ 0x88
 80041ac:	589b      	ldr	r3, [r3, r2]
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d000      	beq.n	80041b4 <HAL_UART_Transmit+0x1c>
 80041b2:	e090      	b.n	80042d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_UART_Transmit+0x2a>
 80041ba:	1dbb      	adds	r3, r7, #6
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e088      	b.n	80042d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	015b      	lsls	r3, r3, #5
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d109      	bne.n	80041e6 <HAL_UART_Transmit+0x4e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2201      	movs	r2, #1
 80041de:	4013      	ands	r3, r2
 80041e0:	d001      	beq.n	80041e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e078      	b.n	80042d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2290      	movs	r2, #144	@ 0x90
 80041ea:	2100      	movs	r1, #0
 80041ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2288      	movs	r2, #136	@ 0x88
 80041f2:	2121      	movs	r1, #33	@ 0x21
 80041f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041f6:	f7fd fedb 	bl	8001fb0 <HAL_GetTick>
 80041fa:	0003      	movs	r3, r0
 80041fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1dba      	adds	r2, r7, #6
 8004202:	2154      	movs	r1, #84	@ 0x54
 8004204:	8812      	ldrh	r2, [r2, #0]
 8004206:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1dba      	adds	r2, r7, #6
 800420c:	2156      	movs	r1, #86	@ 0x56
 800420e:	8812      	ldrh	r2, [r2, #0]
 8004210:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	015b      	lsls	r3, r3, #5
 800421a:	429a      	cmp	r2, r3
 800421c:	d108      	bne.n	8004230 <HAL_UART_Transmit+0x98>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	e003      	b.n	8004238 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004238:	e030      	b.n	800429c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	0013      	movs	r3, r2
 8004244:	2200      	movs	r2, #0
 8004246:	2180      	movs	r1, #128	@ 0x80
 8004248:	f000 fc20 	bl	8004a8c <UART_WaitOnFlagUntilTimeout>
 800424c:	1e03      	subs	r3, r0, #0
 800424e:	d005      	beq.n	800425c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2288      	movs	r2, #136	@ 0x88
 8004254:	2120      	movs	r1, #32
 8004256:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e03d      	b.n	80042d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	001a      	movs	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	05d2      	lsls	r2, r2, #23
 800426e:	0dd2      	lsrs	r2, r2, #23
 8004270:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	3302      	adds	r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e007      	b.n	800428a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2256      	movs	r2, #86	@ 0x56
 800428e:	5a9b      	ldrh	r3, [r3, r2]
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b299      	uxth	r1, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2256      	movs	r2, #86	@ 0x56
 800429a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2256      	movs	r2, #86	@ 0x56
 80042a0:	5a9b      	ldrh	r3, [r3, r2]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1c8      	bne.n	800423a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	0013      	movs	r3, r2
 80042b2:	2200      	movs	r2, #0
 80042b4:	2140      	movs	r1, #64	@ 0x40
 80042b6:	f000 fbe9 	bl	8004a8c <UART_WaitOnFlagUntilTimeout>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d005      	beq.n	80042ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2288      	movs	r2, #136	@ 0x88
 80042c2:	2120      	movs	r1, #32
 80042c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e006      	b.n	80042d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2288      	movs	r2, #136	@ 0x88
 80042ce:	2120      	movs	r1, #32
 80042d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e000      	b.n	80042d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
  }
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b008      	add	sp, #32
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b090      	sub	sp, #64	@ 0x40
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042e8:	231a      	movs	r3, #26
 80042ea:	2220      	movs	r2, #32
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	19db      	adds	r3, r3, r7
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	4313      	orrs	r3, r2
 800430a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4ac4      	ldr	r2, [pc, #784]	@ (8004624 <UART_SetConfig+0x344>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431e:	430b      	orrs	r3, r1
 8004320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4abf      	ldr	r2, [pc, #764]	@ (8004628 <UART_SetConfig+0x348>)
 800432a:	4013      	ands	r3, r2
 800432c:	0018      	movs	r0, r3
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	0003      	movs	r3, r0
 8004338:	430b      	orrs	r3, r1
 800433a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4ab9      	ldr	r2, [pc, #740]	@ (800462c <UART_SetConfig+0x34c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004352:	4313      	orrs	r3, r2
 8004354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4ab4      	ldr	r2, [pc, #720]	@ (8004630 <UART_SetConfig+0x350>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	430b      	orrs	r3, r1
 800436a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	220f      	movs	r2, #15
 8004374:	4393      	bics	r3, r2
 8004376:	0018      	movs	r0, r3
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	0003      	movs	r3, r0
 8004382:	430b      	orrs	r3, r1
 8004384:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4aaa      	ldr	r2, [pc, #680]	@ (8004634 <UART_SetConfig+0x354>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d131      	bne.n	80043f4 <UART_SetConfig+0x114>
 8004390:	4ba9      	ldr	r3, [pc, #676]	@ (8004638 <UART_SetConfig+0x358>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004394:	2203      	movs	r2, #3
 8004396:	4013      	ands	r3, r2
 8004398:	2b03      	cmp	r3, #3
 800439a:	d01d      	beq.n	80043d8 <UART_SetConfig+0xf8>
 800439c:	d823      	bhi.n	80043e6 <UART_SetConfig+0x106>
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d00c      	beq.n	80043bc <UART_SetConfig+0xdc>
 80043a2:	d820      	bhi.n	80043e6 <UART_SetConfig+0x106>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <UART_SetConfig+0xce>
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d00e      	beq.n	80043ca <UART_SetConfig+0xea>
 80043ac:	e01b      	b.n	80043e6 <UART_SetConfig+0x106>
 80043ae:	231b      	movs	r3, #27
 80043b0:	2220      	movs	r2, #32
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e071      	b.n	80044a0 <UART_SetConfig+0x1c0>
 80043bc:	231b      	movs	r3, #27
 80043be:	2220      	movs	r2, #32
 80043c0:	189b      	adds	r3, r3, r2
 80043c2:	19db      	adds	r3, r3, r7
 80043c4:	2202      	movs	r2, #2
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e06a      	b.n	80044a0 <UART_SetConfig+0x1c0>
 80043ca:	231b      	movs	r3, #27
 80043cc:	2220      	movs	r2, #32
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	19db      	adds	r3, r3, r7
 80043d2:	2204      	movs	r2, #4
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e063      	b.n	80044a0 <UART_SetConfig+0x1c0>
 80043d8:	231b      	movs	r3, #27
 80043da:	2220      	movs	r2, #32
 80043dc:	189b      	adds	r3, r3, r2
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	2208      	movs	r2, #8
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e05c      	b.n	80044a0 <UART_SetConfig+0x1c0>
 80043e6:	231b      	movs	r3, #27
 80043e8:	2220      	movs	r2, #32
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	19db      	adds	r3, r3, r7
 80043ee:	2210      	movs	r2, #16
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e055      	b.n	80044a0 <UART_SetConfig+0x1c0>
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a90      	ldr	r2, [pc, #576]	@ (800463c <UART_SetConfig+0x35c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d106      	bne.n	800440c <UART_SetConfig+0x12c>
 80043fe:	231b      	movs	r3, #27
 8004400:	2220      	movs	r2, #32
 8004402:	189b      	adds	r3, r3, r2
 8004404:	19db      	adds	r3, r3, r7
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e049      	b.n	80044a0 <UART_SetConfig+0x1c0>
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a86      	ldr	r2, [pc, #536]	@ (800462c <UART_SetConfig+0x34c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d13e      	bne.n	8004494 <UART_SetConfig+0x1b4>
 8004416:	4b88      	ldr	r3, [pc, #544]	@ (8004638 <UART_SetConfig+0x358>)
 8004418:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800441a:	23c0      	movs	r3, #192	@ 0xc0
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	4013      	ands	r3, r2
 8004420:	22c0      	movs	r2, #192	@ 0xc0
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	4293      	cmp	r3, r2
 8004426:	d027      	beq.n	8004478 <UART_SetConfig+0x198>
 8004428:	22c0      	movs	r2, #192	@ 0xc0
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	4293      	cmp	r3, r2
 800442e:	d82a      	bhi.n	8004486 <UART_SetConfig+0x1a6>
 8004430:	2280      	movs	r2, #128	@ 0x80
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	4293      	cmp	r3, r2
 8004436:	d011      	beq.n	800445c <UART_SetConfig+0x17c>
 8004438:	2280      	movs	r2, #128	@ 0x80
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	4293      	cmp	r3, r2
 800443e:	d822      	bhi.n	8004486 <UART_SetConfig+0x1a6>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <UART_SetConfig+0x16e>
 8004444:	2280      	movs	r2, #128	@ 0x80
 8004446:	00d2      	lsls	r2, r2, #3
 8004448:	4293      	cmp	r3, r2
 800444a:	d00e      	beq.n	800446a <UART_SetConfig+0x18a>
 800444c:	e01b      	b.n	8004486 <UART_SetConfig+0x1a6>
 800444e:	231b      	movs	r3, #27
 8004450:	2220      	movs	r2, #32
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e021      	b.n	80044a0 <UART_SetConfig+0x1c0>
 800445c:	231b      	movs	r3, #27
 800445e:	2220      	movs	r2, #32
 8004460:	189b      	adds	r3, r3, r2
 8004462:	19db      	adds	r3, r3, r7
 8004464:	2202      	movs	r2, #2
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e01a      	b.n	80044a0 <UART_SetConfig+0x1c0>
 800446a:	231b      	movs	r3, #27
 800446c:	2220      	movs	r2, #32
 800446e:	189b      	adds	r3, r3, r2
 8004470:	19db      	adds	r3, r3, r7
 8004472:	2204      	movs	r2, #4
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e013      	b.n	80044a0 <UART_SetConfig+0x1c0>
 8004478:	231b      	movs	r3, #27
 800447a:	2220      	movs	r2, #32
 800447c:	189b      	adds	r3, r3, r2
 800447e:	19db      	adds	r3, r3, r7
 8004480:	2208      	movs	r2, #8
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e00c      	b.n	80044a0 <UART_SetConfig+0x1c0>
 8004486:	231b      	movs	r3, #27
 8004488:	2220      	movs	r2, #32
 800448a:	189b      	adds	r3, r3, r2
 800448c:	19db      	adds	r3, r3, r7
 800448e:	2210      	movs	r2, #16
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e005      	b.n	80044a0 <UART_SetConfig+0x1c0>
 8004494:	231b      	movs	r3, #27
 8004496:	2220      	movs	r2, #32
 8004498:	189b      	adds	r3, r3, r2
 800449a:	19db      	adds	r3, r3, r7
 800449c:	2210      	movs	r2, #16
 800449e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a61      	ldr	r2, [pc, #388]	@ (800462c <UART_SetConfig+0x34c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d000      	beq.n	80044ac <UART_SetConfig+0x1cc>
 80044aa:	e092      	b.n	80045d2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044ac:	231b      	movs	r3, #27
 80044ae:	2220      	movs	r2, #32
 80044b0:	189b      	adds	r3, r3, r2
 80044b2:	19db      	adds	r3, r3, r7
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d015      	beq.n	80044e6 <UART_SetConfig+0x206>
 80044ba:	dc18      	bgt.n	80044ee <UART_SetConfig+0x20e>
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d00d      	beq.n	80044dc <UART_SetConfig+0x1fc>
 80044c0:	dc15      	bgt.n	80044ee <UART_SetConfig+0x20e>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <UART_SetConfig+0x1ec>
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d005      	beq.n	80044d6 <UART_SetConfig+0x1f6>
 80044ca:	e010      	b.n	80044ee <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe fdb0 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 80044d0:	0003      	movs	r3, r0
 80044d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044d4:	e014      	b.n	8004500 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d6:	4b5a      	ldr	r3, [pc, #360]	@ (8004640 <UART_SetConfig+0x360>)
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044da:	e011      	b.n	8004500 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044dc:	f7fe fd1c 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 80044e0:	0003      	movs	r3, r0
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e6:	2380      	movs	r3, #128	@ 0x80
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80044f2:	231a      	movs	r3, #26
 80044f4:	2220      	movs	r2, #32
 80044f6:	189b      	adds	r3, r3, r2
 80044f8:	19db      	adds	r3, r3, r7
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
        break;
 80044fe:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	d100      	bne.n	8004508 <UART_SetConfig+0x228>
 8004506:	e147      	b.n	8004798 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800450c:	4b4d      	ldr	r3, [pc, #308]	@ (8004644 <UART_SetConfig+0x364>)
 800450e:	0052      	lsls	r2, r2, #1
 8004510:	5ad3      	ldrh	r3, [r2, r3]
 8004512:	0019      	movs	r1, r3
 8004514:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004516:	f7fb fe07 	bl	8000128 <__udivsi3>
 800451a:	0003      	movs	r3, r0
 800451c:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	0013      	movs	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	189b      	adds	r3, r3, r2
 8004528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452a:	429a      	cmp	r2, r3
 800452c:	d305      	bcc.n	800453a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004536:	429a      	cmp	r2, r3
 8004538:	d906      	bls.n	8004548 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800453a:	231a      	movs	r3, #26
 800453c:	2220      	movs	r2, #32
 800453e:	189b      	adds	r3, r3, r2
 8004540:	19db      	adds	r3, r3, r7
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	e127      	b.n	8004798 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004554:	4b3b      	ldr	r3, [pc, #236]	@ (8004644 <UART_SetConfig+0x364>)
 8004556:	0052      	lsls	r2, r2, #1
 8004558:	5ad3      	ldrh	r3, [r2, r3]
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	69b8      	ldr	r0, [r7, #24]
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	f7fb ff54 	bl	8000414 <__aeabi_uldivmod>
 800456c:	0002      	movs	r2, r0
 800456e:	000b      	movs	r3, r1
 8004570:	0e11      	lsrs	r1, r2, #24
 8004572:	021d      	lsls	r5, r3, #8
 8004574:	430d      	orrs	r5, r1
 8004576:	0214      	lsls	r4, r2, #8
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68b8      	ldr	r0, [r7, #8]
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	1900      	adds	r0, r0, r4
 800458a:	4169      	adcs	r1, r5
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f7fb ff3b 	bl	8000414 <__aeabi_uldivmod>
 800459e:	0002      	movs	r2, r0
 80045a0:	000b      	movs	r3, r1
 80045a2:	0013      	movs	r3, r2
 80045a4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a8:	23c0      	movs	r3, #192	@ 0xc0
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d309      	bcc.n	80045c4 <UART_SetConfig+0x2e4>
 80045b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	035b      	lsls	r3, r3, #13
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d204      	bcs.n	80045c4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	e0e9      	b.n	8004798 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80045c4:	231a      	movs	r3, #26
 80045c6:	2220      	movs	r2, #32
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e0e2      	b.n	8004798 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	429a      	cmp	r2, r3
 80045dc:	d000      	beq.n	80045e0 <UART_SetConfig+0x300>
 80045de:	e083      	b.n	80046e8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80045e0:	231b      	movs	r3, #27
 80045e2:	2220      	movs	r2, #32
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d015      	beq.n	800461a <UART_SetConfig+0x33a>
 80045ee:	dc2b      	bgt.n	8004648 <UART_SetConfig+0x368>
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d00d      	beq.n	8004610 <UART_SetConfig+0x330>
 80045f4:	dc28      	bgt.n	8004648 <UART_SetConfig+0x368>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <UART_SetConfig+0x320>
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d005      	beq.n	800460a <UART_SetConfig+0x32a>
 80045fe:	e023      	b.n	8004648 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004600:	f7fe fd16 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8004604:	0003      	movs	r3, r0
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004608:	e027      	b.n	800465a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <UART_SetConfig+0x360>)
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800460e:	e024      	b.n	800465a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004610:	f7fe fc82 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8004614:	0003      	movs	r3, r0
 8004616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004618:	e01f      	b.n	800465a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004620:	e01b      	b.n	800465a <UART_SetConfig+0x37a>
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	cfff69f3 	.word	0xcfff69f3
 8004628:	ffffcfff 	.word	0xffffcfff
 800462c:	40008000 	.word	0x40008000
 8004630:	11fff4ff 	.word	0x11fff4ff
 8004634:	40013800 	.word	0x40013800
 8004638:	40021000 	.word	0x40021000
 800463c:	40004400 	.word	0x40004400
 8004640:	00f42400 	.word	0x00f42400
 8004644:	08005770 	.word	0x08005770
      default:
        pclk = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800464c:	231a      	movs	r3, #26
 800464e:	2220      	movs	r2, #32
 8004650:	189b      	adds	r3, r3, r2
 8004652:	19db      	adds	r3, r3, r7
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
        break;
 8004658:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800465a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d100      	bne.n	8004662 <UART_SetConfig+0x382>
 8004660:	e09a      	b.n	8004798 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004666:	4b58      	ldr	r3, [pc, #352]	@ (80047c8 <UART_SetConfig+0x4e8>)
 8004668:	0052      	lsls	r2, r2, #1
 800466a:	5ad3      	ldrh	r3, [r2, r3]
 800466c:	0019      	movs	r1, r3
 800466e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004670:	f7fb fd5a 	bl	8000128 <__udivsi3>
 8004674:	0003      	movs	r3, r0
 8004676:	005a      	lsls	r2, r3, #1
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	18d2      	adds	r2, r2, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	0019      	movs	r1, r3
 8004686:	0010      	movs	r0, r2
 8004688:	f7fb fd4e 	bl	8000128 <__udivsi3>
 800468c:	0003      	movs	r3, r0
 800468e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004692:	2b0f      	cmp	r3, #15
 8004694:	d921      	bls.n	80046da <UART_SetConfig+0x3fa>
 8004696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004698:	2380      	movs	r3, #128	@ 0x80
 800469a:	025b      	lsls	r3, r3, #9
 800469c:	429a      	cmp	r2, r3
 800469e:	d21c      	bcs.n	80046da <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	200e      	movs	r0, #14
 80046a6:	2420      	movs	r4, #32
 80046a8:	1903      	adds	r3, r0, r4
 80046aa:	19db      	adds	r3, r3, r7
 80046ac:	210f      	movs	r1, #15
 80046ae:	438a      	bics	r2, r1
 80046b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2207      	movs	r2, #7
 80046ba:	4013      	ands	r3, r2
 80046bc:	b299      	uxth	r1, r3
 80046be:	1903      	adds	r3, r0, r4
 80046c0:	19db      	adds	r3, r3, r7
 80046c2:	1902      	adds	r2, r0, r4
 80046c4:	19d2      	adds	r2, r2, r7
 80046c6:	8812      	ldrh	r2, [r2, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	1902      	adds	r2, r0, r4
 80046d2:	19d2      	adds	r2, r2, r7
 80046d4:	8812      	ldrh	r2, [r2, #0]
 80046d6:	60da      	str	r2, [r3, #12]
 80046d8:	e05e      	b.n	8004798 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80046da:	231a      	movs	r3, #26
 80046dc:	2220      	movs	r2, #32
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	19db      	adds	r3, r3, r7
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e057      	b.n	8004798 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046e8:	231b      	movs	r3, #27
 80046ea:	2220      	movs	r2, #32
 80046ec:	189b      	adds	r3, r3, r2
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d015      	beq.n	8004722 <UART_SetConfig+0x442>
 80046f6:	dc18      	bgt.n	800472a <UART_SetConfig+0x44a>
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d00d      	beq.n	8004718 <UART_SetConfig+0x438>
 80046fc:	dc15      	bgt.n	800472a <UART_SetConfig+0x44a>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <UART_SetConfig+0x428>
 8004702:	2b02      	cmp	r3, #2
 8004704:	d005      	beq.n	8004712 <UART_SetConfig+0x432>
 8004706:	e010      	b.n	800472a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe fc92 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 800470c:	0003      	movs	r3, r0
 800470e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004710:	e014      	b.n	800473c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004712:	4b2e      	ldr	r3, [pc, #184]	@ (80047cc <UART_SetConfig+0x4ec>)
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004716:	e011      	b.n	800473c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004718:	f7fe fbfe 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 800471c:	0003      	movs	r3, r0
 800471e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004720:	e00c      	b.n	800473c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004722:	2380      	movs	r3, #128	@ 0x80
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004728:	e008      	b.n	800473c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800472e:	231a      	movs	r3, #26
 8004730:	2220      	movs	r2, #32
 8004732:	189b      	adds	r3, r3, r2
 8004734:	19db      	adds	r3, r3, r7
 8004736:	2201      	movs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
        break;
 800473a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02a      	beq.n	8004798 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004746:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <UART_SetConfig+0x4e8>)
 8004748:	0052      	lsls	r2, r2, #1
 800474a:	5ad3      	ldrh	r3, [r2, r3]
 800474c:	0019      	movs	r1, r3
 800474e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004750:	f7fb fcea 	bl	8000128 <__udivsi3>
 8004754:	0003      	movs	r3, r0
 8004756:	001a      	movs	r2, r3
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	18d2      	adds	r2, r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0019      	movs	r1, r3
 8004766:	0010      	movs	r0, r2
 8004768:	f7fb fcde 	bl	8000128 <__udivsi3>
 800476c:	0003      	movs	r3, r0
 800476e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d90a      	bls.n	800478c <UART_SetConfig+0x4ac>
 8004776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	025b      	lsls	r3, r3, #9
 800477c:	429a      	cmp	r2, r3
 800477e:	d205      	bcs.n	800478c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	b29a      	uxth	r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	e005      	b.n	8004798 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800478c:	231a      	movs	r3, #26
 800478e:	2220      	movs	r2, #32
 8004790:	189b      	adds	r3, r3, r2
 8004792:	19db      	adds	r3, r3, r7
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	226a      	movs	r2, #106	@ 0x6a
 800479c:	2101      	movs	r1, #1
 800479e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	2268      	movs	r2, #104	@ 0x68
 80047a4:	2101      	movs	r1, #1
 80047a6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	2200      	movs	r2, #0
 80047ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	2200      	movs	r2, #0
 80047b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80047b4:	231a      	movs	r3, #26
 80047b6:	2220      	movs	r2, #32
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	19db      	adds	r3, r3, r7
 80047bc:	781b      	ldrb	r3, [r3, #0]
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b010      	add	sp, #64	@ 0x40
 80047c4:	bdb0      	pop	{r4, r5, r7, pc}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	08005770 	.word	0x08005770
 80047cc:	00f42400 	.word	0x00f42400

080047d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	2208      	movs	r2, #8
 80047de:	4013      	ands	r3, r2
 80047e0:	d00b      	beq.n	80047fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004914 <UART_AdvFeatureConfig+0x144>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	2201      	movs	r2, #1
 8004800:	4013      	ands	r3, r2
 8004802:	d00b      	beq.n	800481c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4a43      	ldr	r2, [pc, #268]	@ (8004918 <UART_AdvFeatureConfig+0x148>)
 800480c:	4013      	ands	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	2202      	movs	r2, #2
 8004822:	4013      	ands	r3, r2
 8004824:	d00b      	beq.n	800483e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a3b      	ldr	r2, [pc, #236]	@ (800491c <UART_AdvFeatureConfig+0x14c>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004842:	2204      	movs	r2, #4
 8004844:	4013      	ands	r3, r2
 8004846:	d00b      	beq.n	8004860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4a34      	ldr	r2, [pc, #208]	@ (8004920 <UART_AdvFeatureConfig+0x150>)
 8004850:	4013      	ands	r3, r2
 8004852:	0019      	movs	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	2210      	movs	r2, #16
 8004866:	4013      	ands	r3, r2
 8004868:	d00b      	beq.n	8004882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a2c      	ldr	r2, [pc, #176]	@ (8004924 <UART_AdvFeatureConfig+0x154>)
 8004872:	4013      	ands	r3, r2
 8004874:	0019      	movs	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004886:	2220      	movs	r2, #32
 8004888:	4013      	ands	r3, r2
 800488a:	d00b      	beq.n	80048a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4a25      	ldr	r2, [pc, #148]	@ (8004928 <UART_AdvFeatureConfig+0x158>)
 8004894:	4013      	ands	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	2240      	movs	r2, #64	@ 0x40
 80048aa:	4013      	ands	r3, r2
 80048ac:	d01d      	beq.n	80048ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a1d      	ldr	r2, [pc, #116]	@ (800492c <UART_AdvFeatureConfig+0x15c>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	0019      	movs	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ca:	2380      	movs	r3, #128	@ 0x80
 80048cc:	035b      	lsls	r3, r3, #13
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d10b      	bne.n	80048ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <UART_AdvFeatureConfig+0x160>)
 80048da:	4013      	ands	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	2280      	movs	r2, #128	@ 0x80
 80048f0:	4013      	ands	r3, r2
 80048f2:	d00b      	beq.n	800490c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004934 <UART_AdvFeatureConfig+0x164>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	0019      	movs	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }
}
 800490c:	46c0      	nop			@ (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	b002      	add	sp, #8
 8004912:	bd80      	pop	{r7, pc}
 8004914:	ffff7fff 	.word	0xffff7fff
 8004918:	fffdffff 	.word	0xfffdffff
 800491c:	fffeffff 	.word	0xfffeffff
 8004920:	fffbffff 	.word	0xfffbffff
 8004924:	ffffefff 	.word	0xffffefff
 8004928:	ffffdfff 	.word	0xffffdfff
 800492c:	ffefffff 	.word	0xffefffff
 8004930:	ff9fffff 	.word	0xff9fffff
 8004934:	fff7ffff 	.word	0xfff7ffff

08004938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b092      	sub	sp, #72	@ 0x48
 800493c:	af02      	add	r7, sp, #8
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2290      	movs	r2, #144	@ 0x90
 8004944:	2100      	movs	r1, #0
 8004946:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004948:	f7fd fb32 	bl	8001fb0 <HAL_GetTick>
 800494c:	0003      	movs	r3, r0
 800494e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2208      	movs	r2, #8
 8004958:	4013      	ands	r3, r2
 800495a:	2b08      	cmp	r3, #8
 800495c:	d12d      	bne.n	80049ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	2280      	movs	r2, #128	@ 0x80
 8004962:	0391      	lsls	r1, r2, #14
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4a47      	ldr	r2, [pc, #284]	@ (8004a84 <UART_CheckIdleState+0x14c>)
 8004968:	9200      	str	r2, [sp, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	f000 f88e 	bl	8004a8c <UART_WaitOnFlagUntilTimeout>
 8004970:	1e03      	subs	r3, r0, #0
 8004972:	d022      	beq.n	80049ba <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800497e:	2301      	movs	r3, #1
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	f383 8810 	msr	PRIMASK, r3
}
 8004988:	46c0      	nop			@ (mov r8, r8)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2180      	movs	r1, #128	@ 0x80
 8004996:	438a      	bics	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2288      	movs	r2, #136	@ 0x88
 80049aa:	2120      	movs	r1, #32
 80049ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2284      	movs	r2, #132	@ 0x84
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e060      	b.n	8004a7c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2204      	movs	r2, #4
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d146      	bne.n	8004a56 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ca:	2280      	movs	r2, #128	@ 0x80
 80049cc:	03d1      	lsls	r1, r2, #15
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a84 <UART_CheckIdleState+0x14c>)
 80049d2:	9200      	str	r2, [sp, #0]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f000 f859 	bl	8004a8c <UART_WaitOnFlagUntilTimeout>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d03b      	beq.n	8004a56 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049de:	f3ef 8310 	mrs	r3, PRIMASK
 80049e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e8:	2301      	movs	r3, #1
 80049ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4922      	ldr	r1, [pc, #136]	@ (8004a88 <UART_CheckIdleState+0x150>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a10:	f3ef 8310 	mrs	r3, PRIMASK
 8004a14:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a16:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f383 8810 	msr	PRIMASK, r3
}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2101      	movs	r1, #1
 8004a32:	438a      	bics	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	228c      	movs	r2, #140	@ 0x8c
 8004a46:	2120      	movs	r1, #32
 8004a48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2284      	movs	r2, #132	@ 0x84
 8004a4e:	2100      	movs	r1, #0
 8004a50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e012      	b.n	8004a7c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2288      	movs	r2, #136	@ 0x88
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	228c      	movs	r2, #140	@ 0x8c
 8004a62:	2120      	movs	r1, #32
 8004a64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2284      	movs	r2, #132	@ 0x84
 8004a76:	2100      	movs	r1, #0
 8004a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b010      	add	sp, #64	@ 0x40
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	01ffffff 	.word	0x01ffffff
 8004a88:	fffffedf 	.word	0xfffffedf

08004a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9c:	e051      	b.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	d04e      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fd fa84 	bl	8001fb0 <HAL_GetTick>
 8004aa8:	0002      	movs	r2, r0
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e051      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b80      	cmp	r3, #128	@ 0x80
 8004ace:	d038      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b40      	cmp	r3, #64	@ 0x40
 8004ad4:	d035      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	2208      	movs	r2, #8
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d111      	bne.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 f83c 	bl	8004b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2290      	movs	r2, #144	@ 0x90
 8004af8:	2108      	movs	r1, #8
 8004afa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2284      	movs	r2, #132	@ 0x84
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e02c      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	2380      	movs	r3, #128	@ 0x80
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	401a      	ands	r2, r3
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d112      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2280      	movs	r2, #128	@ 0x80
 8004b22:	0112      	lsls	r2, r2, #4
 8004b24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 f81f 	bl	8004b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2290      	movs	r2, #144	@ 0x90
 8004b32:	2120      	movs	r1, #32
 8004b34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2284      	movs	r2, #132	@ 0x84
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e00f      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	425a      	negs	r2, r3
 8004b52:	4153      	adcs	r3, r2
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	001a      	movs	r2, r3
 8004b58:	1dfb      	adds	r3, r7, #7
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d09e      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08e      	sub	sp, #56	@ 0x38
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b74:	f3ef 8310 	mrs	r3, PRIMASK
 8004b78:	617b      	str	r3, [r7, #20]
  return(result);
 8004b7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4926      	ldr	r1, [pc, #152]	@ (8004c30 <UART_EndRxTransfer+0xc4>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f383 8810 	msr	PRIMASK, r3
}
 8004ba4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8004baa:	623b      	str	r3, [r7, #32]
  return(result);
 8004bac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	491b      	ldr	r1, [pc, #108]	@ (8004c34 <UART_EndRxTransfer+0xc8>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d118      	bne.n	8004c12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be0:	f3ef 8310 	mrs	r3, PRIMASK
 8004be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bea:	2301      	movs	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2110      	movs	r1, #16
 8004c02:	438a      	bics	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f383 8810 	msr	PRIMASK, r3
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	228c      	movs	r2, #140	@ 0x8c
 8004c16:	2120      	movs	r1, #32
 8004c18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b00e      	add	sp, #56	@ 0x38
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	fffffedf 	.word	0xfffffedf
 8004c34:	effffffe 	.word	0xeffffffe

08004c38 <sniprintf>:
 8004c38:	b40c      	push	{r2, r3}
 8004c3a:	b530      	push	{r4, r5, lr}
 8004c3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ca0 <sniprintf+0x68>)
 8004c3e:	000c      	movs	r4, r1
 8004c40:	681d      	ldr	r5, [r3, #0]
 8004c42:	b09d      	sub	sp, #116	@ 0x74
 8004c44:	2900      	cmp	r1, #0
 8004c46:	da08      	bge.n	8004c5a <sniprintf+0x22>
 8004c48:	238b      	movs	r3, #139	@ 0x8b
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	4240      	negs	r0, r0
 8004c50:	b01d      	add	sp, #116	@ 0x74
 8004c52:	bc30      	pop	{r4, r5}
 8004c54:	bc08      	pop	{r3}
 8004c56:	b002      	add	sp, #8
 8004c58:	4718      	bx	r3
 8004c5a:	2382      	movs	r3, #130	@ 0x82
 8004c5c:	466a      	mov	r2, sp
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	8293      	strh	r3, [r2, #20]
 8004c62:	2300      	movs	r3, #0
 8004c64:	9002      	str	r0, [sp, #8]
 8004c66:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004c68:	9006      	str	r0, [sp, #24]
 8004c6a:	4299      	cmp	r1, r3
 8004c6c:	d000      	beq.n	8004c70 <sniprintf+0x38>
 8004c6e:	1e4b      	subs	r3, r1, #1
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	9307      	str	r3, [sp, #28]
 8004c74:	2301      	movs	r3, #1
 8004c76:	466a      	mov	r2, sp
 8004c78:	425b      	negs	r3, r3
 8004c7a:	82d3      	strh	r3, [r2, #22]
 8004c7c:	0028      	movs	r0, r5
 8004c7e:	ab21      	add	r3, sp, #132	@ 0x84
 8004c80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c82:	a902      	add	r1, sp, #8
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	f000 f9bd 	bl	8005004 <_svfiprintf_r>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	da01      	bge.n	8004c92 <sniprintf+0x5a>
 8004c8e:	238b      	movs	r3, #139	@ 0x8b
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	d0dc      	beq.n	8004c50 <sniprintf+0x18>
 8004c96:	2200      	movs	r2, #0
 8004c98:	9b02      	ldr	r3, [sp, #8]
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e7d8      	b.n	8004c50 <sniprintf+0x18>
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	2000000c 	.word	0x2000000c

08004ca4 <memset>:
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	1882      	adds	r2, r0, r2
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d100      	bne.n	8004cae <memset+0xa>
 8004cac:	4770      	bx	lr
 8004cae:	7019      	strb	r1, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	e7f9      	b.n	8004ca8 <memset+0x4>

08004cb4 <strstr>:
 8004cb4:	780a      	ldrb	r2, [r1, #0]
 8004cb6:	b530      	push	{r4, r5, lr}
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	d10c      	bne.n	8004cd6 <strstr+0x22>
 8004cbc:	bd30      	pop	{r4, r5, pc}
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d108      	bne.n	8004cd4 <strstr+0x20>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	5ccc      	ldrb	r4, [r1, r3]
 8004cc6:	2c00      	cmp	r4, #0
 8004cc8:	d0f8      	beq.n	8004cbc <strstr+0x8>
 8004cca:	5cc5      	ldrb	r5, [r0, r3]
 8004ccc:	42a5      	cmp	r5, r4
 8004cce:	d101      	bne.n	8004cd4 <strstr+0x20>
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	e7f7      	b.n	8004cc4 <strstr+0x10>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	7803      	ldrb	r3, [r0, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <strstr+0xa>
 8004cdc:	0018      	movs	r0, r3
 8004cde:	e7ed      	b.n	8004cbc <strstr+0x8>

08004ce0 <__errno>:
 8004ce0:	4b01      	ldr	r3, [pc, #4]	@ (8004ce8 <__errno+0x8>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	4770      	bx	lr
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	2000000c 	.word	0x2000000c

08004cec <__libc_init_array>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	2600      	movs	r6, #0
 8004cf0:	4c0c      	ldr	r4, [pc, #48]	@ (8004d24 <__libc_init_array+0x38>)
 8004cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d28 <__libc_init_array+0x3c>)
 8004cf4:	1b64      	subs	r4, r4, r5
 8004cf6:	10a4      	asrs	r4, r4, #2
 8004cf8:	42a6      	cmp	r6, r4
 8004cfa:	d109      	bne.n	8004d10 <__libc_init_array+0x24>
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	f000 fc63 	bl	80055c8 <_init>
 8004d02:	4c0a      	ldr	r4, [pc, #40]	@ (8004d2c <__libc_init_array+0x40>)
 8004d04:	4d0a      	ldr	r5, [pc, #40]	@ (8004d30 <__libc_init_array+0x44>)
 8004d06:	1b64      	subs	r4, r4, r5
 8004d08:	10a4      	asrs	r4, r4, #2
 8004d0a:	42a6      	cmp	r6, r4
 8004d0c:	d105      	bne.n	8004d1a <__libc_init_array+0x2e>
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	00b3      	lsls	r3, r6, #2
 8004d12:	58eb      	ldr	r3, [r5, r3]
 8004d14:	4798      	blx	r3
 8004d16:	3601      	adds	r6, #1
 8004d18:	e7ee      	b.n	8004cf8 <__libc_init_array+0xc>
 8004d1a:	00b3      	lsls	r3, r6, #2
 8004d1c:	58eb      	ldr	r3, [r5, r3]
 8004d1e:	4798      	blx	r3
 8004d20:	3601      	adds	r6, #1
 8004d22:	e7f2      	b.n	8004d0a <__libc_init_array+0x1e>
 8004d24:	080057c4 	.word	0x080057c4
 8004d28:	080057c4 	.word	0x080057c4
 8004d2c:	080057c8 	.word	0x080057c8
 8004d30:	080057c4 	.word	0x080057c4

08004d34 <__retarget_lock_acquire_recursive>:
 8004d34:	4770      	bx	lr

08004d36 <__retarget_lock_release_recursive>:
 8004d36:	4770      	bx	lr

08004d38 <memcpy>:
 8004d38:	2300      	movs	r3, #0
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d100      	bne.n	8004d42 <memcpy+0xa>
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	5ccc      	ldrb	r4, [r1, r3]
 8004d44:	54c4      	strb	r4, [r0, r3]
 8004d46:	3301      	adds	r3, #1
 8004d48:	e7f8      	b.n	8004d3c <memcpy+0x4>
	...

08004d4c <_free_r>:
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	0005      	movs	r5, r0
 8004d50:	1e0c      	subs	r4, r1, #0
 8004d52:	d010      	beq.n	8004d76 <_free_r+0x2a>
 8004d54:	3c04      	subs	r4, #4
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da00      	bge.n	8004d5e <_free_r+0x12>
 8004d5c:	18e4      	adds	r4, r4, r3
 8004d5e:	0028      	movs	r0, r5
 8004d60:	f000 f8e0 	bl	8004f24 <__malloc_lock>
 8004d64:	4a1d      	ldr	r2, [pc, #116]	@ (8004ddc <_free_r+0x90>)
 8004d66:	6813      	ldr	r3, [r2, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <_free_r+0x2c>
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	6014      	str	r4, [r2, #0]
 8004d70:	0028      	movs	r0, r5
 8004d72:	f000 f8df 	bl	8004f34 <__malloc_unlock>
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d908      	bls.n	8004d8e <_free_r+0x42>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	1821      	adds	r1, r4, r0
 8004d80:	428b      	cmp	r3, r1
 8004d82:	d1f3      	bne.n	8004d6c <_free_r+0x20>
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	1809      	adds	r1, r1, r0
 8004d8a:	6021      	str	r1, [r4, #0]
 8004d8c:	e7ee      	b.n	8004d6c <_free_r+0x20>
 8004d8e:	001a      	movs	r2, r3
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <_free_r+0x4e>
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	d9f9      	bls.n	8004d8e <_free_r+0x42>
 8004d9a:	6811      	ldr	r1, [r2, #0]
 8004d9c:	1850      	adds	r0, r2, r1
 8004d9e:	42a0      	cmp	r0, r4
 8004da0:	d10b      	bne.n	8004dba <_free_r+0x6e>
 8004da2:	6820      	ldr	r0, [r4, #0]
 8004da4:	1809      	adds	r1, r1, r0
 8004da6:	1850      	adds	r0, r2, r1
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	4283      	cmp	r3, r0
 8004dac:	d1e0      	bne.n	8004d70 <_free_r+0x24>
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	1841      	adds	r1, r0, r1
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	6053      	str	r3, [r2, #4]
 8004db8:	e7da      	b.n	8004d70 <_free_r+0x24>
 8004dba:	42a0      	cmp	r0, r4
 8004dbc:	d902      	bls.n	8004dc4 <_free_r+0x78>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	e7d5      	b.n	8004d70 <_free_r+0x24>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	1821      	adds	r1, r4, r0
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	d103      	bne.n	8004dd4 <_free_r+0x88>
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	1809      	adds	r1, r1, r0
 8004dd2:	6021      	str	r1, [r4, #0]
 8004dd4:	6063      	str	r3, [r4, #4]
 8004dd6:	6054      	str	r4, [r2, #4]
 8004dd8:	e7ca      	b.n	8004d70 <_free_r+0x24>
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	200002f8 	.word	0x200002f8

08004de0 <sbrk_aligned>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4e0f      	ldr	r6, [pc, #60]	@ (8004e20 <sbrk_aligned+0x40>)
 8004de4:	000d      	movs	r5, r1
 8004de6:	6831      	ldr	r1, [r6, #0]
 8004de8:	0004      	movs	r4, r0
 8004dea:	2900      	cmp	r1, #0
 8004dec:	d102      	bne.n	8004df4 <sbrk_aligned+0x14>
 8004dee:	f000 fb95 	bl	800551c <_sbrk_r>
 8004df2:	6030      	str	r0, [r6, #0]
 8004df4:	0029      	movs	r1, r5
 8004df6:	0020      	movs	r0, r4
 8004df8:	f000 fb90 	bl	800551c <_sbrk_r>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d103      	bne.n	8004e08 <sbrk_aligned+0x28>
 8004e00:	2501      	movs	r5, #1
 8004e02:	426d      	negs	r5, r5
 8004e04:	0028      	movs	r0, r5
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	2303      	movs	r3, #3
 8004e0a:	1cc5      	adds	r5, r0, #3
 8004e0c:	439d      	bics	r5, r3
 8004e0e:	42a8      	cmp	r0, r5
 8004e10:	d0f8      	beq.n	8004e04 <sbrk_aligned+0x24>
 8004e12:	1a29      	subs	r1, r5, r0
 8004e14:	0020      	movs	r0, r4
 8004e16:	f000 fb81 	bl	800551c <_sbrk_r>
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d1f2      	bne.n	8004e04 <sbrk_aligned+0x24>
 8004e1e:	e7ef      	b.n	8004e00 <sbrk_aligned+0x20>
 8004e20:	200002f4 	.word	0x200002f4

08004e24 <_malloc_r>:
 8004e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e26:	2203      	movs	r2, #3
 8004e28:	1ccb      	adds	r3, r1, #3
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	0005      	movs	r5, r0
 8004e30:	001f      	movs	r7, r3
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	d234      	bcs.n	8004ea0 <_malloc_r+0x7c>
 8004e36:	270c      	movs	r7, #12
 8004e38:	42b9      	cmp	r1, r7
 8004e3a:	d833      	bhi.n	8004ea4 <_malloc_r+0x80>
 8004e3c:	0028      	movs	r0, r5
 8004e3e:	f000 f871 	bl	8004f24 <__malloc_lock>
 8004e42:	4e37      	ldr	r6, [pc, #220]	@ (8004f20 <_malloc_r+0xfc>)
 8004e44:	6833      	ldr	r3, [r6, #0]
 8004e46:	001c      	movs	r4, r3
 8004e48:	2c00      	cmp	r4, #0
 8004e4a:	d12f      	bne.n	8004eac <_malloc_r+0x88>
 8004e4c:	0039      	movs	r1, r7
 8004e4e:	0028      	movs	r0, r5
 8004e50:	f7ff ffc6 	bl	8004de0 <sbrk_aligned>
 8004e54:	0004      	movs	r4, r0
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d15f      	bne.n	8004f1a <_malloc_r+0xf6>
 8004e5a:	6834      	ldr	r4, [r6, #0]
 8004e5c:	9400      	str	r4, [sp, #0]
 8004e5e:	9b00      	ldr	r3, [sp, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d14a      	bne.n	8004efa <_malloc_r+0xd6>
 8004e64:	2c00      	cmp	r4, #0
 8004e66:	d052      	beq.n	8004f0e <_malloc_r+0xea>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	0028      	movs	r0, r5
 8004e6c:	18e3      	adds	r3, r4, r3
 8004e6e:	9900      	ldr	r1, [sp, #0]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	f000 fb53 	bl	800551c <_sbrk_r>
 8004e76:	9b01      	ldr	r3, [sp, #4]
 8004e78:	4283      	cmp	r3, r0
 8004e7a:	d148      	bne.n	8004f0e <_malloc_r+0xea>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	0028      	movs	r0, r5
 8004e80:	1aff      	subs	r7, r7, r3
 8004e82:	0039      	movs	r1, r7
 8004e84:	f7ff ffac 	bl	8004de0 <sbrk_aligned>
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d040      	beq.n	8004f0e <_malloc_r+0xea>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	19db      	adds	r3, r3, r7
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	6833      	ldr	r3, [r6, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	d133      	bne.n	8004f02 <_malloc_r+0xde>
 8004e9a:	9b00      	ldr	r3, [sp, #0]
 8004e9c:	6033      	str	r3, [r6, #0]
 8004e9e:	e019      	b.n	8004ed4 <_malloc_r+0xb0>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dac9      	bge.n	8004e38 <_malloc_r+0x14>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eac:	6821      	ldr	r1, [r4, #0]
 8004eae:	1bc9      	subs	r1, r1, r7
 8004eb0:	d420      	bmi.n	8004ef4 <_malloc_r+0xd0>
 8004eb2:	290b      	cmp	r1, #11
 8004eb4:	d90a      	bls.n	8004ecc <_malloc_r+0xa8>
 8004eb6:	19e2      	adds	r2, r4, r7
 8004eb8:	6027      	str	r7, [r4, #0]
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	d104      	bne.n	8004ec8 <_malloc_r+0xa4>
 8004ebe:	6032      	str	r2, [r6, #0]
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	6011      	str	r1, [r2, #0]
 8004ec4:	6053      	str	r3, [r2, #4]
 8004ec6:	e005      	b.n	8004ed4 <_malloc_r+0xb0>
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	e7f9      	b.n	8004ec0 <_malloc_r+0x9c>
 8004ecc:	6862      	ldr	r2, [r4, #4]
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	d10e      	bne.n	8004ef0 <_malloc_r+0xcc>
 8004ed2:	6032      	str	r2, [r6, #0]
 8004ed4:	0028      	movs	r0, r5
 8004ed6:	f000 f82d 	bl	8004f34 <__malloc_unlock>
 8004eda:	0020      	movs	r0, r4
 8004edc:	2207      	movs	r2, #7
 8004ede:	300b      	adds	r0, #11
 8004ee0:	1d23      	adds	r3, r4, #4
 8004ee2:	4390      	bics	r0, r2
 8004ee4:	1ac2      	subs	r2, r0, r3
 8004ee6:	4298      	cmp	r0, r3
 8004ee8:	d0df      	beq.n	8004eaa <_malloc_r+0x86>
 8004eea:	1a1b      	subs	r3, r3, r0
 8004eec:	50a3      	str	r3, [r4, r2]
 8004eee:	e7dc      	b.n	8004eaa <_malloc_r+0x86>
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	e7ef      	b.n	8004ed4 <_malloc_r+0xb0>
 8004ef4:	0023      	movs	r3, r4
 8004ef6:	6864      	ldr	r4, [r4, #4]
 8004ef8:	e7a6      	b.n	8004e48 <_malloc_r+0x24>
 8004efa:	9c00      	ldr	r4, [sp, #0]
 8004efc:	6863      	ldr	r3, [r4, #4]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	e7ad      	b.n	8004e5e <_malloc_r+0x3a>
 8004f02:	001a      	movs	r2, r3
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	42a3      	cmp	r3, r4
 8004f08:	d1fb      	bne.n	8004f02 <_malloc_r+0xde>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e7da      	b.n	8004ec4 <_malloc_r+0xa0>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	0028      	movs	r0, r5
 8004f12:	602b      	str	r3, [r5, #0]
 8004f14:	f000 f80e 	bl	8004f34 <__malloc_unlock>
 8004f18:	e7c6      	b.n	8004ea8 <_malloc_r+0x84>
 8004f1a:	6007      	str	r7, [r0, #0]
 8004f1c:	e7da      	b.n	8004ed4 <_malloc_r+0xb0>
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	200002f8 	.word	0x200002f8

08004f24 <__malloc_lock>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	4802      	ldr	r0, [pc, #8]	@ (8004f30 <__malloc_lock+0xc>)
 8004f28:	f7ff ff04 	bl	8004d34 <__retarget_lock_acquire_recursive>
 8004f2c:	bd10      	pop	{r4, pc}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	200002f0 	.word	0x200002f0

08004f34 <__malloc_unlock>:
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4802      	ldr	r0, [pc, #8]	@ (8004f40 <__malloc_unlock+0xc>)
 8004f38:	f7ff fefd 	bl	8004d36 <__retarget_lock_release_recursive>
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	200002f0 	.word	0x200002f0

08004f44 <__ssputs_r>:
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	688e      	ldr	r6, [r1, #8]
 8004f48:	b085      	sub	sp, #20
 8004f4a:	001f      	movs	r7, r3
 8004f4c:	000c      	movs	r4, r1
 8004f4e:	680b      	ldr	r3, [r1, #0]
 8004f50:	9002      	str	r0, [sp, #8]
 8004f52:	9203      	str	r2, [sp, #12]
 8004f54:	42be      	cmp	r6, r7
 8004f56:	d830      	bhi.n	8004fba <__ssputs_r+0x76>
 8004f58:	210c      	movs	r1, #12
 8004f5a:	5e62      	ldrsh	r2, [r4, r1]
 8004f5c:	2190      	movs	r1, #144	@ 0x90
 8004f5e:	00c9      	lsls	r1, r1, #3
 8004f60:	420a      	tst	r2, r1
 8004f62:	d028      	beq.n	8004fb6 <__ssputs_r+0x72>
 8004f64:	2003      	movs	r0, #3
 8004f66:	6921      	ldr	r1, [r4, #16]
 8004f68:	1a5b      	subs	r3, r3, r1
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	6963      	ldr	r3, [r4, #20]
 8004f6e:	4343      	muls	r3, r0
 8004f70:	9801      	ldr	r0, [sp, #4]
 8004f72:	0fdd      	lsrs	r5, r3, #31
 8004f74:	18ed      	adds	r5, r5, r3
 8004f76:	1c7b      	adds	r3, r7, #1
 8004f78:	181b      	adds	r3, r3, r0
 8004f7a:	106d      	asrs	r5, r5, #1
 8004f7c:	42ab      	cmp	r3, r5
 8004f7e:	d900      	bls.n	8004f82 <__ssputs_r+0x3e>
 8004f80:	001d      	movs	r5, r3
 8004f82:	0552      	lsls	r2, r2, #21
 8004f84:	d528      	bpl.n	8004fd8 <__ssputs_r+0x94>
 8004f86:	0029      	movs	r1, r5
 8004f88:	9802      	ldr	r0, [sp, #8]
 8004f8a:	f7ff ff4b 	bl	8004e24 <_malloc_r>
 8004f8e:	1e06      	subs	r6, r0, #0
 8004f90:	d02c      	beq.n	8004fec <__ssputs_r+0xa8>
 8004f92:	9a01      	ldr	r2, [sp, #4]
 8004f94:	6921      	ldr	r1, [r4, #16]
 8004f96:	f7ff fecf 	bl	8004d38 <memcpy>
 8004f9a:	89a2      	ldrh	r2, [r4, #12]
 8004f9c:	4b18      	ldr	r3, [pc, #96]	@ (8005000 <__ssputs_r+0xbc>)
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	9b01      	ldr	r3, [sp, #4]
 8004fa8:	6126      	str	r6, [r4, #16]
 8004faa:	18f6      	adds	r6, r6, r3
 8004fac:	6026      	str	r6, [r4, #0]
 8004fae:	003e      	movs	r6, r7
 8004fb0:	6165      	str	r5, [r4, #20]
 8004fb2:	1aed      	subs	r5, r5, r3
 8004fb4:	60a5      	str	r5, [r4, #8]
 8004fb6:	42be      	cmp	r6, r7
 8004fb8:	d900      	bls.n	8004fbc <__ssputs_r+0x78>
 8004fba:	003e      	movs	r6, r7
 8004fbc:	0032      	movs	r2, r6
 8004fbe:	9903      	ldr	r1, [sp, #12]
 8004fc0:	6820      	ldr	r0, [r4, #0]
 8004fc2:	f000 fa99 	bl	80054f8 <memmove>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	68a3      	ldr	r3, [r4, #8]
 8004fca:	1b9b      	subs	r3, r3, r6
 8004fcc:	60a3      	str	r3, [r4, #8]
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	199b      	adds	r3, r3, r6
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	b005      	add	sp, #20
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd8:	002a      	movs	r2, r5
 8004fda:	9802      	ldr	r0, [sp, #8]
 8004fdc:	f000 fabb 	bl	8005556 <_realloc_r>
 8004fe0:	1e06      	subs	r6, r0, #0
 8004fe2:	d1e0      	bne.n	8004fa6 <__ssputs_r+0x62>
 8004fe4:	6921      	ldr	r1, [r4, #16]
 8004fe6:	9802      	ldr	r0, [sp, #8]
 8004fe8:	f7ff feb0 	bl	8004d4c <_free_r>
 8004fec:	230c      	movs	r3, #12
 8004fee:	2001      	movs	r0, #1
 8004ff0:	9a02      	ldr	r2, [sp, #8]
 8004ff2:	4240      	negs	r0, r0
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	89a2      	ldrh	r2, [r4, #12]
 8004ff8:	3334      	adds	r3, #52	@ 0x34
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	e7e9      	b.n	8004fd4 <__ssputs_r+0x90>
 8005000:	fffffb7f 	.word	0xfffffb7f

08005004 <_svfiprintf_r>:
 8005004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005006:	b0a1      	sub	sp, #132	@ 0x84
 8005008:	9003      	str	r0, [sp, #12]
 800500a:	001d      	movs	r5, r3
 800500c:	898b      	ldrh	r3, [r1, #12]
 800500e:	000f      	movs	r7, r1
 8005010:	0016      	movs	r6, r2
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	d511      	bpl.n	800503a <_svfiprintf_r+0x36>
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10e      	bne.n	800503a <_svfiprintf_r+0x36>
 800501c:	2140      	movs	r1, #64	@ 0x40
 800501e:	f7ff ff01 	bl	8004e24 <_malloc_r>
 8005022:	6038      	str	r0, [r7, #0]
 8005024:	6138      	str	r0, [r7, #16]
 8005026:	2800      	cmp	r0, #0
 8005028:	d105      	bne.n	8005036 <_svfiprintf_r+0x32>
 800502a:	230c      	movs	r3, #12
 800502c:	9a03      	ldr	r2, [sp, #12]
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	2001      	movs	r0, #1
 8005032:	4240      	negs	r0, r0
 8005034:	e0cf      	b.n	80051d6 <_svfiprintf_r+0x1d2>
 8005036:	2340      	movs	r3, #64	@ 0x40
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	2300      	movs	r3, #0
 800503c:	ac08      	add	r4, sp, #32
 800503e:	6163      	str	r3, [r4, #20]
 8005040:	3320      	adds	r3, #32
 8005042:	7663      	strb	r3, [r4, #25]
 8005044:	3310      	adds	r3, #16
 8005046:	76a3      	strb	r3, [r4, #26]
 8005048:	9507      	str	r5, [sp, #28]
 800504a:	0035      	movs	r5, r6
 800504c:	782b      	ldrb	r3, [r5, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <_svfiprintf_r+0x52>
 8005052:	2b25      	cmp	r3, #37	@ 0x25
 8005054:	d148      	bne.n	80050e8 <_svfiprintf_r+0xe4>
 8005056:	1bab      	subs	r3, r5, r6
 8005058:	9305      	str	r3, [sp, #20]
 800505a:	42b5      	cmp	r5, r6
 800505c:	d00b      	beq.n	8005076 <_svfiprintf_r+0x72>
 800505e:	0032      	movs	r2, r6
 8005060:	0039      	movs	r1, r7
 8005062:	9803      	ldr	r0, [sp, #12]
 8005064:	f7ff ff6e 	bl	8004f44 <__ssputs_r>
 8005068:	3001      	adds	r0, #1
 800506a:	d100      	bne.n	800506e <_svfiprintf_r+0x6a>
 800506c:	e0ae      	b.n	80051cc <_svfiprintf_r+0x1c8>
 800506e:	6963      	ldr	r3, [r4, #20]
 8005070:	9a05      	ldr	r2, [sp, #20]
 8005072:	189b      	adds	r3, r3, r2
 8005074:	6163      	str	r3, [r4, #20]
 8005076:	782b      	ldrb	r3, [r5, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d100      	bne.n	800507e <_svfiprintf_r+0x7a>
 800507c:	e0a6      	b.n	80051cc <_svfiprintf_r+0x1c8>
 800507e:	2201      	movs	r2, #1
 8005080:	2300      	movs	r3, #0
 8005082:	4252      	negs	r2, r2
 8005084:	6062      	str	r2, [r4, #4]
 8005086:	a904      	add	r1, sp, #16
 8005088:	3254      	adds	r2, #84	@ 0x54
 800508a:	1852      	adds	r2, r2, r1
 800508c:	1c6e      	adds	r6, r5, #1
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	60e3      	str	r3, [r4, #12]
 8005092:	60a3      	str	r3, [r4, #8]
 8005094:	7013      	strb	r3, [r2, #0]
 8005096:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005098:	4b54      	ldr	r3, [pc, #336]	@ (80051ec <_svfiprintf_r+0x1e8>)
 800509a:	2205      	movs	r2, #5
 800509c:	0018      	movs	r0, r3
 800509e:	7831      	ldrb	r1, [r6, #0]
 80050a0:	9305      	str	r3, [sp, #20]
 80050a2:	f000 fa4d 	bl	8005540 <memchr>
 80050a6:	1c75      	adds	r5, r6, #1
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d11f      	bne.n	80050ec <_svfiprintf_r+0xe8>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	06d3      	lsls	r3, r2, #27
 80050b0:	d504      	bpl.n	80050bc <_svfiprintf_r+0xb8>
 80050b2:	2353      	movs	r3, #83	@ 0x53
 80050b4:	a904      	add	r1, sp, #16
 80050b6:	185b      	adds	r3, r3, r1
 80050b8:	2120      	movs	r1, #32
 80050ba:	7019      	strb	r1, [r3, #0]
 80050bc:	0713      	lsls	r3, r2, #28
 80050be:	d504      	bpl.n	80050ca <_svfiprintf_r+0xc6>
 80050c0:	2353      	movs	r3, #83	@ 0x53
 80050c2:	a904      	add	r1, sp, #16
 80050c4:	185b      	adds	r3, r3, r1
 80050c6:	212b      	movs	r1, #43	@ 0x2b
 80050c8:	7019      	strb	r1, [r3, #0]
 80050ca:	7833      	ldrb	r3, [r6, #0]
 80050cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ce:	d016      	beq.n	80050fe <_svfiprintf_r+0xfa>
 80050d0:	0035      	movs	r5, r6
 80050d2:	2100      	movs	r1, #0
 80050d4:	200a      	movs	r0, #10
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	782a      	ldrb	r2, [r5, #0]
 80050da:	1c6e      	adds	r6, r5, #1
 80050dc:	3a30      	subs	r2, #48	@ 0x30
 80050de:	2a09      	cmp	r2, #9
 80050e0:	d950      	bls.n	8005184 <_svfiprintf_r+0x180>
 80050e2:	2900      	cmp	r1, #0
 80050e4:	d111      	bne.n	800510a <_svfiprintf_r+0x106>
 80050e6:	e017      	b.n	8005118 <_svfiprintf_r+0x114>
 80050e8:	3501      	adds	r5, #1
 80050ea:	e7af      	b.n	800504c <_svfiprintf_r+0x48>
 80050ec:	9b05      	ldr	r3, [sp, #20]
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	1ac0      	subs	r0, r0, r3
 80050f2:	2301      	movs	r3, #1
 80050f4:	4083      	lsls	r3, r0
 80050f6:	4313      	orrs	r3, r2
 80050f8:	002e      	movs	r6, r5
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	e7cc      	b.n	8005098 <_svfiprintf_r+0x94>
 80050fe:	9b07      	ldr	r3, [sp, #28]
 8005100:	1d19      	adds	r1, r3, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	9107      	str	r1, [sp, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	db01      	blt.n	800510e <_svfiprintf_r+0x10a>
 800510a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800510c:	e004      	b.n	8005118 <_svfiprintf_r+0x114>
 800510e:	425b      	negs	r3, r3
 8005110:	60e3      	str	r3, [r4, #12]
 8005112:	2302      	movs	r3, #2
 8005114:	4313      	orrs	r3, r2
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	782b      	ldrb	r3, [r5, #0]
 800511a:	2b2e      	cmp	r3, #46	@ 0x2e
 800511c:	d10c      	bne.n	8005138 <_svfiprintf_r+0x134>
 800511e:	786b      	ldrb	r3, [r5, #1]
 8005120:	2b2a      	cmp	r3, #42	@ 0x2a
 8005122:	d134      	bne.n	800518e <_svfiprintf_r+0x18a>
 8005124:	9b07      	ldr	r3, [sp, #28]
 8005126:	3502      	adds	r5, #2
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	9207      	str	r2, [sp, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	da01      	bge.n	8005136 <_svfiprintf_r+0x132>
 8005132:	2301      	movs	r3, #1
 8005134:	425b      	negs	r3, r3
 8005136:	9309      	str	r3, [sp, #36]	@ 0x24
 8005138:	4e2d      	ldr	r6, [pc, #180]	@ (80051f0 <_svfiprintf_r+0x1ec>)
 800513a:	2203      	movs	r2, #3
 800513c:	0030      	movs	r0, r6
 800513e:	7829      	ldrb	r1, [r5, #0]
 8005140:	f000 f9fe 	bl	8005540 <memchr>
 8005144:	2800      	cmp	r0, #0
 8005146:	d006      	beq.n	8005156 <_svfiprintf_r+0x152>
 8005148:	2340      	movs	r3, #64	@ 0x40
 800514a:	1b80      	subs	r0, r0, r6
 800514c:	4083      	lsls	r3, r0
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	3501      	adds	r5, #1
 8005152:	4313      	orrs	r3, r2
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	7829      	ldrb	r1, [r5, #0]
 8005158:	2206      	movs	r2, #6
 800515a:	4826      	ldr	r0, [pc, #152]	@ (80051f4 <_svfiprintf_r+0x1f0>)
 800515c:	1c6e      	adds	r6, r5, #1
 800515e:	7621      	strb	r1, [r4, #24]
 8005160:	f000 f9ee 	bl	8005540 <memchr>
 8005164:	2800      	cmp	r0, #0
 8005166:	d038      	beq.n	80051da <_svfiprintf_r+0x1d6>
 8005168:	4b23      	ldr	r3, [pc, #140]	@ (80051f8 <_svfiprintf_r+0x1f4>)
 800516a:	2b00      	cmp	r3, #0
 800516c:	d122      	bne.n	80051b4 <_svfiprintf_r+0x1b0>
 800516e:	2207      	movs	r2, #7
 8005170:	9b07      	ldr	r3, [sp, #28]
 8005172:	3307      	adds	r3, #7
 8005174:	4393      	bics	r3, r2
 8005176:	3308      	adds	r3, #8
 8005178:	9307      	str	r3, [sp, #28]
 800517a:	6963      	ldr	r3, [r4, #20]
 800517c:	9a04      	ldr	r2, [sp, #16]
 800517e:	189b      	adds	r3, r3, r2
 8005180:	6163      	str	r3, [r4, #20]
 8005182:	e762      	b.n	800504a <_svfiprintf_r+0x46>
 8005184:	4343      	muls	r3, r0
 8005186:	0035      	movs	r5, r6
 8005188:	2101      	movs	r1, #1
 800518a:	189b      	adds	r3, r3, r2
 800518c:	e7a4      	b.n	80050d8 <_svfiprintf_r+0xd4>
 800518e:	2300      	movs	r3, #0
 8005190:	200a      	movs	r0, #10
 8005192:	0019      	movs	r1, r3
 8005194:	3501      	adds	r5, #1
 8005196:	6063      	str	r3, [r4, #4]
 8005198:	782a      	ldrb	r2, [r5, #0]
 800519a:	1c6e      	adds	r6, r5, #1
 800519c:	3a30      	subs	r2, #48	@ 0x30
 800519e:	2a09      	cmp	r2, #9
 80051a0:	d903      	bls.n	80051aa <_svfiprintf_r+0x1a6>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0c8      	beq.n	8005138 <_svfiprintf_r+0x134>
 80051a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80051a8:	e7c6      	b.n	8005138 <_svfiprintf_r+0x134>
 80051aa:	4341      	muls	r1, r0
 80051ac:	0035      	movs	r5, r6
 80051ae:	2301      	movs	r3, #1
 80051b0:	1889      	adds	r1, r1, r2
 80051b2:	e7f1      	b.n	8005198 <_svfiprintf_r+0x194>
 80051b4:	aa07      	add	r2, sp, #28
 80051b6:	9200      	str	r2, [sp, #0]
 80051b8:	0021      	movs	r1, r4
 80051ba:	003a      	movs	r2, r7
 80051bc:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <_svfiprintf_r+0x1f8>)
 80051be:	9803      	ldr	r0, [sp, #12]
 80051c0:	e000      	b.n	80051c4 <_svfiprintf_r+0x1c0>
 80051c2:	bf00      	nop
 80051c4:	9004      	str	r0, [sp, #16]
 80051c6:	9b04      	ldr	r3, [sp, #16]
 80051c8:	3301      	adds	r3, #1
 80051ca:	d1d6      	bne.n	800517a <_svfiprintf_r+0x176>
 80051cc:	89bb      	ldrh	r3, [r7, #12]
 80051ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80051d0:	065b      	lsls	r3, r3, #25
 80051d2:	d500      	bpl.n	80051d6 <_svfiprintf_r+0x1d2>
 80051d4:	e72c      	b.n	8005030 <_svfiprintf_r+0x2c>
 80051d6:	b021      	add	sp, #132	@ 0x84
 80051d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051da:	aa07      	add	r2, sp, #28
 80051dc:	9200      	str	r2, [sp, #0]
 80051de:	0021      	movs	r1, r4
 80051e0:	003a      	movs	r2, r7
 80051e2:	4b06      	ldr	r3, [pc, #24]	@ (80051fc <_svfiprintf_r+0x1f8>)
 80051e4:	9803      	ldr	r0, [sp, #12]
 80051e6:	f000 f87b 	bl	80052e0 <_printf_i>
 80051ea:	e7eb      	b.n	80051c4 <_svfiprintf_r+0x1c0>
 80051ec:	08005788 	.word	0x08005788
 80051f0:	0800578e 	.word	0x0800578e
 80051f4:	08005792 	.word	0x08005792
 80051f8:	00000000 	.word	0x00000000
 80051fc:	08004f45 	.word	0x08004f45

08005200 <_printf_common>:
 8005200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005202:	0016      	movs	r6, r2
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	688a      	ldr	r2, [r1, #8]
 8005208:	690b      	ldr	r3, [r1, #16]
 800520a:	000c      	movs	r4, r1
 800520c:	9000      	str	r0, [sp, #0]
 800520e:	4293      	cmp	r3, r2
 8005210:	da00      	bge.n	8005214 <_printf_common+0x14>
 8005212:	0013      	movs	r3, r2
 8005214:	0022      	movs	r2, r4
 8005216:	6033      	str	r3, [r6, #0]
 8005218:	3243      	adds	r2, #67	@ 0x43
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	2a00      	cmp	r2, #0
 800521e:	d001      	beq.n	8005224 <_printf_common+0x24>
 8005220:	3301      	adds	r3, #1
 8005222:	6033      	str	r3, [r6, #0]
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	069b      	lsls	r3, r3, #26
 8005228:	d502      	bpl.n	8005230 <_printf_common+0x30>
 800522a:	6833      	ldr	r3, [r6, #0]
 800522c:	3302      	adds	r3, #2
 800522e:	6033      	str	r3, [r6, #0]
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	2306      	movs	r3, #6
 8005234:	0015      	movs	r5, r2
 8005236:	401d      	ands	r5, r3
 8005238:	421a      	tst	r2, r3
 800523a:	d027      	beq.n	800528c <_printf_common+0x8c>
 800523c:	0023      	movs	r3, r4
 800523e:	3343      	adds	r3, #67	@ 0x43
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	1e5a      	subs	r2, r3, #1
 8005244:	4193      	sbcs	r3, r2
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	0692      	lsls	r2, r2, #26
 800524a:	d430      	bmi.n	80052ae <_printf_common+0xae>
 800524c:	0022      	movs	r2, r4
 800524e:	9901      	ldr	r1, [sp, #4]
 8005250:	9800      	ldr	r0, [sp, #0]
 8005252:	9d08      	ldr	r5, [sp, #32]
 8005254:	3243      	adds	r2, #67	@ 0x43
 8005256:	47a8      	blx	r5
 8005258:	3001      	adds	r0, #1
 800525a:	d025      	beq.n	80052a8 <_printf_common+0xa8>
 800525c:	2206      	movs	r2, #6
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	2500      	movs	r5, #0
 8005262:	4013      	ands	r3, r2
 8005264:	2b04      	cmp	r3, #4
 8005266:	d105      	bne.n	8005274 <_printf_common+0x74>
 8005268:	6833      	ldr	r3, [r6, #0]
 800526a:	68e5      	ldr	r5, [r4, #12]
 800526c:	1aed      	subs	r5, r5, r3
 800526e:	43eb      	mvns	r3, r5
 8005270:	17db      	asrs	r3, r3, #31
 8005272:	401d      	ands	r5, r3
 8005274:	68a3      	ldr	r3, [r4, #8]
 8005276:	6922      	ldr	r2, [r4, #16]
 8005278:	4293      	cmp	r3, r2
 800527a:	dd01      	ble.n	8005280 <_printf_common+0x80>
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	18ed      	adds	r5, r5, r3
 8005280:	2600      	movs	r6, #0
 8005282:	42b5      	cmp	r5, r6
 8005284:	d120      	bne.n	80052c8 <_printf_common+0xc8>
 8005286:	2000      	movs	r0, #0
 8005288:	e010      	b.n	80052ac <_printf_common+0xac>
 800528a:	3501      	adds	r5, #1
 800528c:	68e3      	ldr	r3, [r4, #12]
 800528e:	6832      	ldr	r2, [r6, #0]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	42ab      	cmp	r3, r5
 8005294:	ddd2      	ble.n	800523c <_printf_common+0x3c>
 8005296:	0022      	movs	r2, r4
 8005298:	2301      	movs	r3, #1
 800529a:	9901      	ldr	r1, [sp, #4]
 800529c:	9800      	ldr	r0, [sp, #0]
 800529e:	9f08      	ldr	r7, [sp, #32]
 80052a0:	3219      	adds	r2, #25
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	d1f0      	bne.n	800528a <_printf_common+0x8a>
 80052a8:	2001      	movs	r0, #1
 80052aa:	4240      	negs	r0, r0
 80052ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052ae:	2030      	movs	r0, #48	@ 0x30
 80052b0:	18e1      	adds	r1, r4, r3
 80052b2:	3143      	adds	r1, #67	@ 0x43
 80052b4:	7008      	strb	r0, [r1, #0]
 80052b6:	0021      	movs	r1, r4
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	3145      	adds	r1, #69	@ 0x45
 80052bc:	7809      	ldrb	r1, [r1, #0]
 80052be:	18a2      	adds	r2, r4, r2
 80052c0:	3243      	adds	r2, #67	@ 0x43
 80052c2:	3302      	adds	r3, #2
 80052c4:	7011      	strb	r1, [r2, #0]
 80052c6:	e7c1      	b.n	800524c <_printf_common+0x4c>
 80052c8:	0022      	movs	r2, r4
 80052ca:	2301      	movs	r3, #1
 80052cc:	9901      	ldr	r1, [sp, #4]
 80052ce:	9800      	ldr	r0, [sp, #0]
 80052d0:	9f08      	ldr	r7, [sp, #32]
 80052d2:	321a      	adds	r2, #26
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	d0e6      	beq.n	80052a8 <_printf_common+0xa8>
 80052da:	3601      	adds	r6, #1
 80052dc:	e7d1      	b.n	8005282 <_printf_common+0x82>
	...

080052e0 <_printf_i>:
 80052e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e2:	b08b      	sub	sp, #44	@ 0x2c
 80052e4:	9206      	str	r2, [sp, #24]
 80052e6:	000a      	movs	r2, r1
 80052e8:	3243      	adds	r2, #67	@ 0x43
 80052ea:	9307      	str	r3, [sp, #28]
 80052ec:	9005      	str	r0, [sp, #20]
 80052ee:	9203      	str	r2, [sp, #12]
 80052f0:	7e0a      	ldrb	r2, [r1, #24]
 80052f2:	000c      	movs	r4, r1
 80052f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052f6:	2a78      	cmp	r2, #120	@ 0x78
 80052f8:	d809      	bhi.n	800530e <_printf_i+0x2e>
 80052fa:	2a62      	cmp	r2, #98	@ 0x62
 80052fc:	d80b      	bhi.n	8005316 <_printf_i+0x36>
 80052fe:	2a00      	cmp	r2, #0
 8005300:	d100      	bne.n	8005304 <_printf_i+0x24>
 8005302:	e0ba      	b.n	800547a <_printf_i+0x19a>
 8005304:	497a      	ldr	r1, [pc, #488]	@ (80054f0 <_printf_i+0x210>)
 8005306:	9104      	str	r1, [sp, #16]
 8005308:	2a58      	cmp	r2, #88	@ 0x58
 800530a:	d100      	bne.n	800530e <_printf_i+0x2e>
 800530c:	e08e      	b.n	800542c <_printf_i+0x14c>
 800530e:	0025      	movs	r5, r4
 8005310:	3542      	adds	r5, #66	@ 0x42
 8005312:	702a      	strb	r2, [r5, #0]
 8005314:	e022      	b.n	800535c <_printf_i+0x7c>
 8005316:	0010      	movs	r0, r2
 8005318:	3863      	subs	r0, #99	@ 0x63
 800531a:	2815      	cmp	r0, #21
 800531c:	d8f7      	bhi.n	800530e <_printf_i+0x2e>
 800531e:	f7fa fef9 	bl	8000114 <__gnu_thumb1_case_shi>
 8005322:	0016      	.short	0x0016
 8005324:	fff6001f 	.word	0xfff6001f
 8005328:	fff6fff6 	.word	0xfff6fff6
 800532c:	001ffff6 	.word	0x001ffff6
 8005330:	fff6fff6 	.word	0xfff6fff6
 8005334:	fff6fff6 	.word	0xfff6fff6
 8005338:	0036009f 	.word	0x0036009f
 800533c:	fff6007e 	.word	0xfff6007e
 8005340:	00b0fff6 	.word	0x00b0fff6
 8005344:	0036fff6 	.word	0x0036fff6
 8005348:	fff6fff6 	.word	0xfff6fff6
 800534c:	0082      	.short	0x0082
 800534e:	0025      	movs	r5, r4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	3542      	adds	r5, #66	@ 0x42
 8005354:	1d11      	adds	r1, r2, #4
 8005356:	6019      	str	r1, [r3, #0]
 8005358:	6813      	ldr	r3, [r2, #0]
 800535a:	702b      	strb	r3, [r5, #0]
 800535c:	2301      	movs	r3, #1
 800535e:	e09e      	b.n	800549e <_printf_i+0x1be>
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	6809      	ldr	r1, [r1, #0]
 8005364:	1d02      	adds	r2, r0, #4
 8005366:	060d      	lsls	r5, r1, #24
 8005368:	d50b      	bpl.n	8005382 <_printf_i+0xa2>
 800536a:	6806      	ldr	r6, [r0, #0]
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	2e00      	cmp	r6, #0
 8005370:	da03      	bge.n	800537a <_printf_i+0x9a>
 8005372:	232d      	movs	r3, #45	@ 0x2d
 8005374:	9a03      	ldr	r2, [sp, #12]
 8005376:	4276      	negs	r6, r6
 8005378:	7013      	strb	r3, [r2, #0]
 800537a:	4b5d      	ldr	r3, [pc, #372]	@ (80054f0 <_printf_i+0x210>)
 800537c:	270a      	movs	r7, #10
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	e018      	b.n	80053b4 <_printf_i+0xd4>
 8005382:	6806      	ldr	r6, [r0, #0]
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	0649      	lsls	r1, r1, #25
 8005388:	d5f1      	bpl.n	800536e <_printf_i+0x8e>
 800538a:	b236      	sxth	r6, r6
 800538c:	e7ef      	b.n	800536e <_printf_i+0x8e>
 800538e:	6808      	ldr	r0, [r1, #0]
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	c940      	ldmia	r1!, {r6}
 8005394:	0605      	lsls	r5, r0, #24
 8005396:	d402      	bmi.n	800539e <_printf_i+0xbe>
 8005398:	0640      	lsls	r0, r0, #25
 800539a:	d500      	bpl.n	800539e <_printf_i+0xbe>
 800539c:	b2b6      	uxth	r6, r6
 800539e:	6019      	str	r1, [r3, #0]
 80053a0:	4b53      	ldr	r3, [pc, #332]	@ (80054f0 <_printf_i+0x210>)
 80053a2:	270a      	movs	r7, #10
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	2a6f      	cmp	r2, #111	@ 0x6f
 80053a8:	d100      	bne.n	80053ac <_printf_i+0xcc>
 80053aa:	3f02      	subs	r7, #2
 80053ac:	0023      	movs	r3, r4
 80053ae:	2200      	movs	r2, #0
 80053b0:	3343      	adds	r3, #67	@ 0x43
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	60a3      	str	r3, [r4, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	db06      	blt.n	80053ca <_printf_i+0xea>
 80053bc:	2104      	movs	r1, #4
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	9d03      	ldr	r5, [sp, #12]
 80053c2:	438a      	bics	r2, r1
 80053c4:	6022      	str	r2, [r4, #0]
 80053c6:	4333      	orrs	r3, r6
 80053c8:	d00c      	beq.n	80053e4 <_printf_i+0x104>
 80053ca:	9d03      	ldr	r5, [sp, #12]
 80053cc:	0030      	movs	r0, r6
 80053ce:	0039      	movs	r1, r7
 80053d0:	f7fa ff30 	bl	8000234 <__aeabi_uidivmod>
 80053d4:	9b04      	ldr	r3, [sp, #16]
 80053d6:	3d01      	subs	r5, #1
 80053d8:	5c5b      	ldrb	r3, [r3, r1]
 80053da:	702b      	strb	r3, [r5, #0]
 80053dc:	0033      	movs	r3, r6
 80053de:	0006      	movs	r6, r0
 80053e0:	429f      	cmp	r7, r3
 80053e2:	d9f3      	bls.n	80053cc <_printf_i+0xec>
 80053e4:	2f08      	cmp	r7, #8
 80053e6:	d109      	bne.n	80053fc <_printf_i+0x11c>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	07db      	lsls	r3, r3, #31
 80053ec:	d506      	bpl.n	80053fc <_printf_i+0x11c>
 80053ee:	6862      	ldr	r2, [r4, #4]
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	dc02      	bgt.n	80053fc <_printf_i+0x11c>
 80053f6:	2330      	movs	r3, #48	@ 0x30
 80053f8:	3d01      	subs	r5, #1
 80053fa:	702b      	strb	r3, [r5, #0]
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	1b5b      	subs	r3, r3, r5
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	9b07      	ldr	r3, [sp, #28]
 8005404:	0021      	movs	r1, r4
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	9805      	ldr	r0, [sp, #20]
 800540a:	9b06      	ldr	r3, [sp, #24]
 800540c:	aa09      	add	r2, sp, #36	@ 0x24
 800540e:	f7ff fef7 	bl	8005200 <_printf_common>
 8005412:	3001      	adds	r0, #1
 8005414:	d148      	bne.n	80054a8 <_printf_i+0x1c8>
 8005416:	2001      	movs	r0, #1
 8005418:	4240      	negs	r0, r0
 800541a:	b00b      	add	sp, #44	@ 0x2c
 800541c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541e:	2220      	movs	r2, #32
 8005420:	6809      	ldr	r1, [r1, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	6022      	str	r2, [r4, #0]
 8005426:	2278      	movs	r2, #120	@ 0x78
 8005428:	4932      	ldr	r1, [pc, #200]	@ (80054f4 <_printf_i+0x214>)
 800542a:	9104      	str	r1, [sp, #16]
 800542c:	0021      	movs	r1, r4
 800542e:	3145      	adds	r1, #69	@ 0x45
 8005430:	700a      	strb	r2, [r1, #0]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	c940      	ldmia	r1!, {r6}
 8005438:	0610      	lsls	r0, r2, #24
 800543a:	d402      	bmi.n	8005442 <_printf_i+0x162>
 800543c:	0650      	lsls	r0, r2, #25
 800543e:	d500      	bpl.n	8005442 <_printf_i+0x162>
 8005440:	b2b6      	uxth	r6, r6
 8005442:	6019      	str	r1, [r3, #0]
 8005444:	07d3      	lsls	r3, r2, #31
 8005446:	d502      	bpl.n	800544e <_printf_i+0x16e>
 8005448:	2320      	movs	r3, #32
 800544a:	4313      	orrs	r3, r2
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	2e00      	cmp	r6, #0
 8005450:	d001      	beq.n	8005456 <_printf_i+0x176>
 8005452:	2710      	movs	r7, #16
 8005454:	e7aa      	b.n	80053ac <_printf_i+0xcc>
 8005456:	2220      	movs	r2, #32
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	4393      	bics	r3, r2
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	e7f8      	b.n	8005452 <_printf_i+0x172>
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	680d      	ldr	r5, [r1, #0]
 8005464:	1d10      	adds	r0, r2, #4
 8005466:	6949      	ldr	r1, [r1, #20]
 8005468:	6018      	str	r0, [r3, #0]
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	062e      	lsls	r6, r5, #24
 800546e:	d501      	bpl.n	8005474 <_printf_i+0x194>
 8005470:	6019      	str	r1, [r3, #0]
 8005472:	e002      	b.n	800547a <_printf_i+0x19a>
 8005474:	066d      	lsls	r5, r5, #25
 8005476:	d5fb      	bpl.n	8005470 <_printf_i+0x190>
 8005478:	8019      	strh	r1, [r3, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	9d03      	ldr	r5, [sp, #12]
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	e7bf      	b.n	8005402 <_printf_i+0x122>
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	1d11      	adds	r1, r2, #4
 8005486:	6019      	str	r1, [r3, #0]
 8005488:	6815      	ldr	r5, [r2, #0]
 800548a:	2100      	movs	r1, #0
 800548c:	0028      	movs	r0, r5
 800548e:	6862      	ldr	r2, [r4, #4]
 8005490:	f000 f856 	bl	8005540 <memchr>
 8005494:	2800      	cmp	r0, #0
 8005496:	d001      	beq.n	800549c <_printf_i+0x1bc>
 8005498:	1b40      	subs	r0, r0, r5
 800549a:	6060      	str	r0, [r4, #4]
 800549c:	6863      	ldr	r3, [r4, #4]
 800549e:	6123      	str	r3, [r4, #16]
 80054a0:	2300      	movs	r3, #0
 80054a2:	9a03      	ldr	r2, [sp, #12]
 80054a4:	7013      	strb	r3, [r2, #0]
 80054a6:	e7ac      	b.n	8005402 <_printf_i+0x122>
 80054a8:	002a      	movs	r2, r5
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	9906      	ldr	r1, [sp, #24]
 80054ae:	9805      	ldr	r0, [sp, #20]
 80054b0:	9d07      	ldr	r5, [sp, #28]
 80054b2:	47a8      	blx	r5
 80054b4:	3001      	adds	r0, #1
 80054b6:	d0ae      	beq.n	8005416 <_printf_i+0x136>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	079b      	lsls	r3, r3, #30
 80054bc:	d415      	bmi.n	80054ea <_printf_i+0x20a>
 80054be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c0:	68e0      	ldr	r0, [r4, #12]
 80054c2:	4298      	cmp	r0, r3
 80054c4:	daa9      	bge.n	800541a <_printf_i+0x13a>
 80054c6:	0018      	movs	r0, r3
 80054c8:	e7a7      	b.n	800541a <_printf_i+0x13a>
 80054ca:	0022      	movs	r2, r4
 80054cc:	2301      	movs	r3, #1
 80054ce:	9906      	ldr	r1, [sp, #24]
 80054d0:	9805      	ldr	r0, [sp, #20]
 80054d2:	9e07      	ldr	r6, [sp, #28]
 80054d4:	3219      	adds	r2, #25
 80054d6:	47b0      	blx	r6
 80054d8:	3001      	adds	r0, #1
 80054da:	d09c      	beq.n	8005416 <_printf_i+0x136>
 80054dc:	3501      	adds	r5, #1
 80054de:	68e3      	ldr	r3, [r4, #12]
 80054e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	42ab      	cmp	r3, r5
 80054e6:	dcf0      	bgt.n	80054ca <_printf_i+0x1ea>
 80054e8:	e7e9      	b.n	80054be <_printf_i+0x1de>
 80054ea:	2500      	movs	r5, #0
 80054ec:	e7f7      	b.n	80054de <_printf_i+0x1fe>
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	08005799 	.word	0x08005799
 80054f4:	080057aa 	.word	0x080057aa

080054f8 <memmove>:
 80054f8:	b510      	push	{r4, lr}
 80054fa:	4288      	cmp	r0, r1
 80054fc:	d902      	bls.n	8005504 <memmove+0xc>
 80054fe:	188b      	adds	r3, r1, r2
 8005500:	4298      	cmp	r0, r3
 8005502:	d308      	bcc.n	8005516 <memmove+0x1e>
 8005504:	2300      	movs	r3, #0
 8005506:	429a      	cmp	r2, r3
 8005508:	d007      	beq.n	800551a <memmove+0x22>
 800550a:	5ccc      	ldrb	r4, [r1, r3]
 800550c:	54c4      	strb	r4, [r0, r3]
 800550e:	3301      	adds	r3, #1
 8005510:	e7f9      	b.n	8005506 <memmove+0xe>
 8005512:	5c8b      	ldrb	r3, [r1, r2]
 8005514:	5483      	strb	r3, [r0, r2]
 8005516:	3a01      	subs	r2, #1
 8005518:	d2fb      	bcs.n	8005512 <memmove+0x1a>
 800551a:	bd10      	pop	{r4, pc}

0800551c <_sbrk_r>:
 800551c:	2300      	movs	r3, #0
 800551e:	b570      	push	{r4, r5, r6, lr}
 8005520:	4d06      	ldr	r5, [pc, #24]	@ (800553c <_sbrk_r+0x20>)
 8005522:	0004      	movs	r4, r0
 8005524:	0008      	movs	r0, r1
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	f7fc fb5a 	bl	8001be0 <_sbrk>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d103      	bne.n	8005538 <_sbrk_r+0x1c>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d000      	beq.n	8005538 <_sbrk_r+0x1c>
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	200002ec 	.word	0x200002ec

08005540 <memchr>:
 8005540:	b2c9      	uxtb	r1, r1
 8005542:	1882      	adds	r2, r0, r2
 8005544:	4290      	cmp	r0, r2
 8005546:	d101      	bne.n	800554c <memchr+0xc>
 8005548:	2000      	movs	r0, #0
 800554a:	4770      	bx	lr
 800554c:	7803      	ldrb	r3, [r0, #0]
 800554e:	428b      	cmp	r3, r1
 8005550:	d0fb      	beq.n	800554a <memchr+0xa>
 8005552:	3001      	adds	r0, #1
 8005554:	e7f6      	b.n	8005544 <memchr+0x4>

08005556 <_realloc_r>:
 8005556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005558:	0006      	movs	r6, r0
 800555a:	000c      	movs	r4, r1
 800555c:	0015      	movs	r5, r2
 800555e:	2900      	cmp	r1, #0
 8005560:	d105      	bne.n	800556e <_realloc_r+0x18>
 8005562:	0011      	movs	r1, r2
 8005564:	f7ff fc5e 	bl	8004e24 <_malloc_r>
 8005568:	0004      	movs	r4, r0
 800556a:	0020      	movs	r0, r4
 800556c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800556e:	2a00      	cmp	r2, #0
 8005570:	d103      	bne.n	800557a <_realloc_r+0x24>
 8005572:	f7ff fbeb 	bl	8004d4c <_free_r>
 8005576:	002c      	movs	r4, r5
 8005578:	e7f7      	b.n	800556a <_realloc_r+0x14>
 800557a:	f000 f81c 	bl	80055b6 <_malloc_usable_size_r>
 800557e:	0007      	movs	r7, r0
 8005580:	4285      	cmp	r5, r0
 8005582:	d802      	bhi.n	800558a <_realloc_r+0x34>
 8005584:	0843      	lsrs	r3, r0, #1
 8005586:	42ab      	cmp	r3, r5
 8005588:	d3ef      	bcc.n	800556a <_realloc_r+0x14>
 800558a:	0029      	movs	r1, r5
 800558c:	0030      	movs	r0, r6
 800558e:	f7ff fc49 	bl	8004e24 <_malloc_r>
 8005592:	9001      	str	r0, [sp, #4]
 8005594:	2800      	cmp	r0, #0
 8005596:	d101      	bne.n	800559c <_realloc_r+0x46>
 8005598:	9c01      	ldr	r4, [sp, #4]
 800559a:	e7e6      	b.n	800556a <_realloc_r+0x14>
 800559c:	002a      	movs	r2, r5
 800559e:	42bd      	cmp	r5, r7
 80055a0:	d900      	bls.n	80055a4 <_realloc_r+0x4e>
 80055a2:	003a      	movs	r2, r7
 80055a4:	0021      	movs	r1, r4
 80055a6:	9801      	ldr	r0, [sp, #4]
 80055a8:	f7ff fbc6 	bl	8004d38 <memcpy>
 80055ac:	0021      	movs	r1, r4
 80055ae:	0030      	movs	r0, r6
 80055b0:	f7ff fbcc 	bl	8004d4c <_free_r>
 80055b4:	e7f0      	b.n	8005598 <_realloc_r+0x42>

080055b6 <_malloc_usable_size_r>:
 80055b6:	1f0b      	subs	r3, r1, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	1f18      	subs	r0, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da01      	bge.n	80055c4 <_malloc_usable_size_r+0xe>
 80055c0:	580b      	ldr	r3, [r1, r0]
 80055c2:	18c0      	adds	r0, r0, r3
 80055c4:	4770      	bx	lr
	...

080055c8 <_init>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	46c0      	nop			@ (mov r8, r8)
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr

080055d4 <_fini>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr
